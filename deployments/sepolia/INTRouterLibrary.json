{
  "address": "0xD4d928B56e2b7d77F6d1CdF8cea2E990Cf882Fc9",
  "abi": [
    {
      "inputs": [],
      "name": "AssetTokenIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FactoryIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InputAmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RecipientIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIsZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetReserve",
          "type": "uint256"
        }
      ],
      "name": "InitialLiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract INTFactory",
          "name": "factory",
          "type": "INTFactory"
        },
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "quoteBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "txFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INTFactory",
          "name": "factory",
          "type": "INTFactory"
        },
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "quoteSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "txFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x312a9c326bd7ac306f2d95d596df84046084152ca9c609189b3d587f007ab1a6",
  "receipt": {
    "to": null,
    "from": "0x6b29b8af9AF126170513AE6524395E09025b214E",
    "contractAddress": "0xD4d928B56e2b7d77F6d1CdF8cea2E990Cf882Fc9",
    "transactionIndex": 53,
    "gasUsed": "1304987",
    "logsBloom": "0x
    "blockHash": "0x5b6f384df456d599f7013594138771cb3e7fa24a981f6ca01d2bffaf89c36fb5",
    "transactionHash": "0x312a9c326bd7ac306f2d95d596df84046084152ca9c609189b3d587f007ab1a6",
    "logs": [],
    "blockNumber": 7489564,
    "cumulativeGasUsed": "8534682",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "c1c7d9f7fb968a9dca8ae6dc66da337e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AssetTokenIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FactoryIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetReserve\",\"type\":\"uint256\"}],\"name\":\"InitialLiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract INTFactory\",\"name\":\"factory\",\"type\":\"INTFactory\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INTFactory\",\"name\":\"factory\",\"type\":\"INTFactory\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/INTRouterLibrary.sol\":\"INTRouterLibrary\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"src/INTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./INTPair.sol\\\";\\n\\ncontract INTFactory is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant CREATOR_ROLE = keccak256(\\\"CREATOR_ROLE\\\");\\n\\n    mapping(address => mapping(address => address)) private _pair;\\n\\n    address[] public pairs;\\n\\n    address public router;\\n\\n    address public treasury;\\n    uint256 public buyFee;\\n    uint256 public sellFee;\\n    uint256 public treasuryFeeRatio; // 1 => 1%\\n\\n    event TreasuryUpdated(address oldTreasury, address newTreasury);\\n    event BuyFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event SellFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event TreasuryFeeRatioUpdated(uint256 oldRatio, uint256 newRatio);\\n\\n    event PairCreated(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        address pair,\\n        uint256 totalPairs\\n    );\\n\\n    error TokenIsZeroAddress();\\n    error BuyFeeTooHigh();\\n    error SellFeeTooHigh();\\n    error TreasuryIsZeroAddress();\\n    error TreasuryFeeRatioTooHigh();\\n    error SameTreasuryFeeRatio();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address treasury_,\\n        uint256 buyFee_,\\n        uint256 sellFee_,\\n        uint256 treasuryFeeRatio_\\n    ) external initializer {\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        if (buyFee_ > 100) revert BuyFeeTooHigh();\\n        if (sellFee_ > 100) revert SellFeeTooHigh();\\n        if (treasuryFeeRatio_ > 100) revert TreasuryFeeRatioTooHigh();\\n\\n        treasury = treasury_;\\n        buyFee = buyFee_;\\n        sellFee = sellFee_;\\n        treasuryFeeRatio = treasuryFeeRatio_;\\n    }\\n\\n    function _createPair(\\n        address tokenA,\\n        address tokenB\\n    ) internal returns (address) {\\n        if (tokenA == address(0)) revert TokenIsZeroAddress();\\n        if (tokenB == address(0)) revert TokenIsZeroAddress();\\n\\n        INTPair pair_ = new INTPair(address(this), tokenA, tokenB);\\n\\n        _pair[tokenA][tokenB] = address(pair_);\\n        _pair[tokenB][tokenA] = address(pair_);\\n\\n        pairs.push(address(pair_));\\n\\n        uint256 totalPairs = pairs.length;\\n\\n        emit PairCreated(tokenA, tokenB, address(pair_), totalPairs);\\n\\n        return address(pair_);\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external onlyRole(CREATOR_ROLE) nonReentrant returns (address) {\\n        address pair = _createPair(tokenA, tokenB);\\n\\n        return pair;\\n    }\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) public view returns (address) {\\n        return _pair[tokenA][tokenB];\\n    }\\n\\n    function allPairsLength() public view returns (uint256) {\\n        return pairs.length;\\n    }\\n\\n    function setFeeParams(\\n        address newTreasury,\\n        uint256 newBuyFee,\\n        uint256 newSellFee,\\n        uint256 newTreasuryFeeRatio\\n    ) public onlyRole(ADMIN_ROLE) {\\n        if (newTreasury == address(0)) revert TreasuryIsZeroAddress();\\n        if (newBuyFee > 100) revert BuyFeeTooHigh();\\n        if (newSellFee > 100) revert SellFeeTooHigh();\\n        if (newTreasuryFeeRatio > 100) revert TreasuryFeeRatioTooHigh();\\n\\n        emit TreasuryUpdated(treasury, newTreasury);\\n        emit BuyFeeUpdated(buyFee, newBuyFee);\\n        emit SellFeeUpdated(sellFee, newSellFee);\\n        emit TreasuryFeeRatioUpdated(treasuryFeeRatio, newTreasuryFeeRatio);\\n\\n        treasury = newTreasury;\\n        buyFee = newBuyFee;\\n        sellFee = newSellFee;\\n        treasuryFeeRatio = newTreasuryFeeRatio;\\n    }\\n\\n    function setRouter(address router_) public onlyRole(ADMIN_ROLE) {\\n        router = router_;\\n    }\\n}\\n\",\"keccak256\":\"0x34f363fa05ec332f0540287b161a79eb768ec4c5b607a59ba040b27237c7a99d\",\"license\":\"MIT\"},\"src/INTPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IINTPair.sol\\\";\\nimport \\\"./INTFactory.sol\\\";\\n\\ncontract INTPair is IINTPair, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable factory;\\n    address public immutable tokenA; // meme token\\n    address public immutable tokenB;\\n\\n    struct Pool {\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 k;\\n        uint256 lastUpdated;\\n    }\\n\\n    Pool private _pool;\\n\\n    modifier onlyRouter() {\\n        if (msg.sender != INTFactory(factory).router()) revert CallerIsNotRouter();\\n        _;\\n    }\\n\\n    event Mint(uint256 reserve0, uint256 reserve1);\\n\\n    event Swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    );\\n\\n    error FactoryIsZeroAddress();\\n    error TokenIsZeroAddress();\\n    error CallerIsNotRouter();\\n    error AlreadyMinted();\\n    error RecipientIsZeroAddress();\\n\\n    constructor(address factory_, address token0, address token1) {\\n        if (factory_ == address(0)) revert FactoryIsZeroAddress();\\n        if (token0 == address(0)) revert TokenIsZeroAddress();\\n        if (token1 == address(0)) revert TokenIsZeroAddress();\\n\\n        factory = factory_;\\n        tokenA = token0;\\n        tokenB = token1;\\n    }\\n\\n    function mint(\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) public onlyRouter returns (bool) {\\n        if (_pool.lastUpdated != 0) revert AlreadyMinted();\\n\\n        _pool = Pool({\\n            reserve0: reserve0,\\n            reserve1: reserve1,\\n            k: reserve0 * reserve1,\\n            lastUpdated: block.timestamp\\n        });\\n\\n        emit Mint(reserve0, reserve1);\\n\\n        return true;\\n    }\\n\\n    function swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    ) public onlyRouter returns (bool) {\\n        uint256 _reserve0 = (_pool.reserve0 + amount0In) - amount0Out;\\n        uint256 _reserve1 = (_pool.reserve1 + amount1In) - amount1Out;\\n\\n        _pool = Pool({\\n            reserve0: _reserve0,\\n            reserve1: _reserve1,\\n            k: _pool.k,\\n            lastUpdated: block.timestamp\\n        });\\n\\n        emit Swap(amount0In, amount0Out, amount1In, amount1Out);\\n\\n        return true;\\n    }\\n\\n    function approval(\\n        address _user,\\n        address _token,\\n        uint256 amount\\n    ) public onlyRouter returns (bool) {\\n        if (_user == address(0)) revert RecipientIsZeroAddress();\\n        if (_token == address(0)) revert TokenIsZeroAddress();\\n\\n        IERC20 token = IERC20(_token);\\n\\n        token.forceApprove(_user, amount);\\n\\n        return true;\\n    }\\n\\n    function transferAsset(\\n        address recipient,\\n        uint256 amount\\n    ) public onlyRouter {\\n        if (recipient == address(0)) revert RecipientIsZeroAddress();\\n\\n        IERC20(tokenB).safeTransfer(recipient, amount);\\n    }\\n\\n    function transferTo(address recipient, uint256 amount) public onlyRouter {\\n        if (recipient == address(0)) revert RecipientIsZeroAddress();\\n\\n        IERC20(tokenA).safeTransfer(recipient, amount);\\n    }\\n\\n    function getReserves() public view returns (uint256, uint256) {\\n        return (_pool.reserve0, _pool.reserve1);\\n    }\\n\\n    function kLast() public view returns (uint256) {\\n        return _pool.k;\\n    }\\n\\n    function priceALast() public view returns (uint256) {\\n        return _pool.reserve1 / _pool.reserve0;\\n    }\\n\\n    function priceBLast() public view returns (uint256) {\\n        return _pool.reserve0 / _pool.reserve1;\\n    }\\n\\n    function balance() public view returns (uint256) {\\n        return IERC20(tokenA).balanceOf(address(this));\\n    }\\n\\n    function assetBalance() public view returns (uint256) {\\n        return IERC20(tokenB).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4104abcd2d281f871ea132719faf95ee9fca487ffd19dd781ecd39ca336fa292\",\"license\":\"MIT\"},\"src/interfaces/IBonding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IBonding {\\n    enum TokenStatus {\\n        None,\\n        BondingCurve,\\n        Graduated\\n    }\\n\\n    struct Token {\\n        address creator;\\n        address token;\\n        address pair;\\n        address locker;\\n        string description;\\n        uint8[] cores;\\n        string image;\\n        string twitter;\\n        string telegram;\\n        string farcaster;\\n        string website;\\n        bool trading;\\n        bool tradingOnUniswap;\\n    }\\n\\n    function tokenInfo(address token) external view returns (Token memory);\\n\\n    function getTokenLocker(\\n        address tokenAddress\\n    ) external view returns (address);\\n\\n    function getTokenCreator(\\n        address tokenAddress\\n    ) external view returns (address);\\n\\n    function hasGraduated(address tokenAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9fda31e18b8654ea8eff4c0f5aab0ea59ea2ef24d3354d3b2017c97913e3c185\",\"license\":\"MIT\"},\"src/interfaces/IINTPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IINTPair {\\n    function getReserves() external view returns (uint256, uint256);\\n\\n    function assetBalance() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n\\n    function mint(uint256 reserve0, uint256 reserve1) external returns (bool);\\n\\n    function transferAsset(address recipient, uint256 amount) external;\\n\\n    function transferTo(address recipient, uint256 amount) external;\\n\\n    function swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    ) external returns (bool);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function approval(\\n        address _user,\\n        address _token,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3e1d49d8cf5e87366b9636e3d367e31de775ab416a8de279f72eafd93f897af5\",\"license\":\"MIT\"},\"src/interfaces/ILock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILock {\\n    error NotBonding();\\n    error LockerIsZeroAddress();\\n    error HasLocked();\\n    error TokenDoesNotGraduate();\\n    error NotReleased();\\n\\n    function setLP(address _lp) external;\\n\\n    function lockLP(uint256 lockedAmount) external;\\n\\n    function delegateLPTo(address to) external;\\n\\n    function depositFee(uint256 amount) external;\\n\\n    function claimForTokenCreator() external;\\n\\n    function approveToken(\\n        address _token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2610e0be78b29858b099eead62ce736fc0f49a1e95937aa48cf45c0c948b5750\",\"license\":\"MIT\"},\"src/libraries/INTRouterLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../INTFactory.sol\\\";\\nimport \\\"../interfaces/IINTPair.sol\\\";\\nimport \\\"../interfaces/IBonding.sol\\\";\\nimport \\\"../interfaces/ILock.sol\\\";\\n\\nlibrary INTRouterLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    error TokenIsZeroAddress();\\n    error RecipientIsZeroAddress();\\n    error InputAmountIsZero();\\n    error FactoryIsZeroAddress();\\n    error AssetTokenIsZeroAddress();\\n\\n    event Buy(\\n        address indexed account,\\n        address indexed token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 assetFee,\\n        uint256 tokenReserve,\\n        uint256 assetReserve,\\n        uint256 timestamp\\n    );\\n    event Sell(\\n        address indexed account,\\n        address indexed token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 assetFee,\\n        uint256 tokenReserve,\\n        uint256 assetReserve,\\n        uint256 timestamp\\n    );\\n\\n    event InitialLiquidityAdded(\\n        address indexed token,\\n        uint256 tokenReserve,\\n        uint256 assetReserve\\n    );\\n\\n    function _getReserves(\\n        INTFactory factory,\\n        address assetToken,\\n        address token\\n    ) internal view returns (uint256 reserveA, uint256 reserveB, uint256 k) {\\n        address pairAddress = factory.getPair(token, assetToken);\\n        IINTPair pair = IINTPair(pairAddress);\\n        (reserveA, reserveB) = pair.getReserves();\\n        k = pair.kLast();\\n    }\\n\\n    function quoteBuy(\\n        INTFactory factory,\\n        address assetToken,\\n        address token,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut, uint256 txFee) {\\n        if (token == address(0)) revert TokenIsZeroAddress();\\n\\n        (uint256 reserveA, uint256 reserveB, uint256 k) = _getReserves(\\n            factory,\\n            assetToken,\\n            token\\n        );\\n\\n        uint256 fee = factory.buyFee();\\n        txFee = (fee * amountIn) / 100;\\n        amountIn = amountIn - txFee;\\n\\n        uint256 newReserveB = reserveB + amountIn;\\n        uint256 newReserveA = k / newReserveB;\\n        amountOut = reserveA - newReserveA;\\n    }\\n\\n    function quoteSell(\\n        INTFactory factory,\\n        address assetToken,\\n        address token,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut, uint256 txFee) {\\n        if (token == address(0)) revert TokenIsZeroAddress();\\n\\n        (uint256 reserveA, uint256 reserveB, uint256 k) = _getReserves(\\n            factory,\\n            assetToken,\\n            token\\n        );\\n\\n        uint256 newReserveA = reserveA + amountIn;\\n        uint256 newReserveB = k / newReserveA;\\n        amountOut = reserveB - newReserveB;\\n\\n        uint256 fee = factory.sellFee();\\n        txFee = (fee * amountOut) / 100;\\n        amountOut = amountOut - txFee;\\n    }\\n\\n    function addInitialLiquidity(\\n        INTFactory factory,\\n        address assetToken,\\n        address token_,\\n        uint256 amountToken_,\\n        uint256 amountAsset_\\n    ) public returns (uint256, uint256) {\\n        if (token_ == address(0)) revert TokenIsZeroAddress();\\n\\n        address pairAddress = factory.getPair(token_, assetToken);\\n\\n        IINTPair pair = IINTPair(pairAddress);\\n\\n        IERC20 token = IERC20(token_);\\n\\n        token.safeTransfer(pairAddress, amountToken_);\\n\\n        pair.mint(amountToken_, amountAsset_);\\n\\n        emit InitialLiquidityAdded(token_, amountToken_, amountAsset_);\\n\\n        return (amountToken_, amountAsset_);\\n    }\\n\\n    /**\\n     * @dev Distribute fee to treasury and lock contract based on the `treasuryFeeRatio`\\n     * @param from The address that buying the token, address(0) if selling\\n     * @param pair The pair contract When selling\\n     * @param fromToken The token that is being traded\\n     * @param amount The amount of token that is being traded\\n     */\\n    function collectFee(\\n        INTFactory factory,\\n        address assetToken,\\n        address from,\\n        address pair,\\n        address fromToken,\\n        uint256 amount\\n    ) internal {\\n        uint256 treasuryFeeRatio = factory.treasuryFeeRatio();\\n        uint256 treasuryFee = (amount * treasuryFeeRatio) / 100;\\n        address treasury = factory.treasury();\\n\\n        uint256 lockFee = amount - treasuryFee;\\n        address lockFeeTo = IBonding(address(this)).getTokenLocker(fromToken);\\n\\n        if (from == address(0)) {\\n            // Selling\\n            // Transfer treasury fee to treasury directly\\n            IINTPair(pair).transferAsset(treasury, treasuryFee);\\n\\n            // Transfer lock fee to this contract\\n            IINTPair(pair).transferAsset(address(this), lockFee);\\n        } else {\\n            // Buying\\n            // Transfer treasury fee to treasury directly\\n            IERC20(assetToken).safeTransferFrom(from, treasury, treasuryFee);\\n\\n            // Transfer lock fee to this contract\\n            IERC20(assetToken).safeTransferFrom(from, address(this), lockFee);\\n        }\\n\\n        // Approve to lock contract to deposit lock fee\\n        IERC20(assetToken).forceApprove(lockFeeTo, lockFee);\\n        // Deposit lock fee to lock contract\\n        ILock(lockFeeTo).depositFee(lockFee);\\n    }\\n\\n    function sell(\\n        INTFactory factory,\\n        address assetToken,\\n        uint256 amountIn,\\n        address tokenAddress,\\n        address to\\n    ) public returns (uint256, uint256) {\\n        if (tokenAddress == address(0)) revert TokenIsZeroAddress();\\n        if (to == address(0)) revert RecipientIsZeroAddress();\\n        if (amountIn == 0) revert InputAmountIsZero();\\n\\n        address pairAddress = factory.getPair(tokenAddress, assetToken);\\n\\n        IINTPair pair = IINTPair(pairAddress);\\n\\n        IERC20 token = IERC20(tokenAddress);\\n\\n        (uint256 amountOut, uint256 txFee) = quoteSell(\\n            factory,\\n            assetToken,\\n            tokenAddress,\\n            amountIn\\n        );\\n\\n        token.safeTransferFrom(to, pairAddress, amountIn);\\n\\n        pair.transferAsset(to, amountOut);\\n        collectFee(\\n            factory,\\n            assetToken,\\n            address(0),\\n            address(pair),\\n            tokenAddress,\\n            txFee\\n        );\\n\\n        pair.swap(amountIn, 0, 0, amountOut);\\n\\n        (uint256 reserveA, uint256 reserveB) = IINTPair(pair).getReserves();\\n\\n        emit Sell(\\n            to,\\n            tokenAddress,\\n            amountIn,\\n            amountOut,\\n            txFee,\\n            reserveA,\\n            reserveB,\\n            block.timestamp\\n        );\\n\\n        return (amountIn, amountOut);\\n    }\\n\\n    function buy(\\n        INTFactory factory,\\n        address assetToken,\\n        uint256 amountIn,\\n        address tokenAddress,\\n        address to\\n    ) public returns (uint256, uint256) {\\n        if (tokenAddress == address(0)) revert TokenIsZeroAddress();\\n        if (to == address(0)) revert RecipientIsZeroAddress();\\n        if (amountIn == 0) revert InputAmountIsZero();\\n\\n        address pair = factory.getPair(tokenAddress, assetToken);\\n\\n        (uint256 amountOut, uint256 txFee) = quoteBuy(\\n            factory,\\n            assetToken,\\n            tokenAddress,\\n            amountIn\\n        );\\n        uint256 amount = amountIn - txFee;\\n\\n        IERC20(assetToken).safeTransferFrom(to, pair, amount);\\n\\n        collectFee(factory, assetToken, to, address(0), tokenAddress, txFee);\\n\\n        IINTPair(pair).transferTo(to, amountOut);\\n\\n        IINTPair(pair).swap(0, amountOut, amount, 0);\\n\\n        (uint256 reserveA, uint256 reserveB) = IINTPair(pair).getReserves();\\n\\n        emit Buy(\\n            to,\\n            tokenAddress,\\n            amountOut,\\n            amount,\\n            txFee,\\n            reserveA,\\n            reserveB,\\n            block.timestamp\\n        );\\n\\n        return (amountIn, amountOut);\\n    }\\n\\n    function graduate(\\n        INTFactory factory,\\n        address assetToken,\\n        address tokenAddress\\n    ) public {\\n        if (tokenAddress == address(0)) revert TokenIsZeroAddress();\\n        address pair = factory.getPair(tokenAddress, assetToken);\\n        uint256 assetBalance = IINTPair(pair).assetBalance();\\n        uint256 balance = IINTPair(pair).balance();\\n        INTPair(pair).transferAsset(address(this), assetBalance);\\n        INTPair(pair).transferTo(address(this), balance);\\n    }\\n}\\n\",\"keccak256\":\"0xf57e6fed5ed63ee47bbfaf8d1df43ce2f2c57a7fa28491225d961b0be102cbd0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c5761169d90816100218239308160080152f35b5f80fdfe608080604052307f0000000000000000000000000000000000000000000000000000000000000000146004361015610035575f80fd5b5f91823560e01c9081630afbf7f314610e04575080633e834e241461091e5780637521b25c14610907578063a6b89187146108e4578063c682df77146102be5763e743240d14610083575f80fd5b6101d65760603660031901126101d65761009b610f8c565b6100a3610fa2565b6100ab610fb8565b916001600160a01b0390818416156102ac5760405163e6a4390560e01b81526001600160a01b03948516600482015292909316602483015283926020929083908290604490829086165afa9081156101fc57849161027f575b501660405163c66f245560e01b81528281600481855afa9081156101fc57849161024e575b506040516316d3df1560e31b81528381600481865afa93841561024357859461020c575b5050813b1561020757604051635c921eb960e01b81523060048201526024810191909152838160448183865af19081156101fc5784916101e8575b5050803b156101e4576040516302ccb1b360e41b8152306004820152602481019290925282908290604490829084905af180156101d9576101c65750f35b6101cf9061105d565b6101d65780f35b80fd5b6040513d84823e3d90fd5b5050fd5b6101f19061105d565b6101e457825f610188565b6040513d86823e3d90fd5b505050fd5b819550809294503d831161023c575b61022581836110a1565b8101031261023857839251915f8061014d565b5f80fd5b503d61021b565b6040513d87823e3d90fd5b809450838092503d8311610278575b61026781836110a1565b81010312610238578392515f610129565b503d61025d565b61029f9150833d85116102a5575b61029781836110a1565b8101906111e4565b5f610104565b503d61028d565b604051639bb8530d60e01b8152600490fd5b506101d6576102cc36610fce565b909491939290916001600160a01b038616156102ac576001600160a01b038316156108d25784156108c05760405163e6a4390560e01b81526001600160a01b0380881660048301528316602482015295602087806044810103816001600160a01b0389165afa9687156101d957829761089f575b5061034d86828588611345565b9095909390610367888a886001600160a01b03871661160c565b6001600160a01b0389163b156107f057604051635c921eb960e01b81526001600160a01b03871660048201526024810188905284818b8183816044810103926001600160a01b03165af180156102435790859161088b575b50506040516355ce97dd60e11b81525f92906020816004816001600160a01b0387165afa9081156101fc578491610858575b5090602060646104036004948a6110c3565b6040516361d027b360e01b8152919004949093849182906001600160a01b03165afa9182156101fc578492610837575b5061043e8388611108565b604051634d86030360e01b81526001600160a01b038716600482015290939092602084602481305afa93841561082c57869461080b575b506001600160a01b038d163b1561080757604051635c921eb960e01b81526001600160a01b039091166004820152602481019190915284818d8183816044810103926001600160a01b03165af18015610243576107f4575b506001600160a01b038b163b156107f057604051635c921eb960e01b81523060048201526024810184905284818d8183816044810103926001600160a01b03165af18015610243579085916107dc575b505060405163095ea7b360e01b602082018181526001600160a01b038581166024850152604484018790529193909116908690819061056985606481015b03601f1981018752866110a1565b84519082855af16105786114fb565b816107ad575b50806107a3575b1561075f575b5050506001600160a01b031690813b1561075b57829160248392604051948593849263211e242d60e11b845260048401525af180156101d957610747575b5050604051635673b02d60e01b815260048101879052602481018390526044810183905260648101869052602081608481866001600160a01b038d165af1801561073c579760409160049961070d575b508151630240bc6b60e21b815298899182906001600160a01b03165afa9081156101d95760409783926106b4575b508751878152602081018790526040810194909452606084019290925260808301524260a08301526001600160a01b039081169216907f594898f0701a8fbcf3e869135bc2a2d8194e98a46765b1f6ef41138fe049ebb8908060c081015b0390a382519182526020820152f35b7f594898f0701a8fbcf3e869135bc2a2d8194e98a46765b1f6ef41138fe049ebb893506106a59492506106fc90893d8b11610706575b6106f481836110a1565b810190611203565b9294909350610647565b503d6106ea565b61072e9060203d602011610735575b61072681836110a1565b8101906113ec565b505f610619565b503d61071c565b6040513d85823e3d90fd5b610751829161105d565b6101d657806105c9565b8280fd5b61079661079b9360405190602082015260018060a01b03861660248201528760448201526044815261079081611085565b82611404565b611404565b5f808061058b565b50803b1515610585565b80518015925082156107c2575b50505f61057e565b6107d592506020809183010191016113ec565b5f806107ba565b6107e59061105d565b6107f057835f61051d565b8380fd5b6108009094919461105d565b925f6104cd565b8580fd5b61082591945060203d6020116102a55761029781836110a1565b925f610475565b6040513d88823e3d90fd5b61085191925060203d6020116102a55761029781836110a1565b905f610433565b90506020813d602011610883575b81610873602093836110a1565b810103126107f0575160206103f1565b3d9150610866565b6108949061105d565b6107f057835f6103bf565b6108b991975060203d6020116102a55761029781836110a1565b955f610340565b604051632f44ea3760e01b8152600490fd5b6040516311d000e160e31b8152600490fd5b60406108fb6108f23661101c565b92919091611345565b82519182526020820152f35b60406108fb6109153661101c565b92919091611122565b506101d65761092c36610fce565b919392906001600160a01b038116156102ac576001600160a01b038316156108d25784156108c05760405163e6a4390560e01b81526001600160a01b03828116600483015283811660248301528516948793916020816044818a5afa9081156102435784848a928894610de1575b506109a59394611122565b9490966109b2868a611108565b936109c885858a6001600160a01b03851661160c565b6040516355ce97dd60e11b815290602082600481865afa9182156101fc578492610dac575b50602060646109fe6004948b6110c3565b0493604051938480926361d027b360e01b82525afa9182156101fc578492610d8b575b50610a2c8389611108565b604051634d86030360e01b81526001600160a01b038916600482015290939092602084602481305afa93841561082c578694610d64575b50610a7991908b6001600160a01b03851661160c565b610a8e83308b6001600160a01b03851661160c565b60405163095ea7b360e01b602082018181526001600160a01b03851660248401526044830186905290929086908190610aca856064810161055b565b845190826001600160a01b0386165af1610ae26114fb565b81610d35575b5080610d22575b15610ccc575b5050506001600160a01b0316803b1561075b5760248392604051948593849263211e242d60e11b845260048401525af18015610c9b57610cbd575b506001600160a01b0316803b15610cb9576040516302ccb1b360e41b81526001600160a01b038616600482015260248101879052888160448183865af18015610c9b57610ca6575b5060405190635673b02d60e01b82528860048301528660248301528260448301528860648301526020826084818c855af1908115610c9b57600492604092610c7c575b508151630240bc6b60e21b815292839182905afa908115610c7157917f30df0cd28c6e48e6fe24bcab9f36b5052aef24c98ba64b6ef2ba66b659e9a29e9391899360409a9491610c4c575b50895188815260208101929092526040820195909552606081019290925260808201939093524260a08201526001600160a01b0392831693909216918060c081016106a5565b6106a5929450610c6991508a3d8c11610706576106f481836110a1565b909391610c06565b6040513d8a823e3d90fd5b610c949060203d6020116107355761072681836110a1565b505f610bbb565b6040513d8b823e3d90fd5b610cb29098919861105d565b965f610b78565b8780fd5b610cc69061105d565b5f610b30565b610d0c610d1a9360405190602082015260018060a01b038616602482015287604482015260448152610cfd81611085565b6001600160a01b038316611404565b6001600160a01b0316611404565b5f8080610af5565b506001600160a01b0381163b1515610aef565b8051801592508215610d4a575b50505f610ae8565b610d5d92506020809183010191016113ec565b5f80610d42565b610a7992919450610d839060203d6020116102a55761029781836110a1565b939091610a63565b610da591925060203d6020116102a55761029781836110a1565b905f610a21565b91506020823d602011610dd9575b81610dc7602093836110a1565b810103126107f05790519060206109ed565b3d9150610dba565b6109a59450610dfe9060203d6020116102a55761029781836110a1565b9361099a565b919050610f885760a0366003190112610f8857610e1f610f8c565b90610e28610fa2565b610e30610fb8565b60643593608435936001600160a01b038084169390918415610f79575060405163e6a4390560e01b81526001600160a01b03918216600482015294166024850152602093879290919085908390604490829085165afa91821561073c5785926044918591610f5c575b5060405163a9059cbb60e01b858201526001600160a01b038216602482015260448082018b90528152610ed790610ed16064826110a1565b87611404565b6040519485938492630d9778e560e11b84528b60048501528a6024850152165af1801561082c5760409650610f3f575b507ffceec8344ad03a63e2303215f42c4071fadc71c9ae6a9fedb959dc03a3ce9fce8580518681528585820152a28351928352820152f35b610f5590833d85116107355761072681836110a1565b505f610f07565b610f739150843d86116102a55761029781836110a1565b5f610e99565b639bb8530d60e01b8152600490fd5b5080fd5b600435906001600160a01b038216820361023857565b602435906001600160a01b038216820361023857565b604435906001600160a01b038216820361023857565b60a0906003190112610238576001600160a01b036004358181168103610238579160243582811681036102385791604435916064358281168103610238579160843590811681036102385790565b6080906003190112610238576001600160a01b0360043581811681036102385791602435828116810361023857916044359081168103610238579060643590565b67ffffffffffffffff811161107157604052565b634e487b7160e01b5f52604160045260245ffd5b6080810190811067ffffffffffffffff82111761107157604052565b90601f8019910116810190811067ffffffffffffffff82111761107157604052565b818102929181159184041417156110d657565b634e487b7160e01b5f52601160045260245ffd5b81156110f4570490565b634e487b7160e01b5f52601260045260245ffd5b919082039182116110d657565b919082018092116110d657565b6001600160a01b0391838316156102ac576020936111409183611219565b9391949092600460405180948193632383120160e11b8352165afa80156111d95785915f916111a3575b5061119a9261118e60646111866111a0989795611194956110c3565b048098611108565b90611115565b906110ea565b90611108565b91565b91506020823d82116111d1575b816111bd602093836110a1565b810103126101d6575051849061119a61116a565b3d91506111b0565b6040513d5f823e3d90fd5b9081602091031261023857516001600160a01b03811681036102385790565b9190826040910312610238576020825192015190565b6040805163e6a4390560e01b81526001600160a01b03948516600482015292841660248401526020939092909184908290604490829086165afa90811561133b575f9161131e575b501692815191630240bc6b60e21b83528083600481885afa938415611314575f9384956112ec575b50806004939496835194858092637464fc3d60e01b82525afa9182156112e357505f916112b7575b50905090565b82813d83116112dc575b6112cb81836110a1565b810103126101d6575051805f6112b1565b503d6112c1565b513d5f823e3d90fd5b819550600493945061130a90833d8511610706576106f481836110a1565b9590949350611289565b50513d5f823e3d90fd5b6113359150843d86116102a55761029781836110a1565b5f611261565b83513d5f823e3d90fd5b926001600160a01b039290838216156102ac5761119a61119461136e6113789460209689611219565b9291949094611115565b9260046040518094819363158a652b60e11b8352165afa80156111d95782915f916113b6575b506113ae6111a0926064926110c3565b048092611108565b91506020823d82116113e4575b816113d0602093836110a1565b810103126101d657505181906113ae61139e565b3d91506113c3565b90816020910312610238575180151581036102385790565b60408051908101916001600160a01b031667ffffffffffffffff83118284101761107157611473926040525f806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161146d6114fb565b9161153a565b8051908282159283156114e3575b5050501561148c5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6114f393508201810191016113ec565b5f8281611481565b3d15611535573d9067ffffffffffffffff8211611071576040519161152a601f8201601f1916602001846110a1565b82523d5f602084013e565b606090565b9192901561159c575081511561154e575090565b3b156115575790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156115af5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401525f935b8285106115f3575050604492505f838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506115d1565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff8411176110715761166592604052611404565b56fea2646970667358221220cb493f5deaaadc60ed0383997b2ed080269ca37e4d179c6183fdc4b1c648283c64736f6c63430008140033",
  "deployedBytecode": "0x608080604052307f0000000000000000000000000000000000000000000000000000000000000000146004361015610035575f80fd5b5f91823560e01c9081630afbf7f314610e04575080633e834e241461091e5780637521b25c14610907578063a6b89187146108e4578063c682df77146102be5763e743240d14610083575f80fd5b6101d65760603660031901126101d65761009b610f8c565b6100a3610fa2565b6100ab610fb8565b916001600160a01b0390818416156102ac5760405163e6a4390560e01b81526001600160a01b03948516600482015292909316602483015283926020929083908290604490829086165afa9081156101fc57849161027f575b501660405163c66f245560e01b81528281600481855afa9081156101fc57849161024e575b506040516316d3df1560e31b81528381600481865afa93841561024357859461020c575b5050813b1561020757604051635c921eb960e01b81523060048201526024810191909152838160448183865af19081156101fc5784916101e8575b5050803b156101e4576040516302ccb1b360e41b8152306004820152602481019290925282908290604490829084905af180156101d9576101c65750f35b6101cf9061105d565b6101d65780f35b80fd5b6040513d84823e3d90fd5b5050fd5b6101f19061105d565b6101e457825f610188565b6040513d86823e3d90fd5b505050fd5b819550809294503d831161023c575b61022581836110a1565b8101031261023857839251915f8061014d565b5f80fd5b503d61021b565b6040513d87823e3d90fd5b809450838092503d8311610278575b61026781836110a1565b81010312610238578392515f610129565b503d61025d565b61029f9150833d85116102a5575b61029781836110a1565b8101906111e4565b5f610104565b503d61028d565b604051639bb8530d60e01b8152600490fd5b506101d6576102cc36610fce565b909491939290916001600160a01b038616156102ac576001600160a01b038316156108d25784156108c05760405163e6a4390560e01b81526001600160a01b0380881660048301528316602482015295602087806044810103816001600160a01b0389165afa9687156101d957829761089f575b5061034d86828588611345565b9095909390610367888a886001600160a01b03871661160c565b6001600160a01b0389163b156107f057604051635c921eb960e01b81526001600160a01b03871660048201526024810188905284818b8183816044810103926001600160a01b03165af180156102435790859161088b575b50506040516355ce97dd60e11b81525f92906020816004816001600160a01b0387165afa9081156101fc578491610858575b5090602060646104036004948a6110c3565b6040516361d027b360e01b8152919004949093849182906001600160a01b03165afa9182156101fc578492610837575b5061043e8388611108565b604051634d86030360e01b81526001600160a01b038716600482015290939092602084602481305afa93841561082c57869461080b575b506001600160a01b038d163b1561080757604051635c921eb960e01b81526001600160a01b039091166004820152602481019190915284818d8183816044810103926001600160a01b03165af18015610243576107f4575b506001600160a01b038b163b156107f057604051635c921eb960e01b81523060048201526024810184905284818d8183816044810103926001600160a01b03165af18015610243579085916107dc575b505060405163095ea7b360e01b602082018181526001600160a01b038581166024850152604484018790529193909116908690819061056985606481015b03601f1981018752866110a1565b84519082855af16105786114fb565b816107ad575b50806107a3575b1561075f575b5050506001600160a01b031690813b1561075b57829160248392604051948593849263211e242d60e11b845260048401525af180156101d957610747575b5050604051635673b02d60e01b815260048101879052602481018390526044810183905260648101869052602081608481866001600160a01b038d165af1801561073c579760409160049961070d575b508151630240bc6b60e21b815298899182906001600160a01b03165afa9081156101d95760409783926106b4575b508751878152602081018790526040810194909452606084019290925260808301524260a08301526001600160a01b039081169216907f594898f0701a8fbcf3e869135bc2a2d8194e98a46765b1f6ef41138fe049ebb8908060c081015b0390a382519182526020820152f35b7f594898f0701a8fbcf3e869135bc2a2d8194e98a46765b1f6ef41138fe049ebb893506106a59492506106fc90893d8b11610706575b6106f481836110a1565b810190611203565b9294909350610647565b503d6106ea565b61072e9060203d602011610735575b61072681836110a1565b8101906113ec565b505f610619565b503d61071c565b6040513d85823e3d90fd5b610751829161105d565b6101d657806105c9565b8280fd5b61079661079b9360405190602082015260018060a01b03861660248201528760448201526044815261079081611085565b82611404565b611404565b5f808061058b565b50803b1515610585565b80518015925082156107c2575b50505f61057e565b6107d592506020809183010191016113ec565b5f806107ba565b6107e59061105d565b6107f057835f61051d565b8380fd5b6108009094919461105d565b925f6104cd565b8580fd5b61082591945060203d6020116102a55761029781836110a1565b925f610475565b6040513d88823e3d90fd5b61085191925060203d6020116102a55761029781836110a1565b905f610433565b90506020813d602011610883575b81610873602093836110a1565b810103126107f0575160206103f1565b3d9150610866565b6108949061105d565b6107f057835f6103bf565b6108b991975060203d6020116102a55761029781836110a1565b955f610340565b604051632f44ea3760e01b8152600490fd5b6040516311d000e160e31b8152600490fd5b60406108fb6108f23661101c565b92919091611345565b82519182526020820152f35b60406108fb6109153661101c565b92919091611122565b506101d65761092c36610fce565b919392906001600160a01b038116156102ac576001600160a01b038316156108d25784156108c05760405163e6a4390560e01b81526001600160a01b03828116600483015283811660248301528516948793916020816044818a5afa9081156102435784848a928894610de1575b506109a59394611122565b9490966109b2868a611108565b936109c885858a6001600160a01b03851661160c565b6040516355ce97dd60e11b815290602082600481865afa9182156101fc578492610dac575b50602060646109fe6004948b6110c3565b0493604051938480926361d027b360e01b82525afa9182156101fc578492610d8b575b50610a2c8389611108565b604051634d86030360e01b81526001600160a01b038916600482015290939092602084602481305afa93841561082c578694610d64575b50610a7991908b6001600160a01b03851661160c565b610a8e83308b6001600160a01b03851661160c565b60405163095ea7b360e01b602082018181526001600160a01b03851660248401526044830186905290929086908190610aca856064810161055b565b845190826001600160a01b0386165af1610ae26114fb565b81610d35575b5080610d22575b15610ccc575b5050506001600160a01b0316803b1561075b5760248392604051948593849263211e242d60e11b845260048401525af18015610c9b57610cbd575b506001600160a01b0316803b15610cb9576040516302ccb1b360e41b81526001600160a01b038616600482015260248101879052888160448183865af18015610c9b57610ca6575b5060405190635673b02d60e01b82528860048301528660248301528260448301528860648301526020826084818c855af1908115610c9b57600492604092610c7c575b508151630240bc6b60e21b815292839182905afa908115610c7157917f30df0cd28c6e48e6fe24bcab9f36b5052aef24c98ba64b6ef2ba66b659e9a29e9391899360409a9491610c4c575b50895188815260208101929092526040820195909552606081019290925260808201939093524260a08201526001600160a01b0392831693909216918060c081016106a5565b6106a5929450610c6991508a3d8c11610706576106f481836110a1565b909391610c06565b6040513d8a823e3d90fd5b610c949060203d6020116107355761072681836110a1565b505f610bbb565b6040513d8b823e3d90fd5b610cb29098919861105d565b965f610b78565b8780fd5b610cc69061105d565b5f610b30565b610d0c610d1a9360405190602082015260018060a01b038616602482015287604482015260448152610cfd81611085565b6001600160a01b038316611404565b6001600160a01b0316611404565b5f8080610af5565b506001600160a01b0381163b1515610aef565b8051801592508215610d4a575b50505f610ae8565b610d5d92506020809183010191016113ec565b5f80610d42565b610a7992919450610d839060203d6020116102a55761029781836110a1565b939091610a63565b610da591925060203d6020116102a55761029781836110a1565b905f610a21565b91506020823d602011610dd9575b81610dc7602093836110a1565b810103126107f05790519060206109ed565b3d9150610dba565b6109a59450610dfe9060203d6020116102a55761029781836110a1565b9361099a565b919050610f885760a0366003190112610f8857610e1f610f8c565b90610e28610fa2565b610e30610fb8565b60643593608435936001600160a01b038084169390918415610f79575060405163e6a4390560e01b81526001600160a01b03918216600482015294166024850152602093879290919085908390604490829085165afa91821561073c5785926044918591610f5c575b5060405163a9059cbb60e01b858201526001600160a01b038216602482015260448082018b90528152610ed790610ed16064826110a1565b87611404565b6040519485938492630d9778e560e11b84528b60048501528a6024850152165af1801561082c5760409650610f3f575b507ffceec8344ad03a63e2303215f42c4071fadc71c9ae6a9fedb959dc03a3ce9fce8580518681528585820152a28351928352820152f35b610f5590833d85116107355761072681836110a1565b505f610f07565b610f739150843d86116102a55761029781836110a1565b5f610e99565b639bb8530d60e01b8152600490fd5b5080fd5b600435906001600160a01b038216820361023857565b602435906001600160a01b038216820361023857565b604435906001600160a01b038216820361023857565b60a0906003190112610238576001600160a01b036004358181168103610238579160243582811681036102385791604435916064358281168103610238579160843590811681036102385790565b6080906003190112610238576001600160a01b0360043581811681036102385791602435828116810361023857916044359081168103610238579060643590565b67ffffffffffffffff811161107157604052565b634e487b7160e01b5f52604160045260245ffd5b6080810190811067ffffffffffffffff82111761107157604052565b90601f8019910116810190811067ffffffffffffffff82111761107157604052565b818102929181159184041417156110d657565b634e487b7160e01b5f52601160045260245ffd5b81156110f4570490565b634e487b7160e01b5f52601260045260245ffd5b919082039182116110d657565b919082018092116110d657565b6001600160a01b0391838316156102ac576020936111409183611219565b9391949092600460405180948193632383120160e11b8352165afa80156111d95785915f916111a3575b5061119a9261118e60646111866111a0989795611194956110c3565b048098611108565b90611115565b906110ea565b90611108565b91565b91506020823d82116111d1575b816111bd602093836110a1565b810103126101d6575051849061119a61116a565b3d91506111b0565b6040513d5f823e3d90fd5b9081602091031261023857516001600160a01b03811681036102385790565b9190826040910312610238576020825192015190565b6040805163e6a4390560e01b81526001600160a01b03948516600482015292841660248401526020939092909184908290604490829086165afa90811561133b575f9161131e575b501692815191630240bc6b60e21b83528083600481885afa938415611314575f9384956112ec575b50806004939496835194858092637464fc3d60e01b82525afa9182156112e357505f916112b7575b50905090565b82813d83116112dc575b6112cb81836110a1565b810103126101d6575051805f6112b1565b503d6112c1565b513d5f823e3d90fd5b819550600493945061130a90833d8511610706576106f481836110a1565b9590949350611289565b50513d5f823e3d90fd5b6113359150843d86116102a55761029781836110a1565b5f611261565b83513d5f823e3d90fd5b926001600160a01b039290838216156102ac5761119a61119461136e6113789460209689611219565b9291949094611115565b9260046040518094819363158a652b60e11b8352165afa80156111d95782915f916113b6575b506113ae6111a0926064926110c3565b048092611108565b91506020823d82116113e4575b816113d0602093836110a1565b810103126101d657505181906113ae61139e565b3d91506113c3565b90816020910312610238575180151581036102385790565b60408051908101916001600160a01b031667ffffffffffffffff83118284101761107157611473926040525f806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161146d6114fb565b9161153a565b8051908282159283156114e3575b5050501561148c5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6114f393508201810191016113ec565b5f8281611481565b3d15611535573d9067ffffffffffffffff8211611071576040519161152a601f8201601f1916602001846110a1565b82523d5f602084013e565b606090565b9192901561159c575081511561154e575090565b3b156115575790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156115af5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401525f935b8285106115f3575050604492505f838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506115d1565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff8411176110715761166592604052611404565b56fea2646970667358221220cb493f5deaaadc60ed0383997b2ed080269ca37e4d179c6183fdc4b1c648283c64736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}