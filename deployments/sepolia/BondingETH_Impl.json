{
  "address": "0xeEEdAd0A699f5f565E9a68A5769fF4168aE29936",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyTrading",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InputArrayMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAssetPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegatee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLocker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMarketCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOracle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReserves",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidityTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketCapTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTrading",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWETHMode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongBoostStage",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAssetToken",
          "type": "address"
        }
      ],
      "name": "AssetTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stage",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "BoostStageThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stage",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "name": "Boosted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "DelegateLPTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newExtRouter",
          "type": "address"
        }
      ],
      "name": "ExtRouterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        }
      ],
      "name": "FactorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "FeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMarketCap",
          "type": "uint256"
        }
      ],
      "name": "GradMarketCapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "Graduated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMarketCap",
          "type": "uint256"
        }
      ],
      "name": "InitialMarketCapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        }
      ],
      "name": "InitializeSupplySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Launched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLockFactory",
          "type": "address"
        }
      ],
      "name": "LockFactorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLockedTime",
          "type": "uint256"
        }
      ],
      "name": "LockedTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "RouterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTokenFactory",
          "type": "address"
        }
      ],
      "name": "TokenFactorySet",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BOOSTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ticker",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "cores",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "img",
          "type": "string"
        },
        {
          "internalType": "string[4]",
          "name": "urls",
          "type": "string[4]"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "boost1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ticker",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "cores",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "img",
          "type": "string"
        },
        {
          "internalType": "string[4]",
          "name": "urls",
          "type": "string[4]"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "boost1For",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "boost2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "boost3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "boostInfo",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "stage",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boostInfos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "boostStageThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "buyWithETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "calculateMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegateLPTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "delegatees",
          "type": "address[]"
        }
      ],
      "name": "delegateLPToBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extRouter",
      "outputs": [
        {
          "internalType": "contract IExtRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract INTFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBoostCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBoostInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "stage",
              "type": "uint8"
            }
          ],
          "internalType": "struct Bonding.BoostInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenLocker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gradMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "hasGraduated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeTo_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "extRouter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenFactory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lockFactory_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockedTime_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "oracle_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialMarketCap_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gradMarketCap_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isBoostToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ticker",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "cores",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "img",
          "type": "string"
        },
        {
          "internalType": "string[4]",
          "name": "urls",
          "type": "string[4]"
        },
        {
          "internalType": "uint256",
          "name": "payAmount",
          "type": "uint256"
        }
      ],
      "name": "launch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ticker",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "cores",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "img",
          "type": "string"
        },
        {
          "internalType": "string[4]",
          "name": "urls",
          "type": "string[4]"
        },
        {
          "internalType": "uint256",
          "name": "payAmount",
          "type": "uint256"
        }
      ],
      "name": "launchFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ticker",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "cores",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "img",
          "type": "string"
        },
        {
          "internalType": "string[4]",
          "name": "urls",
          "type": "string[4]"
        }
      ],
      "name": "launchForWithETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ticker",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "cores",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "img",
          "type": "string"
        },
        {
          "internalType": "string[4]",
          "name": "urls",
          "type": "string[4]"
        }
      ],
      "name": "launchWithETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockFactory",
      "outputs": [
        {
          "internalType": "contract LockFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "sellForETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAssetToken",
          "type": "address"
        }
      ],
      "name": "setAssetToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "stage",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setBoostStageThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "setBoostStageThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newExtRouter",
          "type": "address"
        }
      ],
      "name": "setExtRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMarketCap",
          "type": "uint256"
        }
      ],
      "name": "setGradMarketCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMarketCap",
          "type": "uint256"
        }
      ],
      "name": "setInitialMarketCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        }
      ],
      "name": "setInitialSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLockFactory",
          "type": "address"
        }
      ],
      "name": "setLockFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLockedTime",
          "type": "uint256"
        }
      ],
      "name": "setLockedTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTokenFactory",
          "type": "address"
        }
      ],
      "name": "setTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "internalType": "contract INTERC20Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "twitter",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "telegram",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "farcaster",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "internalType": "enum Bonding.TokenStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenInfos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x15864d2dde853b474dd4ccc522a41741fcf7c5782086bd48813ede98fecd6404",
  "receipt": {
    "to": null,
    "from": "0x6b29b8af9AF126170513AE6524395E09025b214E",
    "contractAddress": "0xeEEdAd0A699f5f565E9a68A5769fF4168aE29936",
    "transactionIndex": 47,
    "gasUsed": "5075530",
    "logsBloom": "0x
    "blockHash": "0x0928f5eaab8a43f65917c646863ec963d553077586628ddb1159042a2b37d508",
    "transactionHash": "0x15864d2dde853b474dd4ccc522a41741fcf7c5782086bd48813ede98fecd6404",
    "logs": [
      {
        "transactionIndex": 47,
        "blockNumber": 7734229,
        "transactionHash": "0x15864d2dde853b474dd4ccc522a41741fcf7c5782086bd48813ede98fecd6404",
        "address": "0xeEEdAd0A699f5f565E9a68A5769fF4168aE29936",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 74,
        "blockHash": "0x0928f5eaab8a43f65917c646863ec963d553077586628ddb1159042a2b37d508"
      }
    ],
    "blockNumber": 7734229,
    "cumulativeGasUsed": "7887341",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x62fB5AaDdc4bd26C6DC50fa5dE679CAa6fa8B44b"
  ],
  "numDeployments": 1,
  "solcInputHash": "965fc97b803bac1204dfa7bf0143a3f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyTrading\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputArrayMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAssetPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegatee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLocker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMarketCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReserves\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketCapTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTrading\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWETHMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongBoostStage\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAssetToken\",\"type\":\"address\"}],\"name\":\"AssetTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"BoostStageThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"Boosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"DelegateLPTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newExtRouter\",\"type\":\"address\"}],\"name\":\"ExtRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"FactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketCap\",\"type\":\"uint256\"}],\"name\":\"GradMarketCapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"Graduated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketCap\",\"type\":\"uint256\"}],\"name\":\"InitialMarketCapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"InitializeSupplySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLockFactory\",\"type\":\"address\"}],\"name\":\"LockFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockedTime\",\"type\":\"uint256\"}],\"name\":\"LockedTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"RouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTokenFactory\",\"type\":\"address\"}],\"name\":\"TokenFactorySet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BOOSTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"cores\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"img\",\"type\":\"string\"},{\"internalType\":\"string[4]\",\"name\":\"urls\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"boost1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"cores\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"img\",\"type\":\"string\"},{\"internalType\":\"string[4]\",\"name\":\"urls\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"boost1For\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"boost2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"boost3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boostInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"boostStageThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"buyWithETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calculateMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegateLPTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"delegatees\",\"type\":\"address[]\"}],\"name\":\"delegateLPToBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extRouter\",\"outputs\":[{\"internalType\":\"contract IExtRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract INTFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoostCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBoostInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"}],\"internalType\":\"struct Bonding.BoostInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gradMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"hasGraduated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTo_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"extRouter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFactory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockFactory_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedTime_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMarketCap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gradMarketCap_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isBoostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ticker\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"cores\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"img\",\"type\":\"string\"},{\"internalType\":\"string[4]\",\"name\":\"urls\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ticker\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"cores\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"img\",\"type\":\"string\"},{\"internalType\":\"string[4]\",\"name\":\"urls\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"}],\"name\":\"launchFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ticker\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"cores\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"img\",\"type\":\"string\"},{\"internalType\":\"string[4]\",\"name\":\"urls\",\"type\":\"string[4]\"}],\"name\":\"launchForWithETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ticker\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"cores\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"img\",\"type\":\"string\"},{\"internalType\":\"string[4]\",\"name\":\"urls\",\"type\":\"string[4]\"}],\"name\":\"launchWithETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFactory\",\"outputs\":[{\"internalType\":\"contract LockFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"sellForETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAssetToken\",\"type\":\"address\"}],\"name\":\"setAssetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setBoostStageThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setBoostStageThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newExtRouter\",\"type\":\"address\"}],\"name\":\"setExtRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketCap\",\"type\":\"uint256\"}],\"name\":\"setGradMarketCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketCap\",\"type\":\"uint256\"}],\"name\":\"setInitialMarketCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setInitialSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLockFactory\",\"type\":\"address\"}],\"name\":\"setLockFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockedTime\",\"type\":\"uint256\"}],\"name\":\"setLockedTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenFactory\",\"type\":\"address\"}],\"name\":\"setTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"contract INTERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"farcaster\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"enum Bonding.TokenStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"boost1(string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Only callable by owner. Adds liquidity via external router\",\"params\":{\"assetAmount\":\"Amount of asset tokens to add as liquidity\",\"assetAmountMin\":\"Minimum amount of asset tokens that must be added as liquidity\",\"cores\":\"Array of core values\",\"deadline\":\"Timestamp after which the transaction will revert\",\"desc\":\"Description of the token\",\"img\":\"Image URL for the token\",\"minLiquidity\":\"Minimum amount of liquidity tokens that must be minted\",\"name\":\"The name of the token\",\"ticker\":\"The ticker symbol of the token\",\"tokenAmount\":\"Amount of tokens to add as liquidity\",\"tokenAmountMin\":\"Minimum amount of tokens that must be added as liquidity\",\"urls\":\"Array of 4 URLs (twitter, telegram, farcaster, website)\"}},\"boost1For(address,string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Only callable by owner. Adds liquidity via external router\",\"params\":{\"assetAmount\":\"Amount of asset tokens to add as liquidity\",\"assetAmountMin\":\"Minimum amount of asset tokens that must be added as liquidity\",\"cores\":\"Array of core values\",\"creator\":\"The creator of the token\",\"deadline\":\"Timestamp after which the transaction will revert\",\"desc\":\"Description of the token\",\"img\":\"Image URL for the token\",\"minLiquidity\":\"Minimum amount of liquidity tokens that must be minted\",\"name\":\"The name of the token\",\"ticker\":\"The ticker symbol of the token\",\"tokenAmount\":\"Amount of tokens to add as liquidity\",\"tokenAmountMin\":\"Minimum amount of tokens that must be added as liquidity\",\"urls\":\"Array of 4 URLs (twitter, telegram, farcaster, website)\"}},\"boost2(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Only callable by booster. Adds liquidity via external router\",\"params\":{\"assetAmount\":\"Amount of asset tokens to add as liquidity\",\"assetAmountMin\":\"Minimum amount of asset tokens that must be added as liquidity\",\"deadline\":\"Timestamp after which the transaction will revert\",\"minLiquidity\":\"Minimum amount of liquidity tokens that must be minted\",\"token\":\"Address of token to boost\",\"tokenAmount\":\"Amount of tokens to add as liquidity\",\"tokenAmountMin\":\"Minimum amount of tokens that must be added as liquidity\"}},\"boost3(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Only callable by owner. Adds liquidity via external router\",\"params\":{\"assetAmount\":\"Amount of asset tokens to add as liquidity\",\"assetAmountMin\":\"Minimum amount of asset tokens that must be added as liquidity\",\"deadline\":\"Timestamp after which the transaction will revert\",\"minLiquidity\":\"Minimum amount of liquidity tokens that must be minted\",\"token\":\"Address of token to boost\",\"tokenAmount\":\"Amount of tokens to add as liquidity\",\"tokenAmountMin\":\"Minimum amount of tokens that must be added as liquidity\"}},\"calculateMarketCap(address)\":{\"params\":{\"token\":\"The token address to calculate market cap for\"},\"returns\":{\"_0\":\"marketCap The calculated market cap in asset token value in 18 decimals\"}},\"delegateLPTo(address,address)\":{\"details\":\"Delegate LP token to the specified address.\",\"params\":{\"delegatee\":\"The address to delegate the LP token to.\",\"tokenAddr\":\"The address of the token to delegate its LP token.\"}},\"delegateLPToBatch(address[],address[])\":{\"details\":\"Delegate LP token to the specified address for multiple tokens.\",\"params\":{\"delegatees\":\"The addresses to delegate the LP tokens to.\",\"tokens\":\"The addresses of the tokens to delegate their LP tokens.\"}},\"getBoostCount()\":{\"returns\":{\"_0\":\"The length of boostInfos array\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenCount()\":{\"returns\":{\"_0\":\"The length of tokenInfos array\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAssetToken(address)\":{\"details\":\"Set the asset token address\",\"params\":{\"newAssetToken\":\"The new asset token address\"}},\"setBoostStageThreshold(uint8,uint256)\":{\"params\":{\"stage\":\"The boost stage number (1-3)\",\"threshold\":\"The threshold amount required for this stage\"}},\"setBoostStageThresholds(uint256[])\":{\"params\":{\"thresholds\":\"Array of threshold amounts for stages 1-3\"}},\"setExtRouter(address)\":{\"details\":\"Set the external router address\",\"params\":{\"newExtRouter\":\"The new external router address\"}},\"setFactory(address)\":{\"details\":\"Set the factory address\",\"params\":{\"newFactory\":\"The new factory address\"}},\"setFee(uint256,address)\":{\"details\":\"Set the fee and fee recipient\",\"params\":{\"newFee\":\"New fee amount\",\"newFeeTo\":\"New fee recipient\"}},\"setGradMarketCap(uint256)\":{\"details\":\"Set the graduation market cap threshold\",\"params\":{\"newMarketCap\":\"The new graduation market cap threshold\"}},\"setInitialMarketCap(uint256)\":{\"details\":\"Set the initial market cap threshold\",\"params\":{\"newMarketCap\":\"The new initial market cap threshold\"}},\"setInitialSupply(uint256)\":{\"details\":\"Set the initial supply for generating a new token\",\"params\":{\"newSupply\":\"New initial supply\"}},\"setLockFactory(address)\":{\"details\":\"Set the lock factory address\",\"params\":{\"newLockFactory\":\"The new lock factory address\"}},\"setLockedTime(uint256)\":{\"details\":\"Set the locked time for lp tokens that locked in the locker contract\",\"params\":{\"newLockedTime\":\"The new locked time\"}},\"setOracle(address)\":{\"details\":\"Set the oracle address\",\"params\":{\"newOracle\":\"The new oracle address\"}},\"setTokenFactory(address)\":{\"details\":\"Set the token factory address\",\"params\":{\"newTokenFactory\":\"The new token factory address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ProfileNotExist()\":[{\"notice\":\"============================================ =                  ERRORS                  = ============================================\"}]},\"events\":{\"Launched(address,address,uint256,uint8,uint256)\":{\"notice\":\"============================================ =                 EVENTS                   = ============================================\"}},\"kind\":\"user\",\"methods\":{\"boost1(string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Boost liquidity for a token by adding token and asset pairs\"},\"boost1For(address,string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Boost liquidity for a token by adding token and asset pairs\"},\"boost2(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Boost Stage 2 for a token by adding token and asset pairs\"},\"boost3(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Boost Stage 3 for a token by adding token and asset pairs\"},\"calculateMarketCap(address)\":{\"notice\":\"Calculate the market cap of a token using oracle price and liquidity reserves\"},\"delegateLPTo(address,address)\":{\"notice\":\"LP token should have been released in its locker contract.\"},\"delegateLPToBatch(address[],address[])\":{\"notice\":\"LP token should have been released in its locker contract.\"},\"getBoostCount()\":{\"notice\":\"Get the total number of boost created through bonding\"},\"getTokenCount()\":{\"notice\":\"Get the total number of tokens created through bonding\"},\"setAssetToken(address)\":{\"notice\":\"Owner should ensure the asset token address is correct\"},\"setBoostStageThreshold(uint8,uint256)\":{\"notice\":\"Set threshold for a boost stage\"},\"setBoostStageThresholds(uint256[])\":{\"notice\":\"Set thresholds for all boost stages in one transaction\"},\"setExtRouter(address)\":{\"notice\":\"Owner should ensure the external router address is correct\"},\"setFactory(address)\":{\"notice\":\"Owner should ensure the factory address is correct\"},\"setLockFactory(address)\":{\"notice\":\"Owner should ensure the lock factory address is correct\"},\"setTokenFactory(address)\":{\"notice\":\"Owner should ensure the token factory address is correct\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BondingETH.sol\":\"BondingETH\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x36c00327e3f9afd929cc2721aaa111ab57eff78a630cc364b279ad576b899295\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"src/Bonding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified from https://github.com/sourlodine/Pump.fun-Smart-Contract/blob/main/contracts/PumpFun.sol\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./INTFactory.sol\\\";\\nimport \\\"./libraries/INTRouterLibrary.sol\\\";\\nimport \\\"./INTERC20.sol\\\";\\nimport \\\"./Lock.sol\\\";\\nimport \\\"./INTERC20Factory.sol\\\";\\nimport \\\"./LockFactory.sol\\\";\\n\\nimport \\\"./interfaces/IINTPair.sol\\\";\\nimport \\\"./interfaces/IExtRouter.sol\\\";\\nimport \\\"./interfaces/IExtPairFactory.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\ncontract Bonding is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    Ownable2StepUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    // Act as treasury\\n    address public feeTo;\\n\\n    INTFactory public factory;\\n    INTERC20Factory public tokenFactory;\\n    LockFactory public lockFactory;\\n    uint256 public initialSupply;\\n    uint256 public fee;\\n    IExtRouter public extRouter;\\n    address public assetToken;\\n\\n    enum TokenStatus {\\n        None,\\n        BondingCurve,\\n        Graduated\\n    }\\n\\n    struct Token {\\n        address creator;\\n        address token;\\n        address pair; // Bonding: internal pair, Graduated: external pair\\n        address locker;\\n        string description;\\n        uint8[] cores;\\n        string image;\\n        string twitter;\\n        string telegram;\\n        string farcaster;\\n        string website;\\n        TokenStatus status;\\n    }\\n\\n    mapping(address => Token) public tokenInfo;\\n    address[] public tokenInfos;\\n\\n    struct BoostInfo {\\n        uint8 stage;\\n    }\\n\\n    // Separate mapping for boost information\\n    mapping(address => BoostInfo) public boostInfo;\\n    address[] public boostInfos;\\n\\n    bytes32 public constant BOOSTER_ROLE = keccak256(\\\"BOOSTER_ROLE\\\");\\n\\n    // Mapping to store boost stage thresholds\\n    mapping(uint8 => uint256) public boostStageThresholds;\\n\\n    // The locked times for lp tokens that locked in the locker contract\\n    uint256 public lockedTime;\\n\\n    IOracle public oracle;\\n\\n    uint256 public initialMarketCap;\\n    uint256 public gradMarketCap;\\n\\n    /**\\n     * ============================================\\n     * =                 EVENTS                   =\\n     * ============================================\\n     */\\n    event Launched(\\n        address indexed token,\\n        address indexed pair,\\n        uint256 totalTokens,\\n        uint8 tokenType,\\n        uint256 timestamp\\n    );\\n    event Graduated(address indexed token, address indexed lp);\\n    event DelegateLPTo(address indexed token, address indexed delegatee);\\n    event Boosted(\\n        address indexed token,\\n        uint8 stage,\\n        uint256 amount,\\n        uint256 assetAmount\\n    );\\n\\n    event BoostStageThresholdUpdated(uint8 stage, uint256 threshold);\\n    event InitializeSupplySet(uint256 newSupply);\\n    event FeeSet(uint256 newFee, address newFeeTo);\\n    event OracleSet(address newOracle);\\n    event InitialMarketCapSet(uint256 newMarketCap);\\n    event GradMarketCapSet(uint256 newMarketCap);\\n    event LockedTimeSet(uint256 newLockedTime);\\n    event FactorySet(address newFactory);\\n    event RouterSet(address newRouter);\\n    event TokenFactorySet(address newTokenFactory);\\n    event LockFactorySet(address newLockFactory);\\n    event ExtRouterSet(address newExtRouter);\\n    event AssetTokenSet(address newAssetToken);\\n\\n    /**\\n     * ============================================\\n     * =                  ERRORS                  =\\n     * ============================================\\n     */\\n\\n    error ProfileNotExist();\\n    error InvalidToken();\\n    error NotTrading();\\n    error AlreadyTrading();\\n    error InsufficientAmount();\\n    error InvalidDelegatee();\\n    error InvalidLocker();\\n    error InputArrayMismatch();\\n    error InvalidLockTime();\\n    error InvalidRate();\\n    error InvalidStage();\\n    error InvalidThreshold();\\n    error InvalidReserves();\\n    error InvalidAssetPrice();\\n    error InvalidOracle();\\n    error InvalidMarketCap();\\n    error WrongBoostStage();\\n    error LiquidityTooLow();\\n    error MarketCapTooLow();\\n\\n    /**\\n     * ============================================\\n     * =                FUNCTIONS                 =\\n     * ============================================\\n     */\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address assetToken_,\\n        address factory_,\\n        address feeTo_,\\n        uint256 fee_,\\n        uint256 initialSupply_,\\n        address extRouter_,\\n        address tokenFactory_,\\n        address lockFactory_,\\n        uint256 lockedTime_,\\n        address oracle_,\\n        uint256 initialMarketCap_,\\n        uint256 gradMarketCap_\\n    ) public virtual initializer {\\n        __Ownable2Step_init();\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n\\n        assetToken = assetToken_;\\n\\n        factory = INTFactory(factory_);\\n        tokenFactory = INTERC20Factory(tokenFactory_);\\n        lockFactory = LockFactory(lockFactory_);\\n\\n        feeTo = feeTo_;\\n        fee = fee_;\\n\\n        initialSupply = initialSupply_;\\n\\n        extRouter = IExtRouter(extRouter_);\\n\\n        lockedTime = lockedTime_;\\n        oracle = IOracle(oracle_);\\n\\n        initialMarketCap = initialMarketCap_;\\n        gradMarketCap = gradMarketCap_;\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer ownership along with the DEFAULT_ADMIN_ROLE\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        super._transferOwnership(newOwner);\\n        _grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n    }\\n\\n    /**\\n     * @dev Set the initial supply for generating a new token\\n     * @param newSupply New initial supply\\n     */\\n    function setInitialSupply(uint256 newSupply) public onlyOwner {\\n        initialSupply = newSupply;\\n\\n        emit InitializeSupplySet(newSupply);\\n    }\\n\\n    /**\\n     * @dev Set the fee and fee recipient\\n     * @param newFee New fee amount\\n     * @param newFeeTo New fee recipient\\n     */\\n    function setFee(uint256 newFee, address newFeeTo) public onlyOwner {\\n        fee = newFee;\\n        feeTo = newFeeTo;\\n\\n        emit FeeSet(newFee, newFeeTo);\\n    }\\n\\n    /**\\n     * @dev Set the oracle address\\n     * @param newOracle The new oracle address\\n     */\\n    function setOracle(address newOracle) public onlyOwner {\\n        if (IOracle(newOracle).getUnderlyingPrice(assetToken) == 0)\\n            revert InvalidOracle();\\n\\n        oracle = IOracle(newOracle);\\n\\n        emit OracleSet(newOracle);\\n    }\\n\\n    /**\\n     * @dev Set the initial market cap threshold\\n     * @param newMarketCap The new initial market cap threshold\\n     */\\n    function setInitialMarketCap(uint256 newMarketCap) public onlyOwner {\\n        if (newMarketCap == 0) revert InvalidMarketCap();\\n\\n        initialMarketCap = newMarketCap;\\n\\n        emit InitialMarketCapSet(newMarketCap);\\n    }\\n\\n    /**\\n     * @dev Set the graduation market cap threshold\\n     * @param newMarketCap The new graduation market cap threshold\\n     */\\n    function setGradMarketCap(uint256 newMarketCap) public onlyOwner {\\n        if (newMarketCap < initialMarketCap) revert InvalidMarketCap();\\n\\n        gradMarketCap = newMarketCap;\\n\\n        emit GradMarketCapSet(newMarketCap);\\n    }\\n\\n    /**\\n     * @dev Set the locked time for lp tokens that locked in the locker contract\\n     * @param newLockedTime The new locked time\\n     */\\n    function setLockedTime(uint256 newLockedTime) public onlyOwner {\\n        if (newLockedTime <= 365 days) revert InvalidLockTime();\\n        lockedTime = newLockedTime;\\n\\n        emit LockedTimeSet(newLockedTime);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the factory address is correct\\n     * @dev Set the factory address\\n     * @param newFactory The new factory address\\n     */\\n    function setFactory(address newFactory) public onlyOwner {\\n        factory = INTFactory(newFactory);\\n\\n        emit FactorySet(newFactory);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the token factory address is correct\\n     * @dev Set the token factory address\\n     * @param newTokenFactory The new token factory address\\n     */\\n    function setTokenFactory(address newTokenFactory) public onlyOwner {\\n        tokenFactory = INTERC20Factory(newTokenFactory);\\n\\n        emit TokenFactorySet(newTokenFactory);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the lock factory address is correct\\n     * @dev Set the lock factory address\\n     * @param newLockFactory The new lock factory address\\n     */\\n    function setLockFactory(address newLockFactory) public onlyOwner {\\n        lockFactory = LockFactory(newLockFactory);\\n\\n        emit LockFactorySet(newLockFactory);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the external router address is correct\\n     * @dev Set the external router address\\n     * @param newExtRouter The new external router address\\n     */\\n    function setExtRouter(address newExtRouter) public onlyOwner {\\n        extRouter = IExtRouter(newExtRouter);\\n\\n        emit ExtRouterSet(newExtRouter);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the asset token address is correct\\n     * @dev Set the asset token address\\n     * @param newAssetToken The new asset token address\\n     */\\n    function setAssetToken(address newAssetToken) public onlyOwner {\\n        assetToken = newAssetToken;\\n\\n        emit AssetTokenSet(newAssetToken);\\n    }\\n\\n    function _createToken(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls\\n    ) internal returns (address token) {\\n        token = tokenFactory.createToken(\\n            string.concat(_name, \\\" by InteNet\\\"),\\n            _ticker,\\n            initialSupply,\\n            address(this)\\n        );\\n\\n        // Create a lock contract for the token\\n        address lock = lockFactory.createLock(\\n            token,\\n            assetToken,\\n            address(this),\\n            lockedTime\\n        );\\n\\n        Token memory tmpToken = Token({\\n            creator: _creator,\\n            token: token,\\n            pair: address(0),\\n            locker: lock,\\n            description: desc,\\n            cores: cores,\\n            image: img,\\n            twitter: urls[0],\\n            telegram: urls[1],\\n            farcaster: urls[2],\\n            website: urls[3],\\n            status: TokenStatus.BondingCurve\\n        });\\n\\n        tokenInfo[address(token)] = tmpToken;\\n        tokenInfos.push(address(token));\\n    }\\n\\n    function _launchInternal(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 initialPurchase,\\n        address spender,\\n        address recipient\\n    ) internal returns (address, address, uint256) {\\n        address token = _createToken(\\n            _creator,\\n            _name,\\n            _ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls\\n        );\\n\\n        address _pair = factory.createPair(token, assetToken);\\n\\n        // create pair in external AMM to reserve the boost fee pair\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = assetToken;\\n        tokens[1] = token;\\n        IExtPairFactory(extRouter.factory()).createPair(\\n            tokens,\\n            1, // PairType.Volatile\\n            abi.encodePacked(uint256(1)) // FeeType.Boost\\n        );\\n\\n        // Enable pair contract to transfer tokens\\n        INTERC20(token).excludeAccount(_pair);\\n\\n        uint256 liquidity = (initialMarketCap * 1e18) /\\n            oracle.getUnderlyingPrice(assetToken);\\n        INTRouterLibrary.addInitialLiquidity(\\n            factory,\\n            assetToken,\\n            token,\\n            initialSupply,\\n            liquidity\\n        );\\n\\n        tokenInfo[token].pair = _pair;\\n        uint256 totalTokens = tokenInfos.length;\\n        emit Launched(token, _pair, totalTokens, 0, block.timestamp);\\n\\n        if (initialPurchase != 0) {\\n            INTRouterLibrary.buy(\\n                factory,\\n                assetToken,\\n                initialPurchase,\\n                token,\\n                spender,\\n                recipient\\n            );\\n        }\\n\\n        return (token, _pair, totalTokens);\\n    }\\n\\n    function _launchCommon(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 payAmount\\n    ) internal returns (address, address, uint256) {\\n        uint256 feeAmount = fee;\\n        if (payAmount < feeAmount) revert InsufficientAmount();\\n\\n        if (IERC20(assetToken).balanceOf(msg.sender) < payAmount)\\n            revert InsufficientAmount();\\n\\n        if (feeAmount > 0)\\n            IERC20(assetToken).safeTransferFrom(msg.sender, feeTo, feeAmount);\\n\\n        return\\n            _launchInternal(\\n                _creator,\\n                _name,\\n                _ticker,\\n                cores,\\n                desc,\\n                img,\\n                urls,\\n                payAmount - feeAmount,\\n                msg.sender,\\n                msg.sender\\n            );\\n    }\\n\\n    function launchFor(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 payAmount\\n    ) public nonReentrant returns (address, address, uint256) {\\n        return\\n            _launchCommon(\\n                _creator,\\n                _name,\\n                _ticker,\\n                cores,\\n                desc,\\n                img,\\n                urls,\\n                payAmount\\n            );\\n    }\\n\\n    function launch(\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 payAmount\\n    ) public nonReentrant returns (address, address, uint256) {\\n        return\\n            _launchCommon(\\n                msg.sender,\\n                _name,\\n                _ticker,\\n                cores,\\n                desc,\\n                img,\\n                urls,\\n                payAmount\\n            );\\n    }\\n\\n    function _sellInternal(\\n        uint256 amountIn,\\n        address tokenAddress,\\n        address spender,\\n        address recipient\\n    ) internal returns (uint256, uint256) {\\n        if (tokenInfo[tokenAddress].status != TokenStatus.BondingCurve)\\n            revert NotTrading();\\n\\n        return\\n            INTRouterLibrary.sell(\\n                factory,\\n                assetToken,\\n                amountIn,\\n                tokenAddress,\\n                spender,\\n                recipient\\n            );\\n    }\\n\\n    function sell(\\n        uint256 amountIn,\\n        address tokenAddress\\n    ) public returns (bool) {\\n        _sellInternal(amountIn, tokenAddress, msg.sender, msg.sender);\\n\\n        return true;\\n    }\\n\\n    function _buyInternal(\\n        uint256 amountIn,\\n        address tokenAddress,\\n        address spender,\\n        address recipient\\n    ) internal returns (uint256 amountIn_, uint256 amountOut_) {\\n        (amountIn_, amountOut_) = INTRouterLibrary.buy(\\n            factory,\\n            assetToken,\\n            amountIn,\\n            tokenAddress,\\n            spender,\\n            recipient\\n        );\\n\\n        if (calculateMarketCap(tokenAddress) >= gradMarketCap) {\\n            _graduate(tokenAddress);\\n        }\\n    }\\n\\n    function buy(uint256 amountIn, address tokenAddress) public returns (bool) {\\n        if (tokenInfo[tokenAddress].status != TokenStatus.BondingCurve)\\n            revert NotTrading();\\n\\n        _buyInternal(amountIn, tokenAddress, msg.sender, msg.sender);\\n\\n        return true;\\n    }\\n\\n    function quoteBuy(\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256, uint256) {\\n        return\\n            INTRouterLibrary.quoteBuy(factory, assetToken, token_, amountIn_);\\n    }\\n\\n    function quoteSell(\\n        address token_,\\n        uint256 amountIn_\\n    ) public view returns (uint256, uint256) {\\n        return\\n            INTRouterLibrary.quoteSell(factory, assetToken, token_, amountIn_);\\n    }\\n\\n    function _graduate(address tokenAddress) internal {\\n        Token storage _token = tokenInfo[tokenAddress];\\n\\n        // Sanity check\\n        if (tokenInfo[tokenAddress].status == TokenStatus.Graduated)\\n            revert AlreadyTrading();\\n\\n        INTERC20 token_ = INTERC20(tokenAddress);\\n\\n        // Transfer asset tokens to bonding contract\\n        IINTPair pair = IINTPair(_token.pair);\\n\\n        uint256 assetBalance = pair.assetBalance();\\n        uint256 tokenBalance = pair.balance();\\n\\n        INTRouterLibrary.graduate(factory, assetToken, tokenAddress);\\n\\n        // Enable token transferring without limit\\n        token_.enableTransfer();\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = assetToken;\\n        tokens[1] = tokenAddress;\\n        (address lp, ) = extRouter.pairFor(tokens, 1);\\n\\n        // update LP address in locker contract\\n        address locker = _token.locker;\\n        ILock(locker).setLP(lp);\\n\\n        _extRouterAddLiquidity(\\n            lp,\\n            locker,\\n            tokenAddress,\\n            assetToken,\\n            tokenBalance,\\n            assetBalance,\\n            tokenBalance,\\n            assetBalance,\\n            0,\\n            block.timestamp\\n        );\\n\\n        _token.status = TokenStatus.Graduated;\\n        _token.pair = lp;\\n\\n        emit Graduated(tokenAddress, lp);\\n    }\\n\\n    // Delegate LP token to the specified address.\\n    function _delegateLPTo(address tokenAddr, address delegatee) internal {\\n        if (delegatee == address(0)) revert InvalidDelegatee();\\n\\n        Token storage _tokenInfo = tokenInfo[tokenAddr];\\n        if (_tokenInfo.locker == address(0)) revert InvalidLocker();\\n\\n        ILock lockContract = ILock(_tokenInfo.locker);\\n        lockContract.delegateLPTo(delegatee);\\n\\n        emit DelegateLPTo(tokenAddr, delegatee);\\n    }\\n\\n    /**\\n     * @notice LP token should have been released in its locker contract.\\n     * @dev Delegate LP token to the specified address.\\n     * @param tokenAddr The address of the token to delegate its LP token.\\n     * @param delegatee The address to delegate the LP token to.\\n     */\\n    function delegateLPTo(\\n        address tokenAddr,\\n        address delegatee\\n    ) external onlyOwner {\\n        _delegateLPTo(tokenAddr, delegatee);\\n    }\\n\\n    /**\\n     * @notice LP token should have been released in its locker contract.\\n     * @dev Delegate LP token to the specified address for multiple tokens.\\n     * @param tokens The addresses of the tokens to delegate their LP tokens.\\n     * @param delegatees The addresses to delegate the LP tokens to.\\n     */\\n    function delegateLPToBatch(\\n        address[] calldata tokens,\\n        address[] calldata delegatees\\n    ) external onlyOwner {\\n        if (tokens.length != delegatees.length) revert InputArrayMismatch();\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i; i < len; ) {\\n            _delegateLPTo(tokens[i], delegatees[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function hasGraduated(address tokenAddress) external view returns (bool) {\\n        return tokenInfo[tokenAddress].status == TokenStatus.Graduated;\\n    }\\n\\n    function getTokenLocker(\\n        address tokenAddress\\n    ) external view returns (address) {\\n        Token storage token = tokenInfo[tokenAddress];\\n\\n        return token.locker;\\n    }\\n\\n    function getTokenCreator(\\n        address tokenAddress\\n    ) external view returns (address) {\\n        Token storage token = tokenInfo[tokenAddress];\\n\\n        return token.creator;\\n    }\\n\\n    /**\\n     * @notice Get the total number of tokens created through bonding\\n     * @return The length of tokenInfos array\\n     */\\n    function getTokenCount() external view returns (uint256) {\\n        return tokenInfos.length;\\n    }\\n\\n    function _boost1(\\n        address creator,\\n        string memory name,\\n        string memory ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) internal {\\n        // boostStageThreshold and asset price are all 18 decimals\\n        if (\\n            assetAmount * oracle.getUnderlyingPrice(assetToken) * 2 <\\n            boostStageThresholds[1] * 1e18\\n        ) {\\n            revert LiquidityTooLow();\\n        }\\n\\n        address token = _createToken(\\n            creator,\\n            name,\\n            ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls\\n        );\\n\\n        Token storage _token = tokenInfo[token];\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = assetToken;\\n        tokens[1] = token;\\n\\n        // The boost pair creation is permissioned\\n        address pair = IExtPairFactory(extRouter.factory()).createPair(\\n            tokens,\\n            1, // PairType.Volatile\\n            abi.encodePacked(uint256(1)) // FeeType.Boost\\n        );\\n\\n        _token.status = TokenStatus.Graduated;\\n        _token.pair = pair;\\n\\n        // Update LP address in locker contract\\n        address locker = _token.locker;\\n        ILock(locker).setLP(pair);\\n\\n        // Record boost information\\n        boostInfo[token] = BoostInfo({ stage: 1 });\\n        boostInfos.push(token);\\n\\n        INTERC20(token).enableTransfer();\\n\\n        emit Launched(token, pair, tokenInfos.length, 1, block.timestamp);\\n\\n        // Provide Initial liquidity via external router\\n        IERC20(assetToken).safeTransferFrom(feeTo, address(this), assetAmount);\\n\\n        // Added amounts should match intended as it's the initial liquidity\\n        (, uint256 tokenAdded, uint256 assetAdded) = _extRouterAddLiquidity(\\n            pair,\\n            locker,\\n            token,\\n            assetToken,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n\\n        // Approve the remaining token for future boost\\n        ILock(locker).approveToken(\\n            token,\\n            address(this),\\n            initialSupply - tokenAdded\\n        );\\n\\n        emit Boosted(token, 1, tokenAdded, assetAdded);\\n    }\\n\\n    /**\\n     * @notice Boost liquidity for a token by adding token and asset pairs\\n     * @dev Only callable by owner. Adds liquidity via external router\\n     * @param creator The creator of the token\\n     * @param name The name of the token\\n     * @param ticker The ticker symbol of the token\\n     * @param cores Array of core values\\n     * @param desc Description of the token\\n     * @param img Image URL for the token\\n     * @param urls Array of 4 URLs (twitter, telegram, farcaster, website)\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost1For(\\n        address creator,\\n        string memory name,\\n        string memory ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost1(\\n            creator,\\n            name,\\n            ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Boost liquidity for a token by adding token and asset pairs\\n     * @dev Only callable by owner. Adds liquidity via external router\\n     * @param name The name of the token\\n     * @param ticker The ticker symbol of the token\\n     * @param cores Array of core values\\n     * @param desc Description of the token\\n     * @param img Image URL for the token\\n     * @param urls Array of 4 URLs (twitter, telegram, farcaster, website)\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost1(\\n        string memory name,\\n        string memory ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost1(\\n            msg.sender,\\n            name,\\n            ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Boost Stage 2 for a token by adding token and asset pairs\\n     * @dev Only callable by booster. Adds liquidity via external router\\n     * @param token Address of token to boost\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost2(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost(\\n            2,\\n            token,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Boost Stage 3 for a token by adding token and asset pairs\\n     * @dev Only callable by owner. Adds liquidity via external router\\n     * @param token Address of token to boost\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost3(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost(\\n            3,\\n            token,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    function _boost(\\n        uint8 stage,\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) internal {\\n        BoostInfo storage _boostInfo = boostInfo[token];\\n        if (_boostInfo.stage + 1 != stage) revert WrongBoostStage();\\n\\n        if (calculateMarketCap(token) < boostStageThresholds[stage]) {\\n            revert MarketCapTooLow();\\n        }\\n\\n        Token storage _token = tokenInfo[token];\\n        address _locker = _token.locker;\\n\\n        IERC20(assetToken).safeTransferFrom(feeTo, address(this), assetAmount);\\n        IERC20(token).safeTransferFrom(_locker, address(this), tokenAmount);\\n\\n        // _extRouterAddLiquidity will return remaining token and asset\\n        (, uint256 tokenAdded, uint256 assetAdded) = _extRouterAddLiquidity(\\n            _token.pair,\\n            _locker,\\n            token,\\n            assetToken,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n\\n        _boostInfo.stage++;\\n\\n        emit Boosted(token, stage, tokenAdded, assetAdded);\\n    }\\n\\n    // Helper function to check if token is boosted\\n    function isBoostToken(address token) public view returns (bool) {\\n        return boostInfo[token].stage != 0;\\n    }\\n\\n    // Get boost information\\n    function getBoostInfo(\\n        address token\\n    ) public view returns (BoostInfo memory) {\\n        return boostInfo[token];\\n    }\\n\\n    /**\\n     * @notice Get the total number of boost created through bonding\\n     * @return The length of boostInfos array\\n     */\\n    function getBoostCount() external view returns (uint256) {\\n        return boostInfos.length;\\n    }\\n\\n    function _extRouterAddLiquidity(\\n        address lp,\\n        address locker,\\n        address token,\\n        address asset,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    )\\n        internal\\n        returns (uint256 liquidity, uint256 tokenAdded, uint256 assetAdded)\\n    {\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = asset;\\n        tokens[1] = token;\\n\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[0] = assetAmount;\\n        amounts[1] = tokenAmount;\\n\\n        uint256[] memory mins = new uint256[](2);\\n        mins[0] = assetAmountMin;\\n        mins[1] = tokenAmountMin;\\n\\n        IERC20(token).forceApprove(address(extRouter), tokenAmount);\\n        IERC20(asset).forceApprove(address(extRouter), assetAmount);\\n\\n        uint256[] memory added;\\n        (added, liquidity) = extRouter.addLiquidity(\\n            1,\\n            tokens,\\n            amounts,\\n            mins,\\n            minLiquidity,\\n            address(this),\\n            deadline\\n        );\\n\\n        assetAdded = added[0];\\n        tokenAdded = added[1];\\n\\n        IERC20(lp).forceApprove(locker, liquidity);\\n        ILock(locker).lockLP(liquidity);\\n\\n        uint256 tokenBal = IERC20(token).balanceOf(address(this));\\n        uint256 assetBal = IERC20(asset).balanceOf(address(this));\\n\\n        if (tokenBal != 0) {\\n            IERC20(token).safeTransfer(locker, tokenBal);\\n        }\\n\\n        if (assetBal != 0) {\\n            IERC20(asset).safeTransfer(feeTo, assetBal);\\n        }\\n    }\\n\\n    function _setBoostStageThresholdInternal(\\n        uint8 stage,\\n        uint256 threshold\\n    ) internal {\\n        if (stage == 0) revert InvalidStage();\\n        if (threshold <= boostStageThresholds[stage - 1])\\n            revert InvalidThreshold();\\n        boostStageThresholds[stage] = threshold;\\n\\n        emit BoostStageThresholdUpdated(stage, threshold);\\n    }\\n\\n    /**\\n     * @notice Set threshold for a boost stage\\n     * @param stage The boost stage number (1-3)\\n     * @param threshold The threshold amount required for this stage\\n     */\\n    function setBoostStageThreshold(\\n        uint8 stage,\\n        uint256 threshold\\n    ) external onlyOwner {\\n        if (stage > 3) revert InvalidStage();\\n\\n        _setBoostStageThresholdInternal(stage, threshold);\\n    }\\n\\n    /**\\n     * @notice Set thresholds for all boost stages in one transaction\\n     * @param thresholds Array of threshold amounts for stages 1-3\\n     */\\n    function setBoostStageThresholds(\\n        uint256[] calldata thresholds\\n    ) external onlyOwner {\\n        if (thresholds.length != 3) revert InputArrayMismatch();\\n\\n        for (uint8 i = 0; i < 3; i++) {\\n            _setBoostStageThresholdInternal(i + 1, thresholds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the market cap of a token using oracle price and liquidity reserves\\n     * @param token The token address to calculate market cap for\\n     * @return marketCap The calculated market cap in asset token value in 18 decimals\\n     */\\n    function calculateMarketCap(address token) public returns (uint256) {\\n        Token storage _token = tokenInfo[token];\\n        TokenStatus status = _token.status;\\n        if (status == TokenStatus.None) revert InvalidToken();\\n\\n        uint256 assetPrice = IOracle(oracle).getUnderlyingPrice(assetToken);\\n        if (assetPrice == 0) revert InvalidAssetPrice();\\n\\n        uint256 tokenReserve;\\n        uint256 assetReserve;\\n        address pair = _token.pair;\\n\\n        if (status == TokenStatus.BondingCurve) {\\n            (tokenReserve, assetReserve) = IINTPair(pair).getReserves();\\n        } else {\\n            (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair)\\n                .getReserves();\\n            bool isToken0 = token < assetToken;\\n\\n            (tokenReserve, assetReserve) = isToken0\\n                ? (reserve0, reserve1)\\n                : (reserve1, reserve0);\\n        }\\n\\n        if (tokenReserve == 0 || assetReserve == 0) revert InvalidReserves();\\n\\n        // Get total supply\\n        uint256 totalSupply = IERC20(token).totalSupply();\\n\\n        // Calculate market cap: totalSupply * tokenPrice * assetPrice / 1e18\\n        uint256 marketCap = (assetPrice * totalSupply * assetReserve) /\\n            tokenReserve /\\n            1e18;\\n\\n        return marketCap;\\n    }\\n}\\n\",\"keccak256\":\"0x80c44847ce1f93065d01309bfd62c9c8381d5d877f2c3387ed97c439c541c023\",\"license\":\"MIT\"},\"src/BondingETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Bonding.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract BondingETH is Bonding {\\n    using SafeERC20 for IERC20;\\n\\n    error NotWETHMode();\\n    error ETHTransferFailed();\\n    error Unauthorized();\\n\\n    address public immutable weth;\\n\\n    constructor(address weth_) Bonding() {\\n        weth = weth_;\\n    }\\n\\n    function initialize(\\n        address assetToken_,\\n        address factory_,\\n        address feeTo_,\\n        uint256 fee_,\\n        uint256 initialSupply_,\\n        address extRouter_,\\n        address tokenFactory_,\\n        address lockFactory_,\\n        uint256 lockedTime_,\\n        address oracle_,\\n        uint256 initialMarketCap_,\\n        uint256 gradMarketCap_\\n    ) public override initializer {\\n        if (assetToken_ != weth) revert NotWETHMode();\\n\\n        super.initialize(\\n            assetToken_,\\n            factory_,\\n            feeTo_,\\n            fee_,\\n            initialSupply_,\\n            extRouter_,\\n            tokenFactory_,\\n            lockFactory_,\\n            lockedTime_,\\n            oracle_,\\n            initialMarketCap_,\\n            gradMarketCap_\\n        );\\n    }\\n\\n    function _launchWithEthInternal(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls\\n    ) internal returns (address, address, uint256) {\\n        uint256 feeAmount = fee;\\n        if (msg.value < feeAmount)\\n            revert InsufficientAmount();\\n\\n        // Wrap ETH to WETH first\\n        IWETH(assetToken).deposit{ value: msg.value }();\\n\\n        if (feeAmount > 0)\\n            IERC20(assetToken).safeTransfer(feeTo, feeAmount);\\n\\n        return\\n            _launchInternal(\\n                _creator,\\n                _name,\\n                _ticker,\\n                cores,\\n                desc,\\n                img,\\n                urls,\\n                msg.value - feeAmount,\\n                address(this),\\n                msg.sender\\n            );\\n    }\\n\\n    function launchWithETH(\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls\\n    ) external payable nonReentrant returns (address, address, uint256) {\\n        return\\n            _launchWithEthInternal(\\n                msg.sender,\\n                _name,\\n                _ticker,\\n                cores,\\n                desc,\\n                img,\\n                urls\\n            );\\n    }\\n\\n    function launchForWithETH(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls\\n    ) external payable nonReentrant returns (address, address, uint256) {\\n        return\\n            _launchWithEthInternal(\\n                _creator,\\n                _name,\\n                _ticker,\\n                cores,\\n                desc,\\n                img,\\n                urls\\n            );\\n    }\\n\\n    function buyWithETH(address tokenAddress) external payable returns (bool) {\\n        IWETH(assetToken).deposit{ value: msg.value }();\\n\\n        _buyInternal(msg.value, tokenAddress, address(this), msg.sender);\\n\\n        return true;\\n    }\\n\\n    function sellForETH(\\n        uint256 amountIn,\\n        address tokenAddress\\n    ) external returns (bool success) {\\n        (, uint256 amountOut) = _sellInternal(\\n            amountIn,\\n            tokenAddress,\\n            msg.sender,\\n            address(this)\\n        );\\n\\n        IWETH(assetToken).withdraw(amountOut);\\n        _safeTransferETH(msg.sender, amountOut);\\n\\n        return true;\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        if (!success) revert ETHTransferFailed();\\n    }\\n\\n    receive() external payable {\\n        // Only accept ETH from WETH contract\\n        if (msg.sender != assetToken) revert Unauthorized();\\n    }\\n\\n    fallback() external payable {\\n        revert(\\\"Direct ETH transfers not allowed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1eb3b73b19650c327ed79d94b07f39ca86256e06b5c0bff91651ebddbded9a97\",\"license\":\"MIT\"},\"src/INTERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract INTERC20 is ERC20Permit, Ownable {\\n    bool public transferDisabled;\\n\\n    // account => exclude\\n    mapping(address => bool) public isExcluded;\\n\\n    event ExcludeAccount(address account);\\n    event EnableTransfer();\\n\\n    error TransferDisabled();\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 supply_,\\n        address initialOwner_\\n    ) ERC20(name_, symbol_) ERC20Permit(name_) {\\n        _transferOwnership(initialOwner_);\\n        _mint(initialOwner_, supply_);\\n\\n        transferDisabled = true;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal virtual override {\\n        if (transferDisabled) {\\n            if (!isExcluded[from] && !isExcluded[to]) revert TransferDisabled();\\n        }\\n    }\\n\\n    /**\\n     * @dev Exclude account from transfer limit\\n     * @param account The account to exclude\\n     */\\n    function excludeAccount(address account) external onlyOwner {\\n        isExcluded[account] = true;\\n\\n        emit ExcludeAccount(account);\\n    }\\n\\n    /**\\n     * @notice Only owner can call this function\\n     * @dev Enable transferring tokens without any limit\\n     */\\n    function enableTransfer() external onlyOwner {\\n        transferDisabled = false;\\n\\n        emit EnableTransfer();\\n    }\\n}\\n\",\"keccak256\":\"0xeed4b46c85c9951c55fea071d8f73367f1a6b8b01c784c894b4e7af56f3c0dea\",\"license\":\"MIT\"},\"src/INTERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./INTERC20.sol\\\";\\n\\ncontract INTERC20Factory {\\n    /**\\n     * @notice Creates a new INTERC20 token\\n     * @param name Token name\\n     * @param symbol Token symbol\\n     * @param totalSupply Initial total supply\\n     * @param initialOwner Initial Owner\\n     * @return token The address of the new token\\n     */\\n    function createToken(\\n        string memory name,\\n        string memory symbol,\\n        uint256 totalSupply,\\n        address initialOwner\\n    ) external returns (address token) {\\n        token = address(new INTERC20(name, symbol, totalSupply, initialOwner));\\n    }\\n}\\n\",\"keccak256\":\"0xc0c08164dc96f2efe74c18273df0abeb8d6a93c8488f236612ba42395bf71d71\",\"license\":\"MIT\"},\"src/INTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./INTPair.sol\\\";\\n\\ncontract INTFactory is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant CREATOR_ROLE = keccak256(\\\"CREATOR_ROLE\\\");\\n\\n    mapping(address => mapping(address => address)) private _pair;\\n\\n    address[] public pairs;\\n\\n    address public router;\\n\\n    address public treasury;\\n    uint256 public buyFee;\\n    uint256 public sellFee;\\n    uint256 public treasuryFeeRatio; // 1 => 1%\\n\\n    event TreasuryUpdated(address oldTreasury, address newTreasury);\\n    event BuyFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event SellFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event TreasuryFeeRatioUpdated(uint256 oldRatio, uint256 newRatio);\\n\\n    event PairCreated(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        address pair,\\n        uint256 totalPairs\\n    );\\n\\n    error TokenIsZeroAddress();\\n    error BuyFeeTooHigh();\\n    error SellFeeTooHigh();\\n    error TreasuryIsZeroAddress();\\n    error TreasuryFeeRatioTooHigh();\\n    error SameTreasuryFeeRatio();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address treasury_,\\n        uint256 buyFee_,\\n        uint256 sellFee_,\\n        uint256 treasuryFeeRatio_\\n    ) external initializer {\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        if (buyFee_ > 100) revert BuyFeeTooHigh();\\n        if (sellFee_ > 100) revert SellFeeTooHigh();\\n        if (treasuryFeeRatio_ > 100) revert TreasuryFeeRatioTooHigh();\\n\\n        treasury = treasury_;\\n        buyFee = buyFee_;\\n        sellFee = sellFee_;\\n        treasuryFeeRatio = treasuryFeeRatio_;\\n    }\\n\\n    function _createPair(\\n        address tokenA,\\n        address tokenB\\n    ) internal returns (address) {\\n        if (tokenA == address(0)) revert TokenIsZeroAddress();\\n        if (tokenB == address(0)) revert TokenIsZeroAddress();\\n\\n        INTPair pair_ = new INTPair(address(this), tokenA, tokenB);\\n\\n        _pair[tokenA][tokenB] = address(pair_);\\n        _pair[tokenB][tokenA] = address(pair_);\\n\\n        pairs.push(address(pair_));\\n\\n        uint256 totalPairs = pairs.length;\\n\\n        emit PairCreated(tokenA, tokenB, address(pair_), totalPairs);\\n\\n        return address(pair_);\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external onlyRole(CREATOR_ROLE) nonReentrant returns (address) {\\n        address pair = _createPair(tokenA, tokenB);\\n\\n        return pair;\\n    }\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) public view returns (address) {\\n        return _pair[tokenA][tokenB];\\n    }\\n\\n    function allPairsLength() public view returns (uint256) {\\n        return pairs.length;\\n    }\\n\\n    function setFeeParams(\\n        address newTreasury,\\n        uint256 newBuyFee,\\n        uint256 newSellFee,\\n        uint256 newTreasuryFeeRatio\\n    ) public onlyRole(ADMIN_ROLE) {\\n        if (newTreasury == address(0)) revert TreasuryIsZeroAddress();\\n        if (newBuyFee > 100) revert BuyFeeTooHigh();\\n        if (newSellFee > 100) revert SellFeeTooHigh();\\n        if (newTreasuryFeeRatio > 100) revert TreasuryFeeRatioTooHigh();\\n\\n        emit TreasuryUpdated(treasury, newTreasury);\\n        emit BuyFeeUpdated(buyFee, newBuyFee);\\n        emit SellFeeUpdated(sellFee, newSellFee);\\n        emit TreasuryFeeRatioUpdated(treasuryFeeRatio, newTreasuryFeeRatio);\\n\\n        treasury = newTreasury;\\n        buyFee = newBuyFee;\\n        sellFee = newSellFee;\\n        treasuryFeeRatio = newTreasuryFeeRatio;\\n    }\\n\\n    function setRouter(address router_) public onlyRole(ADMIN_ROLE) {\\n        router = router_;\\n    }\\n}\\n\",\"keccak256\":\"0x34f363fa05ec332f0540287b161a79eb768ec4c5b607a59ba040b27237c7a99d\",\"license\":\"MIT\"},\"src/INTPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IINTPair.sol\\\";\\nimport \\\"./INTFactory.sol\\\";\\n\\ncontract INTPair is IINTPair, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable factory;\\n    address public immutable tokenA; // meme token\\n    address public immutable tokenB;\\n\\n    struct Pool {\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 k;\\n        uint256 lastUpdated;\\n    }\\n\\n    Pool private _pool;\\n\\n    modifier onlyRouter() {\\n        if (msg.sender != INTFactory(factory).router()) revert CallerIsNotRouter();\\n        _;\\n    }\\n\\n    event Mint(uint256 reserve0, uint256 reserve1);\\n\\n    event Swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    );\\n\\n    error FactoryIsZeroAddress();\\n    error TokenIsZeroAddress();\\n    error CallerIsNotRouter();\\n    error AlreadyMinted();\\n    error RecipientIsZeroAddress();\\n\\n    constructor(address factory_, address token0, address token1) {\\n        if (factory_ == address(0)) revert FactoryIsZeroAddress();\\n        if (token0 == address(0)) revert TokenIsZeroAddress();\\n        if (token1 == address(0)) revert TokenIsZeroAddress();\\n\\n        factory = factory_;\\n        tokenA = token0;\\n        tokenB = token1;\\n    }\\n\\n    function mint(\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) public onlyRouter returns (bool) {\\n        if (_pool.lastUpdated != 0) revert AlreadyMinted();\\n\\n        _pool = Pool({\\n            reserve0: reserve0,\\n            reserve1: reserve1,\\n            k: reserve0 * reserve1,\\n            lastUpdated: block.timestamp\\n        });\\n\\n        emit Mint(reserve0, reserve1);\\n\\n        return true;\\n    }\\n\\n    function swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    ) public onlyRouter returns (bool) {\\n        uint256 _reserve0 = (_pool.reserve0 + amount0In) - amount0Out;\\n        uint256 _reserve1 = (_pool.reserve1 + amount1In) - amount1Out;\\n\\n        _pool = Pool({\\n            reserve0: _reserve0,\\n            reserve1: _reserve1,\\n            k: _pool.k,\\n            lastUpdated: block.timestamp\\n        });\\n\\n        emit Swap(amount0In, amount0Out, amount1In, amount1Out);\\n\\n        return true;\\n    }\\n\\n    function approval(\\n        address _user,\\n        address _token,\\n        uint256 amount\\n    ) public onlyRouter returns (bool) {\\n        if (_user == address(0)) revert RecipientIsZeroAddress();\\n        if (_token == address(0)) revert TokenIsZeroAddress();\\n\\n        IERC20 token = IERC20(_token);\\n\\n        token.forceApprove(_user, amount);\\n\\n        return true;\\n    }\\n\\n    function transferAsset(\\n        address recipient,\\n        uint256 amount\\n    ) public onlyRouter {\\n        if (recipient == address(0)) revert RecipientIsZeroAddress();\\n\\n        IERC20(tokenB).safeTransfer(recipient, amount);\\n    }\\n\\n    function transferTo(address recipient, uint256 amount) public onlyRouter {\\n        if (recipient == address(0)) revert RecipientIsZeroAddress();\\n\\n        IERC20(tokenA).safeTransfer(recipient, amount);\\n    }\\n\\n    function getReserves() public view returns (uint256, uint256) {\\n        return (_pool.reserve0, _pool.reserve1);\\n    }\\n\\n    function kLast() public view returns (uint256) {\\n        return _pool.k;\\n    }\\n\\n    function priceALast() public view returns (uint256) {\\n        return _pool.reserve1 / _pool.reserve0;\\n    }\\n\\n    function priceBLast() public view returns (uint256) {\\n        return _pool.reserve0 / _pool.reserve1;\\n    }\\n\\n    function balance() public view returns (uint256) {\\n        return IERC20(tokenA).balanceOf(address(this));\\n    }\\n\\n    function assetBalance() public view returns (uint256) {\\n        return IERC20(tokenB).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4104abcd2d281f871ea132719faf95ee9fca487ffd19dd781ecd39ca336fa292\",\"license\":\"MIT\"},\"src/Lock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IBonding } from \\\"./interfaces/IBonding.sol\\\";\\nimport { ILock } from \\\"./interfaces/ILock.sol\\\";\\n\\n/**\\n * @title Lock Contract\\n * @notice The contract is created by bonding contract when the meme token generated.\\n * @dev The contract is used for bonding contract to lock/delegate lp token,\\n *      and claim rewards for the token creator after the token graduates.\\n */\\ncontract Lock is ILock {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public immutable lockedTime;\\n\\n    // The meme token of this lock.\\n    address public immutable token;\\n\\n    address public immutable assetToken;\\n\\n    // The bonding contract.\\n    address public immutable bonding;\\n\\n    // The trading fee during the bonding period.\\n    uint256 public tradingFeeAtBonding;\\n\\n    // The address of the LP token to lock.\\n    address public lp;\\n\\n    struct LockedInfo {\\n        uint256 lockedAmount;\\n        uint256 releasedTime;\\n    }\\n\\n    mapping(address => LockedInfo) public lockedInfos;\\n\\n    event SetLP(address newLpAddr);\\n    event LockedLP(uint256 newLockedAmount);\\n    event DepositFee(uint256 newDepositedAmount);\\n    event ClaimForTokenCreator(address indexed tokenCreator, uint256 amount);\\n    event DelegateLPTo(\\n        address indexed lpAddr,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        address _token,\\n        address _assetToken,\\n        address _bonding,\\n        uint256 _lockedTime\\n    ) {\\n        token = _token;\\n        assetToken = _assetToken;\\n        bonding = _bonding;\\n        lockedTime = _lockedTime;\\n    }\\n\\n    modifier onlyBonding() {\\n        if (msg.sender != bonding) revert NotBonding();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Should be called only once.\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Set the LP token address.\\n     * @param _lp The address of the LP token to lock.\\n     */\\n    function setLP(address _lp) external onlyBonding {\\n        lp = _lp;\\n\\n        emit SetLP(_lp);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Locks the specified amount of lp tokens.\\n     * @param lockedAmount The amount of lp tokens to lock.\\n     */\\n    function lockLP(uint256 lockedAmount) external onlyBonding {\\n        address lpAddr = lp;\\n        LockedInfo storage lockedInfo = lockedInfos[lpAddr];\\n\\n        lockedInfo.lockedAmount = lockedInfo.lockedAmount + lockedAmount;\\n        lockedInfo.releasedTime = block.timestamp + lockedTime;\\n\\n        IERC20(lpAddr).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            lockedAmount\\n        );\\n\\n        emit LockedLP(lockedAmount);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @notice Only can be called after the released time.\\n     * @dev Delegates the LP token to the specified address.\\n     * @param delegatee The address to delegate the LP token to.\\n     */\\n    function delegateLPTo(address delegatee) external onlyBonding {\\n        address lpAddr = lp;\\n        LockedInfo storage lockedInfo = lockedInfos[lpAddr];\\n\\n        if (block.timestamp < lockedInfo.releasedTime) revert NotReleased();\\n\\n        IERC20(lpAddr).forceApprove(delegatee, lockedInfo.lockedAmount);\\n\\n        emit DelegateLPTo(lpAddr, delegatee, lockedInfo.lockedAmount);\\n    }\\n\\n    /**\\n     * @notice Before the token graduates, charge a portion of the trading fee when buying and selling.\\n     *         The entire fee can be distributed to the token creator after the token graduates.\\n     * @notice Ideally, the `Bonding` contract will use this function to store fee when trading.\\n     * @dev Deposit the trading fee to the lock contract.\\n     * @param amount The amount of trading fee to deposit.\\n     */\\n    function depositFee(uint256 amount) external {\\n        tradingFeeAtBonding = tradingFeeAtBonding + amount;\\n\\n        IERC20(assetToken).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit DepositFee(amount);\\n    }\\n\\n    /**\\n     * @notice Should be called only once.\\n     * @notice Should be called after the token graduates.\\n     * @dev Claim the rewards for the token creator\\n     */\\n    function claimForTokenCreator() external {\\n        if (!IBonding(bonding).hasGraduated(token))\\n            revert TokenDoesNotGraduate();\\n\\n        address tokenCreator = IBonding(bonding).getTokenCreator(token);\\n\\n        // Distribute rewards to the token creator.\\n        uint256 amount = tradingFeeAtBonding;\\n        tradingFeeAtBonding = 0;\\n        IERC20(assetToken).safeTransfer(tokenCreator, amount);\\n\\n        emit ClaimForTokenCreator(tokenCreator, amount);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Approves token spending for a specified address\\n     * @param spender The address allowed to spend the token\\n     * @param amount The amount of tokens to approve\\n     */\\n    function approveToken(\\n        address _token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyBonding {\\n        IERC20(_token).forceApprove(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x792e4b0727391a38fa00a040821021fe10d88df7a62b852dd3df9eaad3073c42\",\"license\":\"MIT\"},\"src/LockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./Lock.sol\\\";\\n\\ncontract LockFactory {\\n    /**\\n     * @notice Creates a new Lock for token\\n     * @param _token Token address\\n     * @param _assetToken Asset token address\\n     * @param _bonding Bonding address\\n     * @param _lockedTime The time to lock the lp token\\n     */\\n    function createLock(\\n        address _token,\\n        address _assetToken,\\n        address _bonding,\\n        uint256 _lockedTime\\n    ) external returns (address lock) {\\n        lock = address(new Lock(_token, _assetToken, _bonding, _lockedTime));\\n    }\\n}\\n\",\"keccak256\":\"0x47c7263c9c9b2b337506a4b28d422c01ab01cc2d802aa1b318cad41e47a0b7a3\",\"license\":\"MIT\"},\"src/interfaces/IBonding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IBonding {\\n    enum TokenStatus {\\n        None,\\n        BondingCurve,\\n        Graduated\\n    }\\n\\n    struct Token {\\n        address creator;\\n        address token;\\n        address pair;\\n        address locker;\\n        string description;\\n        uint8[] cores;\\n        string image;\\n        string twitter;\\n        string telegram;\\n        string farcaster;\\n        string website;\\n        bool trading;\\n        bool tradingOnUniswap;\\n    }\\n\\n    function tokenInfo(address token) external view returns (Token memory);\\n\\n    function getTokenLocker(\\n        address tokenAddress\\n    ) external view returns (address);\\n\\n    function getTokenCreator(\\n        address tokenAddress\\n    ) external view returns (address);\\n\\n    function hasGraduated(address tokenAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9fda31e18b8654ea8eff4c0f5aab0ea59ea2ef24d3354d3b2017c97913e3c185\",\"license\":\"MIT\"},\"src/interfaces/IExtPairFactory.sol\":{\"content\":\"pragma solidity 0.8.20;\\n\\ninterface IExtPairFactory {\\n    function createPair(\\n        address[] memory _tokens,\\n        uint8 _pairType,\\n        bytes memory _data\\n    ) external returns (address pair);\\n}\\n\",\"keccak256\":\"0xb6608a14c5b91ba87878128c749a3a36f38d0e808bef7c54f7dd35fdc4dababc\"},\"src/interfaces/IExtRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IExtRouter {\\n    function quoteAddLiquidity(\\n        uint8,\\n        address[] memory,\\n        uint256[] memory _amountDesireds\\n    ) external view returns (uint256[] memory _amountIn, uint256 liquidity);\\n\\n    function addLiquidity(\\n        uint8 _pairType,\\n        address[] memory _tokens,\\n        uint256[] memory _amountDesireds,\\n        uint256[] memory _amountsMin,\\n        uint256 _minLiquidity,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256[] memory _amounts, uint256 _liquidity);\\n\\n    function getReserves(\\n        address[] calldata _tokens\\n    ) external view returns (uint256 _reserveA, uint256 _reserveB);\\n\\n    function pairFor(\\n        address[] memory tokens,\\n        uint8\\n    ) external view returns (address pair, bool hasPair);\\n\\n    function factory() external view returns (address);\\n}\\n\",\"keccak256\":\"0x291d50e9a3daa96fdc5f9d2533582ede11a86403fa53a5c25ddb3afe2e4359f1\",\"license\":\"MIT\"},\"src/interfaces/IINTPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IINTPair {\\n    function getReserves() external view returns (uint256, uint256);\\n\\n    function assetBalance() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n\\n    function mint(uint256 reserve0, uint256 reserve1) external returns (bool);\\n\\n    function transferAsset(address recipient, uint256 amount) external;\\n\\n    function transferTo(address recipient, uint256 amount) external;\\n\\n    function swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    ) external returns (bool);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function approval(\\n        address _user,\\n        address _token,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3e1d49d8cf5e87366b9636e3d367e31de775ab416a8de279f72eafd93f897af5\",\"license\":\"MIT\"},\"src/interfaces/ILock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILock {\\n    error NotBonding();\\n    error LockerIsZeroAddress();\\n    error HasLocked();\\n    error TokenDoesNotGraduate();\\n    error NotReleased();\\n\\n    function setLP(address _lp) external;\\n\\n    function lockLP(uint256 lockedAmount) external;\\n\\n    function delegateLPTo(address to) external;\\n\\n    function depositFee(uint256 amount) external;\\n\\n    function claimForTokenCreator() external;\\n\\n    function approveToken(\\n        address _token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2610e0be78b29858b099eead62ce736fc0f49a1e95937aa48cf45c0c948b5750\",\"license\":\"MIT\"},\"src/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IOracle {\\n    function getUnderlyingPrice(address asset) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xe68b5242c4092ffea4b22343e713a6c1bebca86f10a5a41a94a94928cf031e3c\",\"license\":\"MIT\"},\"src/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x1342db843e5b63555174ded4629f7d611ebaae3dab37953027bad4a833c11217\",\"license\":\"MIT\"},\"src/libraries/INTRouterLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../INTFactory.sol\\\";\\nimport \\\"../interfaces/IINTPair.sol\\\";\\nimport \\\"../interfaces/IBonding.sol\\\";\\nimport \\\"../interfaces/ILock.sol\\\";\\n\\nlibrary INTRouterLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    error TokenIsZeroAddress();\\n    error SpenderIsZeroAddress();\\n    error RecipientIsZeroAddress();\\n    error InputAmountIsZero();\\n    error FactoryIsZeroAddress();\\n    error AssetTokenIsZeroAddress();\\n\\n    event Buy(\\n        address indexed account,\\n        address indexed token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 assetFee,\\n        uint256 tokenReserve,\\n        uint256 assetReserve,\\n        uint256 timestamp\\n    );\\n    event Sell(\\n        address indexed account,\\n        address indexed token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 assetFee,\\n        uint256 tokenReserve,\\n        uint256 assetReserve,\\n        uint256 timestamp\\n    );\\n\\n    event InitialLiquidityAdded(\\n        address indexed token,\\n        uint256 tokenReserve,\\n        uint256 assetReserve\\n    );\\n\\n    function _getReserves(\\n        INTFactory factory,\\n        address assetToken,\\n        address token\\n    ) internal view returns (uint256 reserveA, uint256 reserveB, uint256 k) {\\n        address pairAddress = factory.getPair(token, assetToken);\\n        IINTPair pair = IINTPair(pairAddress);\\n        (reserveA, reserveB) = pair.getReserves();\\n        k = pair.kLast();\\n    }\\n\\n    function quoteBuy(\\n        INTFactory factory,\\n        address assetToken,\\n        address token,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut, uint256 txFee) {\\n        if (token == address(0)) revert TokenIsZeroAddress();\\n\\n        (uint256 reserveA, uint256 reserveB, uint256 k) = _getReserves(\\n            factory,\\n            assetToken,\\n            token\\n        );\\n\\n        uint256 fee = factory.buyFee();\\n        txFee = (fee * amountIn) / 100;\\n        amountIn = amountIn - txFee;\\n\\n        uint256 newReserveB = reserveB + amountIn;\\n        uint256 newReserveA = k / newReserveB;\\n        amountOut = reserveA - newReserveA;\\n    }\\n\\n    function quoteSell(\\n        INTFactory factory,\\n        address assetToken,\\n        address token,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut, uint256 txFee) {\\n        if (token == address(0)) revert TokenIsZeroAddress();\\n\\n        (uint256 reserveA, uint256 reserveB, uint256 k) = _getReserves(\\n            factory,\\n            assetToken,\\n            token\\n        );\\n\\n        uint256 newReserveA = reserveA + amountIn;\\n        uint256 newReserveB = k / newReserveA;\\n        amountOut = reserveB - newReserveB;\\n\\n        uint256 fee = factory.sellFee();\\n        txFee = (fee * amountOut) / 100;\\n        amountOut = amountOut - txFee;\\n    }\\n\\n    function addInitialLiquidity(\\n        INTFactory factory,\\n        address assetToken,\\n        address token_,\\n        uint256 amountToken_,\\n        uint256 amountAsset_\\n    ) public returns (uint256, uint256) {\\n        if (token_ == address(0)) revert TokenIsZeroAddress();\\n\\n        address pairAddress = factory.getPair(token_, assetToken);\\n\\n        IINTPair pair = IINTPair(pairAddress);\\n\\n        IERC20 token = IERC20(token_);\\n\\n        token.safeTransfer(pairAddress, amountToken_);\\n\\n        pair.mint(amountToken_, amountAsset_);\\n\\n        emit InitialLiquidityAdded(token_, amountToken_, amountAsset_);\\n\\n        return (amountToken_, amountAsset_);\\n    }\\n\\n    /**\\n     * @dev Distribute fee to treasury and lock contract based on the `treasuryFeeRatio`\\n     * @param from The address that buying the token, address(0) if selling\\n     * @param pair The pair contract When selling\\n     * @param fromToken The token that is being traded\\n     * @param amount The amount of token that is being traded\\n     */\\n    function collectFee(\\n        INTFactory factory,\\n        address assetToken,\\n        address from,\\n        address pair,\\n        address fromToken,\\n        uint256 amount\\n    ) internal {\\n        uint256 treasuryFeeRatio = factory.treasuryFeeRatio();\\n        uint256 treasuryFee = (amount * treasuryFeeRatio) / 100;\\n        address treasury = factory.treasury();\\n\\n        uint256 lockFee = amount - treasuryFee;\\n        address lockFeeTo = IBonding(address(this)).getTokenLocker(fromToken);\\n\\n        if (from == address(0)) {\\n            // Selling\\n            // Transfer treasury fee to treasury directly\\n            IINTPair(pair).transferAsset(treasury, treasuryFee);\\n\\n            // Transfer lock fee to this contract\\n            IINTPair(pair).transferAsset(address(this), lockFee);\\n        } else {\\n            // Buying\\n            // Transfer treasury fee to treasury directly\\n            IERC20(assetToken).safeTransferFrom(from, treasury, treasuryFee);\\n\\n            // Transfer lock fee to this contract\\n            if (from != address(this)) {\\n                // If `assetToken` is weth, skip\\n                IERC20(assetToken).safeTransferFrom(from, address(this), lockFee);\\n            }\\n        }\\n\\n        // Approve to lock contract to deposit lock fee\\n        IERC20(assetToken).forceApprove(lockFeeTo, lockFee);\\n        // Deposit lock fee to lock contract\\n        ILock(lockFeeTo).depositFee(lockFee);\\n    }\\n\\n    function sell(\\n        INTFactory factory,\\n        address assetToken,\\n        uint256 amountIn,\\n        address tokenAddress,\\n        address from,\\n        address to\\n    ) public returns (uint256, uint256) {\\n        if (tokenAddress == address(0)) revert TokenIsZeroAddress();\\n        if (from == address(0)) revert SpenderIsZeroAddress();\\n        if (to == address(0)) revert RecipientIsZeroAddress();\\n        if (amountIn == 0) revert InputAmountIsZero();\\n\\n        address pairAddress = factory.getPair(tokenAddress, assetToken);\\n\\n        IINTPair pair = IINTPair(pairAddress);\\n\\n        IERC20 token = IERC20(tokenAddress);\\n\\n        (uint256 amountOut, uint256 txFee) = quoteSell(\\n            factory,\\n            assetToken,\\n            tokenAddress,\\n            amountIn\\n        );\\n\\n        token.safeTransferFrom(from, pairAddress, amountIn);\\n\\n        pair.transferAsset(to, amountOut);\\n        collectFee(\\n            factory,\\n            assetToken,\\n            address(0),\\n            address(pair),\\n            tokenAddress,\\n            txFee\\n        );\\n\\n        pair.swap(amountIn, 0, 0, amountOut + txFee);\\n\\n        (uint256 reserveA, uint256 reserveB) = IINTPair(pair).getReserves();\\n\\n        emit Sell(\\n            to,\\n            tokenAddress,\\n            amountIn,\\n            amountOut,\\n            txFee,\\n            reserveA,\\n            reserveB,\\n            block.timestamp\\n        );\\n\\n        return (amountIn, amountOut);\\n    }\\n\\n    function buy(\\n        INTFactory factory,\\n        address assetToken,\\n        uint256 amountIn,\\n        address tokenAddress,\\n        address from,\\n        address to\\n    ) public returns (uint256, uint256) {\\n        if (tokenAddress == address(0)) revert TokenIsZeroAddress();\\n        if (from == address(0)) revert SpenderIsZeroAddress();  \\n        if (to == address(0)) revert RecipientIsZeroAddress();\\n        if (amountIn == 0) revert InputAmountIsZero();\\n\\n        address pair = factory.getPair(tokenAddress, assetToken);\\n\\n        (uint256 amountOut, uint256 txFee) = quoteBuy(\\n            factory,\\n            assetToken,\\n            tokenAddress,\\n            amountIn\\n        );\\n        uint256 amount = amountIn - txFee;\\n\\n        IERC20(assetToken).safeTransferFrom(from, pair, amount);\\n\\n        collectFee(\\n            factory,\\n            assetToken,\\n            from,\\n            address(0),\\n            tokenAddress,\\n            txFee\\n        );\\n\\n        IINTPair(pair).transferTo(to, amountOut);\\n\\n        IINTPair(pair).swap(0, amountOut, amount, 0);\\n\\n        (uint256 reserveA, uint256 reserveB) = IINTPair(pair).getReserves();\\n\\n        emit Buy(\\n            to,\\n            tokenAddress,\\n            amountOut,\\n            amount,\\n            txFee,\\n            reserveA,\\n            reserveB,\\n            block.timestamp\\n        );\\n\\n        return (amountIn, amountOut);\\n    }\\n\\n    function graduate(\\n        INTFactory factory,\\n        address assetToken,\\n        address tokenAddress\\n    ) public {\\n        if (tokenAddress == address(0)) revert TokenIsZeroAddress();\\n        address pair = factory.getPair(tokenAddress, assetToken);\\n        uint256 assetBalance = IINTPair(pair).assetBalance();\\n        uint256 balance = IINTPair(pair).balance();\\n        INTPair(pair).transferAsset(address(this), assetBalance);\\n        INTPair(pair).transferTo(address(this), balance);\\n    }\\n}\\n\",\"keccak256\":\"0x6d1d1f25360a725ec333f2ce819e60e6afeacd2ac57109e4fd56a132dd39c10a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60a060408181526004918236101561007d575b50361561005c57906020606492519162461bcd60e51b8352820152602060248201527f44697265637420455448207472616e7366657273206e6f7420616c6c6f7765646044820152fd5b610134546001600160a01b0316330361007157005b516282b42960e81b8152fd5b5f90813560e01c908163017e7e581461228b5750806301b964d21461221b57806301ffc9a7146121c557806302b6b15a146120ef5780630d63237f146120985780630d7a94f6146120345780631083f7611461200a5780631db9be1b14611fe0578063248a9ca314611fb557806326bde5aa14611f455780632f2ff15d14611e985780632f73a9f814611e2857806336568abe14611d975780633744cfdd14611d12578063378dc3dc14611cf25780633b5f193514611cd25780633c0b93aa14611c095780633fc8cef314611bc557806341344d5d14611b985780634189a68e14611b6d578063444aa92f14611af0578063456f5e1514611a1e5780634d860303146119de57806354818605146118d25780635823892a146118265780635bb47808146117b65780635e7b8d95146116ee5780635edb9eb0146116ce578063614025961461167f578063715018a6146115ab57806372641aa61461157957806377796ace1461150957806378a89567146114e957806379ba5097146114635780637adbf973146113785780637c13774b146113215780637dc0d1d0146112f75780637deb6025146112885780637f7ee431146111a95780638da5cb5b146111805780638f876f8c1461108b57806391d1485414611044578063a217fddf14611029578063a240de0314610fff578063a3e01ce314610ec3578063a8b3820514610ea3578063ae29d56814610e71578063b4f2e8b814610df7578063b758ba8814610dbc578063c17ac35a14610d64578063c1ba290714610d44578063c45a015514610d1a578063c75ed64414610cbe578063c78418b914610c82578063c8379f811461095d578063d547741f14610921578063d723a3d2146108e4578063d98b2f5c14610817578063ddca3f43146107f7578063df1dcaa91461078b578063e30c397814610762578063e77772fe14610738578063e84ca7cb146106f9578063ee3cd15b14610649578063f2fde38b146105db578063f5dab71114610494578063f943ce071461042e578063fa1653bd146103ca5763feab61eb036100125791346103c657816003193601126103c65761039561240d565b9161039e612a9d565b600360ff8416116103b957836103b66024358561554e565b80f35b5163e82a532960e01b8152fd5b8280fd5b5082903461042b57602036600319011261042b576001600160a01b036103ee6122b1565b16815261013560205260ff600b848320015416916003831015610418576020836002865191148152f35b634e487b7160e01b825260219052602490fd5b80fd5b509190346103c65760203660031901126103c65781359161044d612a9d565b82156104865750816020917f51dfcc99f9c590c7a4bcf74fc4e9ae6b407ec6689eb354e3215563a0b5bcd00d9361013c5551908152a180f35b90516338c51d2560e21b8152fd5b503461042b57602036600319011261042b576001600160a01b03806104b76122b1565b1682526101356020528282208181541693826001830154169280600284015416906003840154168784016104ea90612595565b6104f660068601612595565b9061050360078701612595565b9261051060088801612595565b9461051d60098901612595565b9661052a600a8a01612595565b98600b015460ff169981519c8d5260208d01528b015260608a01526101608060808b0152890161055991612657565b88810360a08a015261056a91612657565b87810360c089015261057b91612657565b86810360e088015261058c91612657565b85810361010087015261059e91612657565b8481036101208601526105b091612657565b9160038210156105c857508293506101408301520390f35b634e487b7160e01b815260218552602490fd5b503461042b57602036600319011261042b576105f56122b1565b6105fd612a9d565b609780546001600160a01b0319166001600160a01b039283169081179091556065549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b503461042b578160031936011261042b576106706106656122cb565b309033908635614116565b61013454909291506001600160a01b0316803b156106f5578180916024865180948193632e1a7d4d60e01b8352888b8401525af180156106eb576106dc575b5080808093335af16106bf612f9d565b50156106cf576020905160018152f35b5163b12d13eb60e01b8152fd5b6106e5906122e1565b5f6106af565b84513d84823e3d90fd5b5080fd5b5090346106f55760203660031901126106f55760209160ff9082906001600160a01b036107246122b1565b168152610137855220541615159051908152f35b5090346106f557816003193601126106f55761012f5490516001600160a01b039091168152602090f35b5090346106f557816003193601126106f55760975490516001600160a01b039091168152602090f35b509190346103c65760203660031901126103c6578135916107aa612a9d565b6301e133808311156107e95750816020917fbeaba78e9fea37c532e9c93af5e8e120a48902131aeb7d3146e3ca49dec45a239361013a5551908152a180f35b905163abf20e8f60e01b8152fd5b5090346106f557816003193601126106f557602090610132549051908152f35b5082346106f557826003193601126106f557826108326122b1565b61012e5461013454835163a6b8918760e01b81526001600160a01b03928316958101958652908216602086015291166040840152602435606084015291829081906080015b038173__$57bf2248a10612b83e4be7103a658af84f$__5af49081156108da5782916108ab575b5082519182526020820152f35b90506108cd9150823d84116108d3575b6108c58183612374565b81019061311f565b8361089e565b503d6108bb565b83513d84823e3d90fd5b5090346106f55760203660031901126106f55760209160ff9082906001600160a01b0361090f6122b1565b16815261013785522054169051908152f35b509190346103c657806003193601126103c6576103b6913561095860016109466122cb565b9383875260fb60205286200154612895565b612a28565b5091346103c6576101803660031901126103c6576109796122b1565b6109816122cb565b906044356001600160a01b0381168103610c7e5760a435916001600160a01b0383168303610c7a5760c435926001600160a01b0384168403610c765760e435926001600160a01b0384168403610c725761012435936001600160a01b0385168503610c6e5789549760ff8960081c16159889809a610c61575b8015610c4a575b610a0a9061589d565b60ff1981166001178c5589610c39575b506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690861603610c2b575089549560ff8760081c161596878098610c1e575b8015610c07575b610a739061589d565b60ff1981166001178c5587610bf6575b50610a9d60ff8c5460081c16610a9881615900565b615900565b610aa633612c3c565b8a5497610ace60ff8a60081c16610abc81615900565b610ac581615900565b60018055615900565b61013480546001600160a01b03199081166001600160a01b039889161790915561012e805482169288169290921790915561012f8054821692871692909217909155610130805482169286169290921790915561012d8054821692851692909217909155606435610132556084356101315561013380548216928416929092179091556101043561013a5561013b8054909116929091169190911790556101443561013c556101643561013d55610bbf575b50610b89575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b61ff00191683557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986020835160018152a15f610b80565b61ffff1916610101178b555f610a83565b50303b158015610a6a575060ff8116600114610a6a565b50600160ff821610610a63565b8951633bb31a5160e21b8152fd5b61ffff1916610101178b555f610a1a565b50303b158015610a01575060ff8116600114610a01565b50600160ff8216106109fa565b8980fd5b8880fd5b8780fd5b8680fd5b8580fd5b5090346106f55760203660031901126106f5576020916001600160a01b0390829082610cac6122b1565b16815261013585522054169051908152f35b509190346103c65760203660031901126103c657813591610cdd612a9d565b61013c5483106104865750816020917fc598615f3cd2c393145f278de5a6921fd815849d1ee5aab7b66bdda0efb33ada9361013d5551908152a180f35b5090346106f557816003193601126106f55761012e5490516001600160a01b039091168152602090f35b5090346106f557816003193601126106f55760209061013d549051908152f35b5090346106f55760203660031901126106f55780602092610d836122b1565b818351610d8f81612308565b526001600160a01b031681526101378452208151919060ff90610db184612308565b541680925251908152f35b5090346106f557816003193601126106f557602090517f62229496573be0b0846a2fb48a94de962b501adb0b8eaf7f99924b10a81a19fe8152f35b509190346103c657806003193601126103c6577fc8242dc5446855370b781abbfc5d882af1d1a3cc29143216aba3558feb0ce9259135610e356122cb565b610e3d612a9d565b61013282905561012d80546001600160a01b0319166001600160a01b0392909216918217905582519182526020820152a180f35b5090346106f55760203660031901126106f5578060209260ff610e9261240d565b168152610139845220549051908152f35b5090346106f557816003193601126106f55760209061013a549051908152f35b5091346103c657610ed336612523565b94610ee598969894919493929361267c565b6001600160a01b03898116808c52610137602052888c208054919b909a909291610f119060ff16614ffa565b60ff16600203610ff1578c8a610f26856155f1565b9160028152610139602052205411610fe3575092610fb495928b7f4e8e1b96afa9116446f71ff323ac93786664fcbea87475ece33519357750f7909b9996938b99968f9c8d8460609f5261013560205220908060028160038501541693610fa88861013498610fa08c878c54168861012d54163091612e53565b873091612e53565b01541693541692615050565b92915092805460ff610fc781831661500c565b169060ff1916179055805192600284526020840152820152a280f35b8951639dc93e9f60e01b8152fd5b8951636dfb3ae160e01b8152fd5b5090346106f557816003193601126106f5576101335490516001600160a01b039091168152602090f35b5090346106f557816003193601126106f55751908152602090f35b5091346103c657816003193601126103c6578160209360ff926110656122cb565b9035825260fb86528282206001600160a01b039091168252855220549151911615158152f35b5060c036600319011261042b576001600160401b0383358181116103c6576110b690369086016123b0565b9360243582811161117c576110ce90369083016123b0565b604435838111611178576110e5903690840161241d565b91606435848111610c7e576110fd90369083016123b0565b93608435818111610c7a5761111590369084016123b0565b9560a43591821161042b575091611139611148969492611174999694369101612485565b94611142612d09565b33615960565b6001805592516001600160a01b0392831681529116602082015260408101919091529081906060820190565b0390f35b8480fd5b8380fd5b5090346106f557816003193601126106f55760655490516001600160a01b039091168152602090f35b5082346106f5576101a03660031901126106f5576111c56122b1565b6001600160401b0390602435828111611178576111e590369085016123b0565b604435838111610c7e576111fc90369086016123b0565b606435848111610c7a57611213903690870161241d565b91608435858111610c765761122b90369088016123b0565b9360a435868111610c725761124390369089016123b0565b9560c435908111610c72576103b69761125e91369101612485565b61126661267c565b6101843596610164359661014435966101243596610104359660e43596614aa8565b503461042b578160031936011261042b576112a16122cb565b9060018060a01b038216815261013560205260ff600b8483200154169060038210156105c857506001036112e9576112e09060209333913391356141ff565b50505160018152f35b50516305e1dfe360e11b8152fd5b5090346106f557816003193601126106f55761013b5490516001600160a01b039091168152602090f35b5091346103c65760203660031901126103c65735610136805482101561117c576020935260018060a01b03907f39da2db355130acf428d669fbf1c14faa9d51399a25b793fc254bbbde66f02e20154169051908152f35b5090346106f557602090816003193601126103c6576113956122b1565b9061139e612a9d565b61013454815163fc57d4df60e01b81526001600160a01b0391821687820152921691838160248188875af190811561145957859161142c575b501561141d5761013b80546001600160a01b03191683179055519081529192507f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa91a180f35b51639589a27d60e01b81528490fd5b90508381813d8311611452575b6114438183612374565b8101031261117857515f6113d7565b503d611439565b82513d87823e3d90fd5b509190346103c657826003193601126103c657609754336001600160a01b039091160361149457826103b633612c3c565b906020608492519162461bcd60e51b8352820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152fd5b5090346106f557816003193601126106f557602090610136549051908152f35b5090346106f55760203660031901126106f55760207f0454b4498edcb0a2c7058cfd107bb0e6551b3820f891c725db307ed66e740f20916115486122b1565b611550612a9d565b61013380546001600160a01b0319166001600160a01b039290921691821790559051908152a180f35b5090346106f55736600319011261042b576103b66115956122b1565b61159d6122cb565b906115a6612a9d565b6149c8565b5090346106f557816003193601126106f5576115c5612a9d565b60655482906001600160a01b03906115de90821661299e565b6001600160601b0360a01b8060975416609755606554908116606555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a381805260fb60205280822060205260ff81832054161561163d575080f35b60fb6020528082206020528120600160ff198254161790553381807f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a480f35b5091346103c65760203660031901126103c6577fedbbbd0f3b9ac5d8f4d9142fe0b31c73d786619eab0d7f8df600fe84282a4d439160209135906116c1612a9d565b816101315551908152a180f35b5090346106f557816003193601126106f557602090610138549051908152f35b5060e036600319011261042b576117036122b1565b926001600160401b039060243582811161117c5761172490369083016123b0565b6044358381116111785761173b90369084016123b0565b90606435848111610c7e57611753903690850161241d565b92608435858111610c7a5761176b90369083016123b0565b9460a435818111610c765761178390369084016123b0565b9660c43591821161042b5750916117a861117499969492611148989694369101612485565b956117b1612d09565b615960565b5090346106f55760203660031901126106f55760207f1edf3afd4ac789736e00d216cd88be164ddcef26a6eedcc30cdb0cb62f3741b1916117f56122b1565b6117fd612a9d565b61012e80546001600160a01b0319166001600160a01b039290921691821790559051908152a180f35b509190346103c657806003193601126103c6576001600160401b039180358381116111785761185890369083016124f3565b9093602435908111610c7e5761187190369084016124f3565b92909361187c612a9d565b8383036118c5575050845b818110611892578580f35b806118bf6118ab6118a6600194868a614a84565b614a94565b6118b96118a684888a614a84565b906149c8565b01611887565b516305e8333d60e11b8152fd5b5091346103c6576118e236612523565b946118f498969894919493929361267c565b6001600160a01b03898116808c52610137602052888c208054919b909a9092916119209060ff16614ffa565b60ff16600303610ff1578c8a611935856155f1565b9160038152610139602052205411610fe35750926119af95928b7f4e8e1b96afa9116446f71ff323ac93786664fcbea87475ece33519357750f7909b9996938b99968f9c8d8460609f5261013560205220908060028160038501541693610fa88861013498610fa08c878c54168861012d54163091612e53565b92915092805460ff6119c281831661500c565b169060ff1916179055805192600384526020840152820152a280f35b5090346106f55760203660031901126106f5576020916001600160a01b0390600390839083611a0b6122b1565b1681526101358652200154169051908152f35b5091346103c6576101003660031901126103c657611a3a6122b1565b926001600160401b036024358181116103c657611a5a90369085016123b0565b9260443582811161117c57611a7290369083016123b0565b60643583811161117857611a89903690840161241d565b91608435848111610c7e57611aa190369083016123b0565b9360a435818111610c7a57611ab990369084016123b0565b9560c43591821161042b575091611ade61117499969492611148989694369101612485565b94611ae7612d09565b60e43596612d6c565b509160203660031901126103c657611b066122b1565b610134549093906001600160a01b0316803b156106f5578190845193848092630d0e30db60e41b825234905af1908115611b625750926112e091602094611b53575b5033903090346141ff565b611b5c906122e1565b5f611b48565b8351903d90823e3d90fd5b503461042b578160031936011261042b57506112e0602092611b8d6122cb565b903391339135614116565b5090346106f55760203660031901126106f557602090611bbe611bb96122b1565b6155f1565b9051908152f35b5090346106f557816003193601126106f557517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5091346103c65760e03660031901126103c6576001600160401b039281358481116106f557611c3b90369084016123b0565b936024358181116103c657611c5390369085016123b0565b9260443582811161117c57611c6b903690830161241d565b9060643583811161117857611c8390369083016123b0565b92608435818111610c7e57611c9b90369084016123b0565b9460a43591821161042b575091611cbf611148969492611174999694369101612485565b93611cc8612d09565b60c4359533612d6c565b5090346106f557816003193601126106f55760209061013c549051908152f35b5090346106f557816003193601126106f557602090610131549051908152f35b5090346106f55760203660031901126106f55782356001600160401b0381116103c657611d4290369085016124f3565b9093611d4c612a9d565b6003928383036118c5575050825b60ff811683811015611d935790611d89611d8e92611d82611d7a84614ffa565b91868a614a84565b359061554e565b61500c565b611d5a565b8480f35b5082346106f557826003193601126106f557611db16122cb565b90336001600160a01b03831603611dcd57906103b69135612a28565b608490602085519162461bcd60e51b8352820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b5090346106f55760203660031901126106f55760207fcf4be1c851767114c1f4b298dc84eab48d103473908393f6d408c82ba7cda0e891611e676122b1565b611e6f612a9d565b61012f80546001600160a01b0319166001600160a01b039290921691821790559051908152a180f35b5091346103c657816003193601126103c6573590611eb46122cb565b9082845260fb602052611ecc60018286200154612895565b82845260fb60209081528185206001600160a01b039093168086529290528084205460ff1615611efa578380f35b82845260fb6020528084208285526020528320600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8480a45f80808380f35b5090346106f55760203660031901126106f55760207fbdaa8f7ade01473981aef419539e6c190d409f50b144a7a796efd2777607920c91611f846122b1565b611f8c612a9d565b61013480546001600160a01b0319166001600160a01b039290921691821790559051908152a180f35b5091346103c65760203660031901126103c6578160209360019235815260fb85522001549051908152f35b5090346106f557816003193601126106f5576101305490516001600160a01b039091168152602090f35b5090346106f557816003193601126106f5576101345490516001600160a01b039091168152602090f35b5082346106f557826003193601126106f5578261204f6122b1565b61012e54610134548351631d486c9760e21b81526001600160a01b0392831695810195865290821660208601529116604084015260243560608401529182908190608001610877565b5091346103c65760203660031901126103c65735610138805482101561117c576020935260018060a01b03907ff79a63dcec80ed75c82f36161f17b9c2f407860160383a7be0a0ee7962c527ae0154169051908152f35b5082346106f5576101803660031901126106f5576001600160401b03813581811161117c5761212190369084016123b0565b906024358181116111785761213990369085016123b0565b604435828111610c7e57612150903690860161241d565b606435838111610c7a5761216790369087016123b0565b91608435848111610c765761217f90369088016123b0565b9360a435908111610c76576103b69661219a91369101612485565b946121a361267c565b610164359561014435956101243595610104359560e4359560c4359533614aa8565b5091346103c65760203660031901126103c657359063ffffffff60e01b82168092036103c65760209250637965db0b60e01b821491821561220a575b50519015158152f35b6301ffc9a760e01b1491505f612201565b5090346106f55760203660031901126106f55760207f3587ea62a24fc6959886ef88a458920ef0762b7ecbae1e87892c731869362d699161225a6122b1565b612262612a9d565b61013080546001600160a01b0319166001600160a01b039290921691821790559051908152a180f35b9050346106f557816003193601126106f55761012d546001600160a01b03168152602090f35b600435906001600160a01b03821682036122c757565b5f80fd5b602435906001600160a01b03821682036122c757565b6001600160401b0381116122f457604052565b634e487b7160e01b5f52604160045260245ffd5b602081019081106001600160401b038211176122f457604052565b604081019081106001600160401b038211176122f457604052565b606081019081106001600160401b038211176122f457604052565b608081019081106001600160401b038211176122f457604052565b90601f801991011681019081106001600160401b038211176122f457604052565b6001600160401b0381116122f457601f01601f191660200190565b81601f820112156122c7578035906123c782612395565b926123d56040519485612374565b828452602083830101116122c757815f926020809301838601378301015290565b6001600160401b0381116122f45760051b60200190565b6004359060ff821682036122c757565b81601f820112156122c757803591612434836123f6565b926124426040519485612374565b808452602092838086019260051b8201019283116122c7578301905b82821061246c575050505090565b813560ff811681036122c757815290830190830161245e565b9080601f830112156122c757604051916001600160401b0360808401818111858210176122f4576040528360808301928484116122c75780915b8483106124cf5750505050505090565b82358481116122c7576020916124e888849386016123b0565b8152019201916124bf565b9181601f840112156122c7578235916001600160401b0383116122c7576020808501948460051b0101116122c757565b60e09060031901126122c7576004356001600160a01b03811681036122c757906024359060443590606435906084359060a4359060c43590565b90600182811c9216801561258b575b602083101461257757565b634e487b7160e01b5f52602260045260245ffd5b91607f169161256c565b9060405191825f8254926125a88461255d565b9081845260019485811690815f1461261357506001146125d3575b50506125d192500383612374565b565b909391505f52602090815f20935f915b8183106125fb5750506125d193508201015f806125c3565b855488840185015294850194879450918301916125e3565b9150506125d194506020925060ff191682840152151560051b8201015f806125c3565b5f5b8381106126475750505f910152565b8181015183820152602001612638565b9060209161267081518092818552858086019101612636565b601f01601f1916010190565b335f9081527f08f584bb5334faafa280854191c286de8f907d6af8dd5e653110c56d426e0054602090815260408083205490927f62229496573be0b0846a2fb48a94de962b501adb0b8eaf7f99924b10a81a19fe9160ff16156126df5750505050565b6126e833612b41565b918451906126f582612359565b6042825284820192606036853782511561288157603084538251906001918210156128815790607860218501536041915b818311612814575050506127d25760486127ce9386936127b2936127a3985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a86015261277a815180928c603789019101612636565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190612636565b01036028810187520185612374565b5192839262461bcd60e51b845260048401526024830190612657565b0390fd5b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f8116601081101561286d576f181899199a1a9b1b9c1cb0b131b232b360811b901a6128448587612b1c565b5360041c928015612859575f19019190612726565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b5f9080825260209060fb8252604092838120338252835260ff8482205416156128be5750505050565b6128c733612b41565b918451906128d482612359565b6042825284820192606036853782511561288157603084538251906001918210156128815790607860218501536041915b818311612959575050506127d25760486127ce9386936127b2936127a3985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a86015261277a815180928c603789019101612636565b909192600f8116601081101561286d576f181899199a1a9b1b9c1cb0b131b232b360811b901a6129898587612b1c565b5360041c928015612859575f19019190612905565b6001600160a01b03165f8181527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205490919060ff166129e2575050565b81805260fb602052604082208183526020526040822060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8180a4565b905f9180835260fb602052604083209160018060a01b03169182845260205260ff604084205416612a5857505050565b80835260fb602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b6065546001600160a01b03163303612ab157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b81810292918115918404141715612b0857565b634e487b7160e01b5f52601160045260245ffd5b908151811015612b2d570160200190565b634e487b7160e01b5f52603260045260245ffd5b60405190612b4e8261233e565b602a8252602082016040368237825115612b2d57603090538151600190811015612b2d57607860218401536029905b808211612bd1575050612b8d5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015612c28576f181899199a1a9b1b9c1cb0b131b232b360811b901a612c008486612b1c565b5360041c918015612c14575f190190612b7d565b60245f634e487b7160e01b81526011600452fd5b60245f634e487b7160e01b81526032600452fd5b6065546001600160a01b0390612c5390821661299e565b6001600160601b0360a01b8060975416609755816065549316918280928516176065555f93167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a381805260fb6020526040822081835260205260ff60408320541615612cc0575050565b81805260fb6020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4565b600260015414612d1a576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b91908203918211612b0857565b939096949195926101325496878710612e0257610134546040516370a0823160e01b81523360048201526001600160a01b039182169a91906020816024818f5afa8015612e48578a915f91612e14575b5010612e025789612de29b81612de9575b505050612ddc33993399612d5f565b9661316f565b9192909190565b612dfa9261012d5416903390612e53565b5f8981612dcd565b604051632ca2f52b60e11b8152600490fd5b91506020823d8211612e40575b81612e2e60209383612374565b8101031261042b57508990515f612dbc565b3d9150612e21565b6040513d5f823e3d90fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648201929092526125d191612e9f82608481015b03601f198101845283612374565b612eb1565b519081151582036122c757565b604051612f0e916001600160a01b0316612eca82612323565b5f806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af1612f08612f9d565b91612fcc565b8051828115918215612f7e575b5050905015612f275750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b83809293500103126122c75781612f959101612ea4565b80825f612f1b565b3d15612fc7573d90612fae82612395565b91612fbc6040519384612374565b82523d5f602084013e565b606090565b9192901561302e5750815115612fe0575090565b3b15612fe95790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156130415750805190602001fd5b60405162461bcd60e51b8152602060048201529081906127ce906024830190612657565b51906001600160a01b03821682036122c757565b805115612b2d5760200190565b805160011015612b2d5760400190565b9081518082526020808093019301915f5b8281106130b5575050505090565b83516001600160a01b0316855293810193928101926001016130a7565b90916130e96130fe93606084526060840190613096565b91600160208201526040818403910152612657565b90565b811561310b570490565b634e487b7160e01b5f52601260045260245ffd5b91908260409103126122c7576020825192015190565b6001600160a01b0391821681529181166020830152604082019290925291811660608301529182166080820152911660a082015260c00190565b9161318495939160209b999a9897959361364d565b61012e54610134546040516364e329cb60e11b81526001600160a01b0380851660048301529182166024820152979294925f929091899160449183918691165af196871561362a5781976135ee575b506040516131e08161233e565b600281526040366020830137610134546001600160a01b031661320282613079565b526001600160a01b03851661321682613086565b526101335460405163c45a015560e01b815290602090829060049082906001600160a01b03165afa9081156134f95783916135ac575b50613287916020916040519160018484015283835261326a83612323565b85604051809681958294632a422c2b60e21b8452600484016130d2565b03926001600160a01b03165af1801561356857613573575b506001600160a01b0384163b1561042b57604051631e59818360e31b81526001600160a01b03888116600483015282908290602490829084908a165af1801561356857613559575b509061013c54670de0b6b3a764000081818102048114821517156135455761013b546101345460405163fc57d4df60e01b81526001600160a01b039182166004820152939291602091859160249183918a91165af191821561353a578592613504575b613355935002613101565b61012e54610134546101315460408051630afbf7f360e01b81526001600160a01b03948516600482015292841660248401529288166044830152606482015260848101929092528160a48173__$57bf2248a10612b83e4be7103a658af84f$__5af480156134f9576134db575b506001600160a01b038481168084526101356020908152604080862060020180546001600160a01b031916948c1694851790556101365481518181529283018790524291830191909152989291907f58d1495ede629d89cfe4c00a5ad620a9ba231de4b1a5040c7b355d43092ff86b90606090a383613445575b50505050929190565b61012e546101345460408051633c529ea760e01b81529690948794859461348394929391928b92916001600160a01b03918216911660048801613135565b038173__$57bf2248a10612b83e4be7103a658af84f$__5af49081156134cf57506134b1575b80808061343c565b6134c99060403d6040116108d3576108c58183612374565b506134a9565b604051903d90823e3d90fd5b6134f39060403d6040116108d3576108c58183612374565b506133c2565b6040513d85823e3d90fd5b91506020833d602011613532575b8161351f60209383612374565b810103126122c75761335592519161334a565b3d9150613512565b6040513d87823e3d90fd5b634e487b7160e01b84526011600452602484fd5b613562906122e1565b5f6132e7565b6040513d84823e3d90fd5b6020813d6020116135a4575b8161358c60209383612374565b810103126106f55761359d90613065565b505f61329f565b3d915061357f565b90506020813d6020116135e6575b816135c760209383612374565b810103126103c657613287916135de602092613065565b91509161324c565b3d91506135ba565b9096506020813d602011613622575b8161360a60209383612374565b81010312610c7a5761361b90613065565b955f6131d3565b3d91506135fd565b50604051903d90823e3d90fd5b818110613642575050565b5f8155600101613637565b93906136e595939796926020916136d35f60018060a01b0361012f5416926136aa602b6040518361368782955180928c8086019101612636565b81016a08189e48125b9d1953995d60aa1b8a82015203600b810184520182612374565b610131546040516334f359f960e01b8152608060048201529b8c96879586946084860190612657565b84810360031901602486015290612657565b90604483015230606483015203925af1948515612e48575f956140da575b50610130546101345461013a546040516309394e6160e11b81526001600160a01b03808a16600483015292831660248201523060448201526064810191909152969889979590929091602091879160849183915f91165af1948515612e48575f9561409e575b50835191602085015193606060408701519601519660405198896101808101106001600160401b036101808c0111176122f4576101808a0160405260018060a01b0316895260018060a01b038a1660208a01525f60408a015260018060a01b03166060890152608088015260a087015260c086015260e0850152610100840152610120830152610140820152600161016082015260018060a01b0382165f5261013560205260405f2060018060a01b038251166001600160601b0360a01b8254161781556001810160018060a01b036020840151166001600160601b0360a01b8254161790556002810160018060a01b036040840151166001600160601b0360a01b8254161790556003810160018060a01b036060840151166001600160601b0360a01b82541617905560808201518051906001600160401b0382116122f45781906138b8600485015461255d565b601f811161406b575b50602090601f8311600114613ffd575f92613ff2575b50508160011b915f199060031b1c19161760048201555b60a08201518051906001600160401b0382116122f457600160401b82116122f4576020906005840154836005860155808410613f9e575b500190600583015f5260205f20905f5b8160051c8110613f5f5750601f1981168103613f11575b50505060c08201518051906001600160401b0382116122f4578190613974600685015461255d565b601f8111613ede575b50602090601f8311600114613e70575f92613e65575b50508160011b915f199060031b1c19161760068201555b60e08201518051906001600160401b0382116122f45781906139cf600785015461255d565b601f8111613e32575b50602090601f8311600114613dc4575f92613db9575b50508160011b915f199060031b1c19161760078201555b6101008201518051906001600160401b0382116122f4578190613a2b600885015461255d565b601f8111613d86575b50602090601f8311600114613d18575f92613d0d575b50508160011b915f199060031b1c19161760088201555b6101208201518051906001600160401b0382116122f4578190613a87600985015461255d565b601f8111613cda575b50602090601f8311600114613c6c575f92613c61575b50508160011b915f199060031b1c19161760098201555b600a81016101408301518051906001600160401b0382116122f457613ae2835461255d565b601f8111613c26575b50602090601f8311600114613bbb579180600b949261016096945f92613bb0575b50508160011b915f199060031b1c19161790555b019101516003811015613b9c5760ff80198354169116179055610136805490600160401b8210156122f45760018201808255821015612b2d575f527f39da2db355130acf428d669fbf1c14faa9d51399a25b793fc254bbbde66f02e20180546001600160a01b0319166001600160a01b03909216919091179055565b634e487b7160e01b5f52602160045260245ffd5b015190505f80613b0c565b90601f19831691845f5260205f20925f5b818110613c0e57509260019285926101609896600b989610613bf6575b505050811b019055613b20565b01515f1960f88460031b161c191690555f8080613be9565b92936020600181928786015181550195019301613bcc565b613c5190845f5260205f20601f850160051c81019160208610613c57575b601f0160051c0190613637565b5f613aeb565b9091508190613c44565b015190505f80613aa6565b9250600984015f5260205f20905f935b601f1984168510613cbf576001945083601f19811610613ca7575b505050811b016009820155613abd565b01515f1960f88460031b161c191690555f8080613c97565b81810151835560209485019460019093019290910190613c7c565b613d0790600986015f5260205f20601f850160051c81019160208610613c5757601f0160051c0190613637565b5f613a90565b015190505f80613a4a565b9250600884015f5260205f20905f935b601f1984168510613d6b576001945083601f19811610613d53575b505050811b016008820155613a61565b01515f1960f88460031b161c191690555f8080613d43565b81810151835560209485019460019093019290910190613d28565b613db390600886015f5260205f20601f850160051c81019160208610613c5757601f0160051c0190613637565b5f613a34565b015190505f806139ee565b9250600784015f5260205f20905f935b601f1984168510613e17576001945083601f19811610613dff575b505050811b016007820155613a05565b01515f1960f88460031b161c191690555f8080613def565b81810151835560209485019460019093019290910190613dd4565b613e5f90600786015f5260205f20601f850160051c81019160208610613c5757601f0160051c0190613637565b5f6139d8565b015190505f80613993565b9250600684015f5260205f20905f935b601f1984168510613ec3576001945083601f19811610613eab575b505050811b0160068201556139aa565b01515f1960f88460031b161c191690555f8080613e9b565b81810151835560209485019460019093019290910190613e80565b613f0b90600686015f5260205f20601f850160051c81019160208610613c5757601f0160051c0190613637565b5f61397d565b5f925f5b601f19831683038110613f3157505060051c01555f808061394c565b90936020613f566001928460ff895116919060ff809160031b9316831b921b19161790565b95019101613f15565b5f805b60208110613f77575083820155600101613935565b855190959160019160209160ff60038a901b81811b199092169216901b1792019501613f62565b613fcc90600586015f52601f845f209181871680613fd2575b500160051c810190601f860160051c01613637565b5f613925565b5f199081848a0160051c86010191825491890360031b1c1690555f613fb7565b015190505f806138d7565b9250600484015f5260205f20905f935b601f1984168510614050576001945083601f19811610614038575b505050811b0160048201556138ee565b01515f1960f88460031b161c191690555f8080614028565b8181015183556020948501946001909301929091019061400d565b61409890600486015f5260205f20601f850160051c81019160208610613c5757601f0160051c0190613637565b5f6138c1565b9094506020813d6020116140d2575b816140ba60209383612374565b810103126122c7576140cb90613065565b935f613769565b3d91506140ad565b9094506020813d60201161410e575b816140f660209383612374565b810103126122c75761410790613065565b935f613703565b3d91506140e9565b6001600160a01b038083165f9081526101356020526040808220600b015490979691959394939060ff1660038110156141eb576001036141da57829161417e9189959461012e54169361013454169486519788968796627e8ae960e01b885260048801613135565b038173__$57bf2248a10612b83e4be7103a658af84f$__5af49384156141cf5782946141ab575b50509190565b6141c693945080919250903d106108d3576108c58183612374565b91905f806141a5565b51913d9150823e3d90fd5b87516305e1dfe360e11b8152600490fd5b634e487b7160e01b87526021600452602487fd5b61012e546101345460408051633c529ea760e01b815273__$57bf2248a10612b83e4be7103a658af84f$__98909790965f959294899485946142559493928a926001600160a01b03908116911660048801613135565b0381885af4801561362a57819482916149a3575b509394614275836155f1565b61013d54111561428457505050565b6001600160a01b038316825261013560205260408220600b8101805460ff16600381101561498f5760021461497d5760028201805460405163c66f245560e01b815294919391906001600160a01b0316602086600481845afa9586156148e2578796614948575b5090602060049392604051948580926316d3df1560e31b82525afa9283156148e2578793614914575b5061012e54610134546001600160a01b039081169116823b15610c72579060648992604051948593849263e743240d60e01b84526004840152602483015260018060a01b038d1660448301525af480156148e257614901575b506001600160a01b0387163b15610c7e5760405163f1b50c1d60e01b81528681600481836001600160a01b038d165af180156148e2579087916148ed575b505090614424939291604080516143c18161233e565b6002815281366020830137610134546001600160a01b03166143e282613079565b526001600160a01b038a166143f682613086565b5260018060a01b0361013354168251808099819463237c65f960e01b83528660048401526044830190613096565b6001602483015203915afa9485156148e2578795614899575b50600301546001600160a01b031694853b15610c7a5760405163179a694160e11b81526001600160a01b03861660048201528781602481838b5af1801561488e5789918991614877575b50506145a2916145b560018060a01b036101345416945f94858094614567604051916144b28361233e565b6002835260403660208501378a6144c884613079565b526001600160a01b0389166144dc84613086565b52614554604051966144ed8861233e565b6002885260403660208a01378261450389613079565b528061450e89613086565b526040519a61451c8c61233e565b60028c5260403660208e0137836145328d613079565b528161453d8d613086565b52610133546001600160a01b03908116911661542b565b610133546001600160a01b03168b61542b565b6145c460018060a01b0361013354169460405198899788968795623c7cd360e91b87526001600488015260e0602488015260e4870190613096565b600319938487830301604488015261501d565b9184830301606485015261501d565b8260848301523060a48301524260c483015203925af190811561356857829083926147cc575b50806145f86145fe92613079565b50613086565b5061461381886001600160a01b03891661542b565b863b156106f557604051906340519a5360e01b825260048201528181602481838b5af18015613568576147bd575b506040516370a0823160e01b80825230600483015296906020816024816001600160a01b038e165afa9081156134f957839161478b575b50604051978852306004890152602088602481875afa9283156134cf5792614737575b7f381d54fa425631e6266af114239150fae1d5db67bb65b4fa9ecc65013107e07e97508061471d575b5050806146fd575b5050805460ff1916600217905580546001600160a01b0319166001600160a01b0392831690811790915593169180a3565b61012d54614716926001600160a01b03909116906153f2565b5f806146cc565b614730916001600160a01b038b166153f2565b5f806146c4565b91506020873d602011614783575b8161475260209383612374565b810103126122c7577f381d54fa425631e6266af114239150fae1d5db67bb65b4fa9ecc65013107e07e96519161469b565b3d9150614745565b90506020813d6020116147b5575b816147a660209383612374565b810103126122c757515f614678565b3d9150614799565b6147c6906122e1565b5f614641565b9150503d8083833e6147de8183612374565b8101906040818303126103c6578051916001600160401b03831161117c5780601f84840101121561117c578282015190614817826123f6565b936148256040519586612374565b828552602085019160208460051b838701010111610c7e57602081850101915b60208460051b83870101018310614867575050505060200151906145fe6145ea565b8251815260209283019201614845565b6148829192506122e1565b610c7a5787875f614487565b6040513d8a823e3d90fd5b9094506040813d6040116148da575b816148b560409383612374565b81010312610c7a576148d260206148cb83613065565b9201612ea4565b50935f61443d565b3d91506148a8565b6040513d89823e3d90fd5b6148f6906122e1565b610c7e57855f6143ab565b61490d909691966122e1565b945f61436d565b9092506020813d602011614940575b8161493060209383612374565b81010312610c7a5751915f614314565b3d9150614923565b9095506020813d602011614975575b8161496460209383612374565b81010312610c7a57519460206142eb565b3d9150614957565b604051633a2cc0e960e11b8152600490fd5b634e487b7160e01b85526021600452602485fd5b90506149bf91945060403d6040116108d3576108c58183612374565b9390935f614269565b6001600160a01b0391821691905f908315614a72578216918282526101356020526003604083200154168015614a6057803b156106f557818091602460405180948193631bf3091560e11b83528960048401525af1801561356857907f7363600ac233591b10e402fcff7bdaf80647430d9e03638e669d4834950433229291614a51575b5080a3565b614a5a906122e1565b5f614a4c565b60405163ab54b81360e01b8152600490fd5b60405163e04bb5d960e01b8152600490fd5b9190811015612b2d5760051b0190565b356001600160a01b03811681036122c75790565b9594939291906020999d9b979c9860805261013b545f9a8b91602460018060a01b036101345416604051948593849263fc57d4df60e01b8452600484015260018060a01b03165af18015614fef578b90614fb7575b614b0a9150608051612af5565b808060011b0460021481151715614fa35760018b5261013960205260408b205490670de0b6b3a764000091828102928184041490151715614f8f5760011b10614f7d57614b569661364d565b6001600160a01b0381168452610135602052604080852090519891959190614b7d8a61233e565b60028a5260403660208c0137610134546001600160a01b0316614b9f8b613079565b526001600160a01b038716614bb38b613086565b526101335460405163c45a015560e01b815290602090829060049082906001600160a01b03165afa9081156148e2578791614f37575b50614c2698999a60209160405191600184840152838352614c0983612323565b89604051809d81958294632a422c2b60e21b8452600484016130d2565b03926001600160a01b03165af1978815614f2c578698614ef0575b50600b8101805460ff19166002908117909155810180546001600160a01b0319166001600160a01b038a8116919091179091556003909101541696873b15610c7e5760405163179a694160e11b81526001600160a01b03821660048201528681602481838d5af180156148e257614edd575b50604051614cc081612308565b600181526001600160a01b0388168752610137602052604087209051815460ff191660ff9190911617905561013854600160401b8110156122f457600181018061013855811015612b2d576101385f527ff79a63dcec80ed75c82f36161f17b9c2f407860160383a7be0a0ee7962c527ae0180546001600160a01b0319166001600160a01b0389169081179091553b15610c7e5760405163f1b50c1d60e01b81528681600481836001600160a01b038d165af180156148e257614ec9575b50614e139596979899610136546040519081526001602082015242604082015260018060a01b038316907f58d1495ede629d89cfe4c00a5ad620a9ba231de4b1a5040c7b355d43092ff86b606060018060a01b038d1692a36101345461012d54608051614dfb92909130916001600160a01b039182169116612e53565b60805191898b60018060a01b03610134541692615050565b92915093614e248561013154612d5f565b813b156103c65760405163da3e339760e01b81526001600160a01b038616600482015230602482015260448101919091529082908290606490829084905af1801561356857614eb5575b5050604080516001815260208101949094528301526001600160a01b0316907f4e8e1b96afa9116446f71ff323ac93786664fcbea87475ece33519357750f79090606090a2565b614ebf82916122e1565b61042b5780614e6e565b614ed387916122e1565b610c7e575f614d7e565b614ee9909691966122e1565b945f614cb3565b9097506020813d602011614f24575b81614f0c60209383612374565b81010312610c7e57614f1d90613065565b965f614c41565b3d9150614eff565b6040513d88823e3d90fd5b90506020813d602011614f75575b81614f5260209383612374565b81010312610c7a57614c2698999a614f6b602092613065565b91509a9998614be9565b3d9150614f45565b604051634088b74160e01b8152600490fd5b634e487b7160e01b8c52601160045260248cfd5b634e487b7160e01b8b52601160045260248bfd5b506020813d602011614fe7575b81614fd160209383612374565b81010312614fe357614b0a9051614afd565b8a80fd5b3d9150614fc4565b6040513d8d823e3d90fd5b60ff60019116019060ff8211612b0857565b60ff1660ff8114612b085760010190565b9081518082526020808093019301915f5b82811061503c575050505090565b83518552938101939281019260010161502e565b9897909996919392955f809681956040519161506b8361233e565b60028352604036602085013761508083613079565b6001600160a01b038c16905261509583613086565b6001600160a01b038a169052604051946150ae8661233e565b600286526040366020880137816150c487613079565b52826150cf87613086565b52604051976150dd8961233e565b6002895260403660208b01376150f289613079565b526150fc88613086565b526101338054909261511b916001600160a01b03908116908c1661542b565b815461513591906001600160a01b03908116908d1661542b565b54604051623c7cd360e91b81526001600482015260e060248201529b8c966001600160a01b0390921695879586949193916151749060e4870190613096565b90600319918287820301604488015261518c9161501d565b9085820301606486015261519f9161501d565b9160848401523060a484015260c483015203925af1968715613568578295839861535b575b50876151ee81836151de6151d78b613079565b519a613086565b519a6001600160a01b031661542b565b6001600160a01b03821690813b156111785784916024839260405194859384926340519a5360e01b845260048401525af180156153505761533d575b506040516370a0823160e01b8082523060048301529091906020836024816001600160a01b0388165afa92831561353a578593615309575b506040519081523060048201526020816024816001600160a01b038a165afa9485156134cf57946152d5575b50816152bb575b505050806152a1575050565b61012d546125d1926001600160a01b0391821691166153f2565b6152cd926001600160a01b03166153f2565b5f8080615295565b9093506020813d602011615301575b816152f160209383612374565b810103126122c75751925f61528e565b3d91506152e4565b9092506020813d602011615335575b8161532560209383612374565b810103126122c75751915f615262565b3d9150615318565b615349909391936122e1565b915f61522a565b6040513d86823e3d90fd5b955096503d8083873e61536e8187612374565b8501946040818703126103c65780516001600160401b03811161117c5781019580601f8801121561117c5786516153a4816123f6565b976153b2604051998a612374565b8189526020808a019260051b820101928311610c7e57602001905b8282106153e25750505060200151965f6151c4565b81518152602091820191016153cd565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448201929092526125d191612e9f8260648101612e91565b60405163095ea7b360e01b602082018181526001600160a01b038516602484015260448084019690965294825294939092615467606485612374565b83515f926001600160a01b039291858416918591829182855af19061548a612f9d565b82615514575b5081615509575b50156154a7575b50505050509050565b6040519660208801521660248601528060448601526044855260808501908582106001600160401b038311176154f557506154ea9394612e9f9160405282612eb1565b805f8080808061549e565b634e487b7160e01b81526041600452602490fd5b90503b15155f615497565b8051919250811591821561552c575b5050905f615490565b81925090602091810103126111785760206155479101612ea4565b5f80615523565b60ff1680156155cb575f19810160ff8111612b085760ff165f52610139908160205260405f20548311156155b9577f1d518eb390459a1912a9b14c91cc0e67b8449b23fe75f7766658bd86057cb1a392604092825f5260205280835f205582519182526020820152a1565b60405163aabd5a0960e01b8152600490fd5b60405163e82a532960e01b8152600490fd5b51906001600160701b03821682036122c757565b60018060a01b03809116905f828152602090610135825260409182822060ff600b8201541690600382101561588957811561587857908392918661013b5416966101349184828454169960248a51809a819363fc57d4df60e01b835260049e8f8401525af196871561586e57869761583f575b50861561582f576002015481169260010361577d5750509084869392815197888092630240bc6b60e21b82525afa80156157735782968391615750575b5095965b87158015615748575b6157385781908651948580926318160ddd60e01b82525afa9485156141cf57508194615701575b5050506156fd926156f3670de0b6b3a764000095936156f893612af5565b612af5565b613101565b0490565b909180939450813d8311615731575b61571a8183612374565b8101031261042b57505190826156f36156f86156d5565b503d615710565b8551633dce448b60e11b81528490fd5b5086156156ae565b905061576a919650853d87116108d3576108c58183612374565b9590955f6156a1565b85513d84823e3d90fd5b8651630240bc6b60e21b815291979493926060908390879082905afa91821561582557849085936157d0575b506001600160701b03809116921697541688105f146157cb57955b95966156a5565b6157c4565b9250506060823d821161581d575b816157eb60609383612374565b8101031261117c576157fc826155dd565b876158088585016155dd565b93015163ffffffff811603611178575f6157a9565b3d91506157de565b87513d86823e3d90fd5b8751631d59567b60e11b81528990fd5b9096508481813d8311615867575b6158578183612374565b81010312610c7e5751955f615664565b503d61584d565b88513d88823e3d90fd5b845163c1ab6dc160e01b8152600490fd5b634e487b7160e01b84526021600452602484fd5b156158a457565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b1561590757565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b93959192959490946101325496873410612e025761013480546001600160a01b0399908a1691823b156122c7575f60049360405194858092630d0e30db60e41b825234905af18015612e4857612de29b6159cb9484926159f0575b50816159d5575b50505034612d5f565b943397309761316f565b806159e89354169061012d5416906153f2565b5f81816159c2565b6159f9906122e1565b5f6159bb56fea2646970667358221220cc8a9f34ed6ff51a5725fb15c8c90814e6c07909b2a5a736f93a61c1b7a8ccf964736f6c63430008140033",
  "libraries": {
    "INTRouterLibrary": "0x090BF41f1A0d492f4f411A368A4d63376f60b830"
  },
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "boost1(string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Only callable by owner. Adds liquidity via external router",
        "params": {
          "assetAmount": "Amount of asset tokens to add as liquidity",
          "assetAmountMin": "Minimum amount of asset tokens that must be added as liquidity",
          "cores": "Array of core values",
          "deadline": "Timestamp after which the transaction will revert",
          "desc": "Description of the token",
          "img": "Image URL for the token",
          "minLiquidity": "Minimum amount of liquidity tokens that must be minted",
          "name": "The name of the token",
          "ticker": "The ticker symbol of the token",
          "tokenAmount": "Amount of tokens to add as liquidity",
          "tokenAmountMin": "Minimum amount of tokens that must be added as liquidity",
          "urls": "Array of 4 URLs (twitter, telegram, farcaster, website)"
        }
      },
      "boost1For(address,string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Only callable by owner. Adds liquidity via external router",
        "params": {
          "assetAmount": "Amount of asset tokens to add as liquidity",
          "assetAmountMin": "Minimum amount of asset tokens that must be added as liquidity",
          "cores": "Array of core values",
          "creator": "The creator of the token",
          "deadline": "Timestamp after which the transaction will revert",
          "desc": "Description of the token",
          "img": "Image URL for the token",
          "minLiquidity": "Minimum amount of liquidity tokens that must be minted",
          "name": "The name of the token",
          "ticker": "The ticker symbol of the token",
          "tokenAmount": "Amount of tokens to add as liquidity",
          "tokenAmountMin": "Minimum amount of tokens that must be added as liquidity",
          "urls": "Array of 4 URLs (twitter, telegram, farcaster, website)"
        }
      },
      "boost2(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Only callable by booster. Adds liquidity via external router",
        "params": {
          "assetAmount": "Amount of asset tokens to add as liquidity",
          "assetAmountMin": "Minimum amount of asset tokens that must be added as liquidity",
          "deadline": "Timestamp after which the transaction will revert",
          "minLiquidity": "Minimum amount of liquidity tokens that must be minted",
          "token": "Address of token to boost",
          "tokenAmount": "Amount of tokens to add as liquidity",
          "tokenAmountMin": "Minimum amount of tokens that must be added as liquidity"
        }
      },
      "boost3(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Only callable by owner. Adds liquidity via external router",
        "params": {
          "assetAmount": "Amount of asset tokens to add as liquidity",
          "assetAmountMin": "Minimum amount of asset tokens that must be added as liquidity",
          "deadline": "Timestamp after which the transaction will revert",
          "minLiquidity": "Minimum amount of liquidity tokens that must be minted",
          "token": "Address of token to boost",
          "tokenAmount": "Amount of tokens to add as liquidity",
          "tokenAmountMin": "Minimum amount of tokens that must be added as liquidity"
        }
      },
      "calculateMarketCap(address)": {
        "params": {
          "token": "The token address to calculate market cap for"
        },
        "returns": {
          "_0": "marketCap The calculated market cap in asset token value in 18 decimals"
        }
      },
      "delegateLPTo(address,address)": {
        "details": "Delegate LP token to the specified address.",
        "params": {
          "delegatee": "The address to delegate the LP token to.",
          "tokenAddr": "The address of the token to delegate its LP token."
        }
      },
      "delegateLPToBatch(address[],address[])": {
        "details": "Delegate LP token to the specified address for multiple tokens.",
        "params": {
          "delegatees": "The addresses to delegate the LP tokens to.",
          "tokens": "The addresses of the tokens to delegate their LP tokens."
        }
      },
      "getBoostCount()": {
        "returns": {
          "_0": "The length of boostInfos array"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTokenCount()": {
        "returns": {
          "_0": "The length of tokenInfos array"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAssetToken(address)": {
        "details": "Set the asset token address",
        "params": {
          "newAssetToken": "The new asset token address"
        }
      },
      "setBoostStageThreshold(uint8,uint256)": {
        "params": {
          "stage": "The boost stage number (1-3)",
          "threshold": "The threshold amount required for this stage"
        }
      },
      "setBoostStageThresholds(uint256[])": {
        "params": {
          "thresholds": "Array of threshold amounts for stages 1-3"
        }
      },
      "setExtRouter(address)": {
        "details": "Set the external router address",
        "params": {
          "newExtRouter": "The new external router address"
        }
      },
      "setFactory(address)": {
        "details": "Set the factory address",
        "params": {
          "newFactory": "The new factory address"
        }
      },
      "setFee(uint256,address)": {
        "details": "Set the fee and fee recipient",
        "params": {
          "newFee": "New fee amount",
          "newFeeTo": "New fee recipient"
        }
      },
      "setGradMarketCap(uint256)": {
        "details": "Set the graduation market cap threshold",
        "params": {
          "newMarketCap": "The new graduation market cap threshold"
        }
      },
      "setInitialMarketCap(uint256)": {
        "details": "Set the initial market cap threshold",
        "params": {
          "newMarketCap": "The new initial market cap threshold"
        }
      },
      "setInitialSupply(uint256)": {
        "details": "Set the initial supply for generating a new token",
        "params": {
          "newSupply": "New initial supply"
        }
      },
      "setLockFactory(address)": {
        "details": "Set the lock factory address",
        "params": {
          "newLockFactory": "The new lock factory address"
        }
      },
      "setLockedTime(uint256)": {
        "details": "Set the locked time for lp tokens that locked in the locker contract",
        "params": {
          "newLockedTime": "The new locked time"
        }
      },
      "setOracle(address)": {
        "details": "Set the oracle address",
        "params": {
          "newOracle": "The new oracle address"
        }
      },
      "setTokenFactory(address)": {
        "details": "Set the token factory address",
        "params": {
          "newTokenFactory": "The new token factory address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ProfileNotExist()": [
        {
          "notice": "============================================ =                  ERRORS                  = ============================================"
        }
      ]
    },
    "events": {
      "Launched(address,address,uint256,uint8,uint256)": {
        "notice": "============================================ =                 EVENTS                   = ============================================"
      }
    },
    "kind": "user",
    "methods": {
      "boost1(string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Boost liquidity for a token by adding token and asset pairs"
      },
      "boost1For(address,string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Boost liquidity for a token by adding token and asset pairs"
      },
      "boost2(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Boost Stage 2 for a token by adding token and asset pairs"
      },
      "boost3(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Boost Stage 3 for a token by adding token and asset pairs"
      },
      "calculateMarketCap(address)": {
        "notice": "Calculate the market cap of a token using oracle price and liquidity reserves"
      },
      "delegateLPTo(address,address)": {
        "notice": "LP token should have been released in its locker contract."
      },
      "delegateLPToBatch(address[],address[])": {
        "notice": "LP token should have been released in its locker contract."
      },
      "getBoostCount()": {
        "notice": "Get the total number of boost created through bonding"
      },
      "getTokenCount()": {
        "notice": "Get the total number of tokens created through bonding"
      },
      "setAssetToken(address)": {
        "notice": "Owner should ensure the asset token address is correct"
      },
      "setBoostStageThreshold(uint8,uint256)": {
        "notice": "Set threshold for a boost stage"
      },
      "setBoostStageThresholds(uint256[])": {
        "notice": "Set thresholds for all boost stages in one transaction"
      },
      "setExtRouter(address)": {
        "notice": "Owner should ensure the external router address is correct"
      },
      "setFactory(address)": {
        "notice": "Owner should ensure the factory address is correct"
      },
      "setLockFactory(address)": {
        "notice": "Owner should ensure the lock factory address is correct"
      },
      "setTokenFactory(address)": {
        "notice": "Owner should ensure the token factory address is correct"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 653,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 656,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 829,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 898,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1270,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 525,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 645,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 434,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 513,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1543,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6801,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "feeTo",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 6804,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "factory",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(INTFactory)10211"
      },
      {
        "astId": 6807,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "tokenFactory",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(INTERC20Factory)9813"
      },
      {
        "astId": 6810,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "lockFactory",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(LockFactory)10972"
      },
      {
        "astId": 6812,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "initialSupply",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 6814,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "fee",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 6817,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "extRouter",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IExtRouter)11122"
      },
      {
        "astId": 6819,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "assetToken",
        "offset": 0,
        "slot": "308",
        "type": "t_address"
      },
      {
        "astId": 6855,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "309",
        "type": "t_mapping(t_address,t_struct(Token)6850_storage)"
      },
      {
        "astId": 6858,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "tokenInfos",
        "offset": 0,
        "slot": "310",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6866,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "boostInfo",
        "offset": 0,
        "slot": "311",
        "type": "t_mapping(t_address,t_struct(BoostInfo)6861_storage)"
      },
      {
        "astId": 6869,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "boostInfos",
        "offset": 0,
        "slot": "312",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6878,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "boostStageThresholds",
        "offset": 0,
        "slot": "313",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 6880,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "lockedTime",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 6883,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "oracle",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(IOracle)11249"
      },
      {
        "astId": 6885,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "initialMarketCap",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      },
      {
        "astId": 6887,
        "contract": "src/BondingETH.sol:BondingETH",
        "label": "gradMarketCap",
        "offset": 0,
        "slot": "317",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IExtRouter)11122": {
        "encoding": "inplace",
        "label": "contract IExtRouter",
        "numberOfBytes": "20"
      },
      "t_contract(INTERC20Factory)9813": {
        "encoding": "inplace",
        "label": "contract INTERC20Factory",
        "numberOfBytes": "20"
      },
      "t_contract(INTFactory)10211": {
        "encoding": "inplace",
        "label": "contract INTFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)11249": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_contract(LockFactory)10972": {
        "encoding": "inplace",
        "label": "contract LockFactory",
        "numberOfBytes": "20"
      },
      "t_enum(TokenStatus)6823": {
        "encoding": "inplace",
        "label": "enum Bonding.TokenStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(BoostInfo)6861_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Bonding.BoostInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BoostInfo)6861_storage"
      },
      "t_mapping(t_address,t_struct(Token)6850_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Bonding.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)6850_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BoostInfo)6861_storage": {
        "encoding": "inplace",
        "label": "struct Bonding.BoostInfo",
        "members": [
          {
            "astId": 6860,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "stage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Token)6850_storage": {
        "encoding": "inplace",
        "label": "struct Bonding.Token",
        "members": [
          {
            "astId": 6825,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6827,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6829,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "pair",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6831,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "locker",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6833,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 6836,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "cores",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 6838,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "image",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 6840,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "twitter",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 6842,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "telegram",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 6844,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "farcaster",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 6846,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "website",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 6849,
            "contract": "src/BondingETH.sol:BondingETH",
            "label": "status",
            "offset": 0,
            "slot": "11",
            "type": "t_enum(TokenStatus)6823"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}