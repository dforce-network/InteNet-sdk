{
  "address": "0x264053dEDC0a04D66AE6Eb1bc7bf111b2a38C7b1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bonding",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "bonding",
      "outputs": [
        {
          "internalType": "contract Bonding",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "locker",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "twitter",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "telegram",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "farcaster",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "enum Bonding.TokenStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ticker",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenDataReader.Token[]",
          "name": "infos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4fa45903a16c4a4ae514b526e1c4842a74dd0224199af1b7e5a92ef09327f0b3",
  "receipt": {
    "to": null,
    "from": "0x6b29b8af9AF126170513AE6524395E09025b214E",
    "contractAddress": "0x264053dEDC0a04D66AE6Eb1bc7bf111b2a38C7b1",
    "transactionIndex": 75,
    "gasUsed": "552614",
    "logsBloom": "0x
    "blockHash": "0x8b16d419a2954a2739646c8474007920550f81f217309b8470d0dfd78447ead1",
    "transactionHash": "0x4fa45903a16c4a4ae514b526e1c4842a74dd0224199af1b7e5a92ef09327f0b3",
    "logs": [],
    "blockNumber": 7363710,
    "cumulativeGasUsed": "11792195",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x60870256F2e48d9a36c287641689D1C57f928CFb"
  ],
  "numDeployments": 1,
  "solcInputHash": "8d974d57f018678bd7c308048af3be77",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bonding\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bonding\",\"outputs\":[{\"internalType\":\"contract Bonding\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"farcaster\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"enum Bonding.TokenStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenDataReader.Token[]\",\"name\":\"infos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTokenData(uint256,uint256)\":{\"params\":{\"size\":\"The number of tokens to return\",\"start\":\"The starting index in tokenInfos array\"},\"returns\":{\"infos\":\"Array of Token structs containing token info\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenData(uint256,uint256)\":{\"notice\":\"Get token data for a range of tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/TokenDataReader.sol\":\"TokenDataReader\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"src/Bonding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified from https://github.com/sourlodine/Pump.fun-Smart-Contract/blob/main/contracts/PumpFun.sol\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./INTFactory.sol\\\";\\nimport \\\"./IINTPair.sol\\\";\\nimport \\\"./INTRouterLibrary.sol\\\";\\nimport \\\"./INTERC20.sol\\\";\\nimport \\\"./Lock.sol\\\";\\nimport \\\"./INTERC20Factory.sol\\\";\\nimport \\\"./LockFactory.sol\\\";\\n\\nimport \\\"./interface/IExtRouter.sol\\\";\\nimport \\\"./interface/IOracle.sol\\\";\\n\\ncontract Bonding is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    Ownable2StepUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    // Act as treasury\\n    address public feeTo;\\n\\n    INTFactory public factory;\\n    INTERC20Factory public tokenFactory;\\n    LockFactory public lockFactory;\\n    uint256 public initialSupply;\\n    uint256 public fee;\\n    IExtRouter public extRouter;\\n    address public assetToken;\\n\\n    enum TokenStatus {\\n        None,\\n        BondingCurve,\\n        Graduated\\n    }\\n\\n    struct Token {\\n        address creator;\\n        address token;\\n        address pair; // Bonding: internal pair, Graduated: external pair\\n        address locker;\\n        string description;\\n        uint8[] cores;\\n        string image;\\n        string twitter;\\n        string telegram;\\n        string farcaster;\\n        string website;\\n        TokenStatus status;\\n    }\\n\\n    mapping(address => Token) public tokenInfo;\\n    address[] public tokenInfos;\\n\\n    struct BoostInfo {\\n        uint8 stage;\\n    }\\n\\n    // Separate mapping for boost information\\n    mapping(address => BoostInfo) public boostInfo;\\n    address[] public boostInfos;\\n\\n    bytes32 public constant BOOSTER_ROLE = keccak256(\\\"BOOSTER_ROLE\\\");\\n\\n    // Mapping to store boost stage thresholds\\n    mapping(uint8 => uint256) public boostStageThresholds;\\n\\n    // The locked times for lp tokens that locked in the locker contract\\n    uint256 public lockedTime;\\n\\n    IOracle public oracle;\\n\\n    uint256 public initialMarketCap;\\n    uint256 public gradMarketCap;\\n\\n    /**\\n     * ============================================\\n     * =                 EVENTS                   =\\n     * ============================================\\n     */\\n    event Launched(\\n        address indexed token,\\n        address indexed pair,\\n        uint256 totalTokens,\\n        uint8 tokenType,\\n        uint256 timestamp\\n    );\\n    event Graduated(address indexed token, address indexed lp);\\n    event DelegateLPTo(address indexed token, address indexed delegatee);\\n    event Boosted(\\n        address indexed token,\\n        uint8 stage,\\n        uint256 amount,\\n        uint256 assetAmount\\n    );\\n\\n    event BoostStageThresholdUpdated(uint8 stage, uint256 threshold);\\n    event InitializeSupplySet(uint256 newSupply);\\n    event FeeSet(uint256 newFee, address newFeeTo);\\n    event OracleSet(address newOracle);\\n    event InitialMarketCapSet(uint256 newMarketCap);\\n    event GradMarketCapSet(uint256 newMarketCap);\\n    event LockedTimeSet(uint256 newLockedTime);\\n    event FactorySet(address newFactory);\\n    event RouterSet(address newRouter);\\n    event TokenFactorySet(address newTokenFactory);\\n    event LockFactorySet(address newLockFactory);\\n    event ExtRouterSet(address newExtRouter);\\n    event AssetTokenSet(address newAssetToken);\\n\\n    /**\\n     * ============================================\\n     * =                  ERRORS                  =\\n     * ============================================\\n     */\\n\\n    error ProfileNotExist();\\n    error InvalidToken();\\n    error NotTrading();\\n    error AlreadyTrading();\\n    error InsufficientAmount();\\n    error InvalidDelegatee();\\n    error InvalidLocker();\\n    error InputArrayMismatch();\\n    error InvalidLockTime();\\n    error InvalidRate();\\n    error InvalidStage();\\n    error InvalidThreshold();\\n    error InvalidReserves();\\n    error InvalidAssetPrice();\\n    error InvalidOracle();\\n    error InvalidMarketCap();\\n    error WrongBoostStage();\\n    error LiquidityTooLow();\\n    error MarketCapTooLow();\\n\\n    /**\\n     * ============================================\\n     * =                FUNCTIONS                 =\\n     * ============================================\\n     */\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address assetToken_,\\n        address factory_,\\n        address feeTo_,\\n        uint256 fee_,\\n        uint256 initialSupply_,\\n        address extRouter_,\\n        address tokenFactory_,\\n        address lockFactory_,\\n        uint256 lockedTime_,\\n        address oracle_,\\n        uint256 initialMarketCap_,\\n        uint256 gradMarketCap_\\n    ) external initializer {\\n        __Ownable2Step_init();\\n        __ReentrancyGuard_init();\\n\\n        assetToken = assetToken_;\\n\\n        factory = INTFactory(factory_);\\n        tokenFactory = INTERC20Factory(tokenFactory_);\\n        lockFactory = LockFactory(lockFactory_);\\n\\n        feeTo = feeTo_;\\n        fee = fee_;\\n\\n        initialSupply = initialSupply_;\\n\\n        extRouter = IExtRouter(extRouter_);\\n\\n        lockedTime = lockedTime_;\\n        oracle = IOracle(oracle_);\\n\\n        initialMarketCap = initialMarketCap_;\\n        gradMarketCap = gradMarketCap_;\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer ownership along with the DEFAULT_ADMIN_ROLE\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        super._transferOwnership(newOwner);\\n        _grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n    }\\n\\n    /**\\n     * @dev Set the initial supply for generating a new token\\n     * @param newSupply New initial supply\\n     */\\n    function setInitialSupply(uint256 newSupply) public onlyOwner {\\n        initialSupply = newSupply;\\n\\n        emit InitializeSupplySet(newSupply);\\n    }\\n\\n    /**\\n     * @dev Set the fee and fee recipient\\n     * @param newFee New fee amount\\n     * @param newFeeTo New fee recipient\\n     */\\n    function setFee(uint256 newFee, address newFeeTo) public onlyOwner {\\n        fee = newFee;\\n        feeTo = newFeeTo;\\n\\n        emit FeeSet(newFee, newFeeTo);\\n    }\\n\\n    /**\\n     * @dev Set the oracle address\\n     * @param newOracle The new oracle address\\n     */\\n    function setOracle(address newOracle) public onlyOwner {\\n        if (IOracle(newOracle).getAssetPrice() == 0) revert InvalidOracle();\\n\\n        oracle = IOracle(newOracle);\\n\\n        emit OracleSet(newOracle);\\n    }\\n\\n    /**\\n     * @dev Set the initial market cap threshold\\n     * @param newMarketCap The new initial market cap threshold\\n     */\\n    function setInitialMarketCap(uint256 newMarketCap) public onlyOwner {\\n        if (newMarketCap == 0) revert InvalidMarketCap();\\n\\n        initialMarketCap = newMarketCap;\\n\\n        emit InitialMarketCapSet(newMarketCap);\\n    }\\n\\n    /**\\n     * @dev Set the graduation market cap threshold\\n     * @param newMarketCap The new graduation market cap threshold\\n     */\\n    function setGradMarketCap(uint256 newMarketCap) public onlyOwner {\\n        if (newMarketCap < initialMarketCap) revert InvalidMarketCap();\\n\\n        gradMarketCap = newMarketCap;\\n\\n        emit GradMarketCapSet(newMarketCap);\\n    }\\n\\n    /**\\n     * @dev Set the locked time for lp tokens that locked in the locker contract\\n     * @param newLockedTime The new locked time\\n     */\\n    function setLockedTime(uint256 newLockedTime) public onlyOwner {\\n        if (newLockedTime <= 365 days) revert InvalidLockTime();\\n        lockedTime = newLockedTime;\\n\\n        emit LockedTimeSet(newLockedTime);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the factory address is correct\\n     * @dev Set the factory address\\n     * @param newFactory The new factory address\\n     */\\n    function setFactory(address newFactory) public onlyOwner {\\n        factory = INTFactory(newFactory);\\n\\n        emit FactorySet(newFactory);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the token factory address is correct\\n     * @dev Set the token factory address\\n     * @param newTokenFactory The new token factory address\\n     */\\n    function setTokenFactory(address newTokenFactory) public onlyOwner {\\n        tokenFactory = INTERC20Factory(newTokenFactory);\\n\\n        emit TokenFactorySet(newTokenFactory);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the lock factory address is correct\\n     * @dev Set the lock factory address\\n     * @param newLockFactory The new lock factory address\\n     */\\n    function setLockFactory(address newLockFactory) public onlyOwner {\\n        lockFactory = LockFactory(newLockFactory);\\n\\n        emit LockFactorySet(newLockFactory);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the external router address is correct\\n     * @dev Set the external router address\\n     * @param newExtRouter The new external router address\\n     */\\n    function setExtRouter(address newExtRouter) public onlyOwner {\\n        extRouter = IExtRouter(newExtRouter);\\n\\n        emit ExtRouterSet(newExtRouter);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the asset token address is correct\\n     * @dev Set the asset token address\\n     * @param newAssetToken The new asset token address\\n     */\\n    function setAssetToken(address newAssetToken) public onlyOwner {\\n        assetToken = newAssetToken;\\n\\n        emit AssetTokenSet(newAssetToken);\\n    }\\n\\n    function _createToken(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls\\n    ) internal returns (address token) {\\n        token = tokenFactory.createToken(\\n            string.concat(\\\"int \\\", _name),\\n            _ticker,\\n            initialSupply,\\n            address(this)\\n        );\\n\\n        // Create a lock contract for the token\\n        address lock = lockFactory.createLock(\\n            token,\\n            assetToken,\\n            address(this),\\n            lockedTime\\n        );\\n\\n        Token memory tmpToken = Token({\\n            creator: _creator,\\n            token: token,\\n            pair: address(0),\\n            locker: lock,\\n            description: desc,\\n            cores: cores,\\n            image: img,\\n            twitter: urls[0],\\n            telegram: urls[1],\\n            farcaster: urls[2],\\n            website: urls[3],\\n            status: TokenStatus.BondingCurve\\n        });\\n\\n        tokenInfo[address(token)] = tmpToken;\\n        tokenInfos.push(address(token));\\n    }\\n\\n    function _launchInternal(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 purchaseAmount\\n    ) internal returns (address, address, uint256) {\\n        if (IERC20(assetToken).balanceOf(msg.sender) < purchaseAmount)\\n            revert InsufficientAmount();\\n\\n        uint256 feeAmount = fee;\\n        if (feeAmount > 0)\\n            IERC20(assetToken).safeTransferFrom(msg.sender, feeTo, feeAmount);\\n\\n        address token = _createToken(\\n            _creator,\\n            _name,\\n            _ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls\\n        );\\n\\n        address _pair = factory.createPair(token, assetToken);\\n\\n        // Enable pair contract to transfer tokens\\n        INTERC20(token).excludeAccount(_pair);\\n\\n        uint256 liquidity = (initialMarketCap * 1e18) / oracle.getAssetPrice();\\n        INTRouterLibrary.addInitialLiquidity(\\n            factory,\\n            assetToken,\\n            token,\\n            initialSupply,\\n            liquidity\\n        );\\n\\n        tokenInfo[token].pair = _pair;\\n        uint256 totalTokens = tokenInfos.length;\\n        emit Launched(token, _pair, totalTokens, 0, block.timestamp);\\n\\n        uint256 initialPurchase = (purchaseAmount - feeAmount);\\n        if (initialPurchase != 0) {\\n            INTRouterLibrary.buy(\\n                factory,\\n                assetToken,\\n                initialPurchase,\\n                token,\\n                msg.sender\\n            );\\n        }\\n\\n        return (token, _pair, totalTokens);\\n    }\\n\\n    function launchFor(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 purchaseAmount\\n    ) public nonReentrant returns (address, address, uint256) {\\n        return\\n            _launchInternal(\\n                _creator,\\n                _name,\\n                _ticker,\\n                cores,\\n                desc,\\n                img,\\n                urls,\\n                purchaseAmount\\n            );\\n    }\\n\\n    function launch(\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 purchaseAmount\\n    ) public nonReentrant returns (address, address, uint256) {\\n        return\\n            _launchInternal(\\n                msg.sender,\\n                _name,\\n                _ticker,\\n                cores,\\n                desc,\\n                img,\\n                urls,\\n                purchaseAmount\\n            );\\n    }\\n\\n    function sell(\\n        uint256 amountIn,\\n        address tokenAddress\\n    ) public returns (bool) {\\n        if (tokenInfo[tokenAddress].status != TokenStatus.BondingCurve)\\n            revert NotTrading();\\n\\n        INTRouterLibrary.sell(\\n            factory,\\n            assetToken,\\n            amountIn,\\n            tokenAddress,\\n            msg.sender\\n        );\\n\\n        return true;\\n    }\\n\\n    function buy(\\n        uint256 amountIn,\\n        address tokenAddress\\n    ) public payable returns (bool) {\\n        if (tokenInfo[tokenAddress].status != TokenStatus.BondingCurve)\\n            revert NotTrading();\\n\\n        INTRouterLibrary.buy(\\n            factory,\\n            assetToken,\\n            amountIn,\\n            tokenAddress,\\n            msg.sender\\n        );\\n\\n        if (calculateMarketCap(tokenAddress) >= gradMarketCap) {\\n            _graduate(tokenAddress);\\n        }\\n\\n        return true;\\n    }\\n\\n    function quoteBuy(\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256, uint256) {\\n        return INTRouterLibrary.quoteBuy(factory, assetToken, token_, amountIn_);\\n    }\\n\\n    function quoteSell(\\n        address token_,\\n        uint256 amountIn_\\n    ) public view returns (uint256, uint256) {\\n        return INTRouterLibrary.quoteSell(factory, assetToken, token_, amountIn_);\\n    }\\n\\n    function _graduate(address tokenAddress) internal {\\n        Token storage _token = tokenInfo[tokenAddress];\\n\\n        // Sanity check\\n        if (tokenInfo[tokenAddress].status == TokenStatus.Graduated)\\n            revert AlreadyTrading();\\n\\n        INTERC20 token_ = INTERC20(tokenAddress);\\n\\n        // Transfer asset tokens to bonding contract\\n        IINTPair pair = IINTPair(_token.pair);\\n\\n        uint256 assetBalance = pair.assetBalance();\\n        uint256 tokenBalance = pair.balance();\\n\\n        INTRouterLibrary.graduate(factory, assetToken, tokenAddress);\\n\\n        // Enable token transferring without limit\\n        token_.enableTransfer();\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = assetToken;\\n        tokens[1] = tokenAddress;\\n        (address lp, ) = extRouter.pairFor(tokens, 1);\\n\\n        // update LP address in locker contract\\n        address locker = _token.locker;\\n        ILock(locker).setLP(lp);\\n\\n        _extRouterAddLiquidity(\\n            lp,\\n            locker,\\n            tokenAddress,\\n            assetToken,\\n            tokenBalance,\\n            assetBalance,\\n            tokenBalance,\\n            assetBalance,\\n            0,\\n            block.timestamp\\n        );\\n\\n        _token.status = TokenStatus.Graduated;\\n        _token.pair = lp;\\n\\n        emit Graduated(tokenAddress, lp);\\n    }\\n\\n    // Delegate LP token to the specified address.\\n    function _delegateLPTo(address tokenAddr, address delegatee) internal {\\n        if (delegatee == address(0)) revert InvalidDelegatee();\\n\\n        Token storage _tokenInfo = tokenInfo[tokenAddr];\\n        if (_tokenInfo.locker == address(0)) revert InvalidLocker();\\n\\n        ILock lockContract = ILock(_tokenInfo.locker);\\n        lockContract.delegateLPTo(delegatee);\\n\\n        emit DelegateLPTo(tokenAddr, delegatee);\\n    }\\n\\n    /**\\n     * @notice LP token should have been released in its locker contract.\\n     * @dev Delegate LP token to the specified address.\\n     * @param tokenAddr The address of the token to delegate its LP token.\\n     * @param delegatee The address to delegate the LP token to.\\n     */\\n    function delegateLPTo(\\n        address tokenAddr,\\n        address delegatee\\n    ) external onlyOwner {\\n        _delegateLPTo(tokenAddr, delegatee);\\n    }\\n\\n    /**\\n     * @notice LP token should have been released in its locker contract.\\n     * @dev Delegate LP token to the specified address for multiple tokens.\\n     * @param tokens The addresses of the tokens to delegate their LP tokens.\\n     * @param delegatees The addresses to delegate the LP tokens to.\\n     */\\n    function delegateLPToBatch(\\n        address[] calldata tokens,\\n        address[] calldata delegatees\\n    ) external onlyOwner {\\n        if (tokens.length != delegatees.length) revert InputArrayMismatch();\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i; i < len; ) {\\n            _delegateLPTo(tokens[i], delegatees[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function hasGraduated(address tokenAddress) external view returns (bool) {\\n        return tokenInfo[tokenAddress].status == TokenStatus.Graduated;\\n    }\\n\\n    function getTokenLocker(\\n        address tokenAddress\\n    ) external view returns (address) {\\n        Token storage token = tokenInfo[tokenAddress];\\n\\n        return token.locker;\\n    }\\n\\n    function getTokenCreator(\\n        address tokenAddress\\n    ) external view returns (address) {\\n        Token storage token = tokenInfo[tokenAddress];\\n\\n        return token.creator;\\n    }\\n\\n    /**\\n     * @notice Get the total number of tokens created through bonding\\n     * @return The length of tokenInfos array\\n     */\\n    function getTokenCount() external view returns (uint256) {\\n        return tokenInfos.length;\\n    }\\n\\n    function _boost1(\\n        address creator,\\n        string memory name,\\n        string memory ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) internal {\\n        // boostStageThreshold and asset price are all 18 decimals\\n        if (\\n            assetAmount * oracle.getAssetPrice() * 2 <\\n            boostStageThresholds[1] * 1e18\\n        ) {\\n            revert LiquidityTooLow();\\n        }\\n\\n        address token = _createToken(\\n            creator,\\n            name,\\n            ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls\\n        );\\n\\n        Token storage _token = tokenInfo[token];\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = assetToken;\\n        tokens[1] = token;\\n        (address pair, ) = extRouter.pairFor(tokens, 1);\\n\\n        _token.status = TokenStatus.Graduated;\\n        _token.pair = pair;\\n\\n        // Update LP address in locker contract\\n        address locker = _token.locker;\\n        ILock(locker).setLP(pair);\\n\\n        // Record boost information\\n        boostInfo[token] = BoostInfo({ stage: 1 });\\n        boostInfos.push(token);\\n\\n        INTERC20(token).enableTransfer();\\n\\n        emit Launched(token, pair, tokenInfos.length, 1, block.timestamp);\\n\\n        // Provide Initial liquidity via external router\\n        IERC20(assetToken).safeTransferFrom(feeTo, address(this), assetAmount);\\n\\n        // Added amounts should match intended as it's the initial liquidity\\n        (, uint256 tokenAdded, uint256 assetAdded) = _extRouterAddLiquidity(\\n            pair,\\n            locker,\\n            token,\\n            assetToken,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n\\n        // Approve the remaining token for furture boost\\n        ILock(locker).approveToken(\\n            token,\\n            address(this),\\n            initialSupply - tokenAmount\\n        );\\n\\n        emit Boosted(token, 1, tokenAdded, assetAdded);\\n    }\\n\\n    /**\\n     * @notice Boost liquidity for a token by adding token and asset pairs\\n     * @dev Only callable by owner. Adds liquidity via external router\\n     * @param creator The creator of the token\\n     * @param name The name of the token\\n     * @param ticker The ticker symbol of the token\\n     * @param cores Array of core values\\n     * @param desc Description of the token\\n     * @param img Image URL for the token\\n     * @param urls Array of 4 URLs (twitter, telegram, farcaster, website)\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost1For(\\n        address creator,\\n        string memory name,\\n        string memory ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost1(\\n            creator,\\n            name,\\n            ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Boost liquidity for a token by adding token and asset pairs\\n     * @dev Only callable by owner. Adds liquidity via external router\\n     * @param name The name of the token\\n     * @param ticker The ticker symbol of the token\\n     * @param cores Array of core values\\n     * @param desc Description of the token\\n     * @param img Image URL for the token\\n     * @param urls Array of 4 URLs (twitter, telegram, farcaster, website)\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost1(\\n        string memory name,\\n        string memory ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost1(\\n            msg.sender,\\n            name,\\n            ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Boost Stage 2 for a token by adding token and asset pairs\\n     * @dev Only callable by booster. Adds liquidity via external router\\n     * @param token Address of token to boost\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost2(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost(\\n            2,\\n            token,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Boost Stage 3 for a token by adding token and asset pairs\\n     * @dev Only callable by owner. Adds liquidity via external router\\n     * @param token Address of token to boost\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost3(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost(\\n            3,\\n            token,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    function _boost(\\n        uint8 stage,\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) internal {\\n        BoostInfo storage _boostInfo = boostInfo[token];\\n        if (_boostInfo.stage + 1 != stage) revert WrongBoostStage();\\n\\n        if (calculateMarketCap(token) < boostStageThresholds[stage]) {\\n            revert MarketCapTooLow();\\n        }\\n\\n        Token storage _token = tokenInfo[token];\\n        address _locker = _token.locker;\\n\\n        IERC20(assetToken).safeTransferFrom(feeTo, address(this), assetAmount);\\n        IERC20(token).safeTransferFrom(_locker, address(this), tokenAmount);\\n\\n        // _extRouterAddLiquidity will return remaining token and asset\\n        (, uint256 tokenAdded, uint256 assetAdded) = _extRouterAddLiquidity(\\n            _token.pair,\\n            _locker,\\n            token,\\n            assetToken,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n\\n        _boostInfo.stage++;\\n\\n        emit Boosted(token, stage, tokenAdded, assetAdded);\\n    }\\n\\n    // Helper function to check if token is boosted\\n    function isBoostToken(address token) public view returns (bool) {\\n        return boostInfo[token].stage != 0;\\n    }\\n\\n    // Get boost information\\n    function getBoostInfo(\\n        address token\\n    ) public view returns (BoostInfo memory) {\\n        return boostInfo[token];\\n    }\\n\\n    /**\\n     * @notice Get the total number of boost created through bonding\\n     * @return The length of boostInfos array\\n     */\\n    function getBoostCount() external view returns (uint256) {\\n        return boostInfos.length;\\n    }\\n\\n    function _extRouterAddLiquidity(\\n        address lp,\\n        address locker,\\n        address token,\\n        address asset,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    )\\n        internal\\n        returns (uint256 liquidity, uint256 tokenAdded, uint256 assetAdded)\\n    {\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = asset;\\n        tokens[1] = token;\\n\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[0] = assetAmount;\\n        amounts[1] = tokenAmount;\\n\\n        uint256[] memory mins = new uint256[](2);\\n        mins[0] = assetAmountMin;\\n        mins[1] = tokenAmountMin;\\n\\n        IERC20(token).approve(address(extRouter), tokenAmount);\\n        IERC20(asset).approve(address(extRouter), assetAmount);\\n\\n        uint256[] memory added;\\n        (added, liquidity) = extRouter.addLiquidity(\\n            1,\\n            tokens,\\n            amounts,\\n            mins,\\n            minLiquidity,\\n            address(this),\\n            deadline\\n        );\\n\\n        assetAdded = added[0];\\n        tokenAdded = added[1];\\n\\n        IERC20(lp).forceApprove(locker, liquidity);\\n        ILock(locker).lockLP(liquidity);\\n\\n        uint256 tokenBal = IERC20(token).balanceOf(address(this));\\n        uint256 assetBal = IERC20(asset).balanceOf(address(this));\\n\\n        if (tokenBal != 0) {\\n            IERC20(token).safeTransfer(locker, tokenBal);\\n        }\\n\\n        if (assetBal != 0) {\\n            IERC20(asset).safeTransfer(feeTo, assetBal);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set threshold for a boost stage\\n     * @param stage The boost stage number (1-3)\\n     * @param threshold The threshold amount required for this stage\\n     */\\n    function setBoostStageThreshold(\\n        uint8 stage,\\n        uint256 threshold\\n    ) external onlyOwner {\\n        if (stage == 0 || stage > 3) revert InvalidStage();\\n        if (threshold <= boostStageThresholds[stage - 1])\\n            revert InvalidThreshold();\\n        boostStageThresholds[stage] = threshold;\\n\\n        emit BoostStageThresholdUpdated(stage, threshold);\\n    }\\n\\n    /**\\n     * @notice Set thresholds for all boost stages in one transaction\\n     * @param thresholds Array of threshold amounts for stages 1-3\\n     */\\n    function setBoostStageThresholds(\\n        uint256[] calldata thresholds\\n    ) external onlyOwner {\\n        if (thresholds.length != 3) revert InputArrayMismatch();\\n\\n        for (uint8 i = 1; i < 3; i++) {\\n            if (thresholds[i] <= thresholds[i - 1]) revert InvalidThreshold();\\n        }\\n\\n        for (uint8 i = 0; i < 3; i++) {\\n            boostStageThresholds[i + 1] = thresholds[i];\\n            emit BoostStageThresholdUpdated(i + 1, thresholds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the market cap of a token using oracle price and liquidity reserves\\n     * @param token The token address to calculate market cap for\\n     * @return marketCap The calculated market cap in asset token value in 18 decimals\\n     */\\n    function calculateMarketCap(address token) public returns (uint256) {\\n        Token storage _token = tokenInfo[token];\\n        TokenStatus status = _token.status;\\n        if (status == TokenStatus.None) revert InvalidToken();\\n\\n        uint256 assetPrice = IOracle(oracle).getAssetPrice();\\n        if (assetPrice == 0) revert InvalidAssetPrice();\\n\\n        uint256 tokenReserve;\\n        uint256 assetReserve;\\n        address pair = _token.pair;\\n\\n        if (status == TokenStatus.BondingCurve) {\\n            (tokenReserve, assetReserve) = IINTPair(pair).getReserves();\\n        } else {\\n            (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair)\\n                .getReserves();\\n            bool isToken0 = token < assetToken;\\n\\n            (tokenReserve, assetReserve) = isToken0\\n                ? (reserve0, reserve1)\\n                : (reserve1, reserve0);\\n        }\\n\\n        if (tokenReserve == 0 || assetReserve == 0) revert InvalidReserves();\\n\\n        // Get total supply\\n        uint256 totalSupply = IERC20(token).totalSupply();\\n\\n        // Calculate market cap: totalSupply * tokenPrice * assetPrice / 1e18\\n        uint256 marketCap = (assetPrice * totalSupply * assetReserve) /\\n            tokenReserve /\\n            1e18;\\n\\n        return marketCap;\\n    }\\n}\\n\",\"keccak256\":\"0xc58ced17380e92fc92ecb6de7e3cb83d09e3d5b970b19e491bdefd8ff062468f\",\"license\":\"MIT\"},\"src/IINTPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IINTPair {\\n    function getReserves() external view returns (uint256, uint256);\\n\\n    function assetBalance() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n\\n    function mint(uint256 reserve0, uint256 reserve1) external returns (bool);\\n\\n    function transferAsset(address recipient, uint256 amount) external;\\n\\n    function transferTo(address recipient, uint256 amount) external;\\n\\n    function swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    ) external returns (bool);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function approval(\\n        address _user,\\n        address _token,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3e1d49d8cf5e87366b9636e3d367e31de775ab416a8de279f72eafd93f897af5\",\"license\":\"MIT\"},\"src/INTERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract INTERC20 is ERC20, Ownable {\\n    bool public transferDisabled;\\n\\n    // account => exclude\\n    mapping(address => bool) public isExcluded;\\n\\n    event ExcludeAccount(address account);\\n    event EnableTransfer();\\n\\n    error TransferDisabled();\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 supply_,\\n        address initialOwner_\\n    ) ERC20(name_, symbol_) {\\n        _transferOwnership(initialOwner_);\\n        _mint(initialOwner_, supply_);\\n\\n        transferDisabled = true;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal virtual override {\\n        if (transferDisabled) {\\n            if (!isExcluded[from] && !isExcluded[to]) revert TransferDisabled();\\n        }\\n    }\\n\\n    /**\\n     * @dev Exclude account from transfer limit\\n     * @param account The account to exclude\\n     */\\n    function excludeAccount(address account) external onlyOwner {\\n        isExcluded[account] = true;\\n\\n        emit ExcludeAccount(account);\\n    }\\n\\n    /**\\n     * @notice Only owner can call this function\\n     * @dev Enable transferring tokens without any limit\\n     */\\n    function enableTransfer() external onlyOwner {\\n        transferDisabled = false;\\n\\n        emit EnableTransfer();\\n    }\\n}\\n\",\"keccak256\":\"0x5a99592fb3ff6457f716a3feffa980421de96783f3097207bad8b69bc9b6b265\",\"license\":\"MIT\"},\"src/INTERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./INTERC20.sol\\\";\\n\\ncontract INTERC20Factory {\\n    /**\\n     * @notice Creates a new INTERC20 token\\n     * @param name Token name\\n     * @param symbol Token symbol\\n     * @param totalSupply Initial total supply\\n     * @param initialOwner Initial Owner\\n     * @return token The address of the new token\\n     */\\n    function createToken(\\n        string memory name,\\n        string memory symbol,\\n        uint256 totalSupply,\\n        address initialOwner\\n    ) external returns (address token) {\\n        token = address(new INTERC20(name, symbol, totalSupply, initialOwner));\\n    }\\n}\\n\",\"keccak256\":\"0xc0c08164dc96f2efe74c18273df0abeb8d6a93c8488f236612ba42395bf71d71\",\"license\":\"MIT\"},\"src/INTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./INTPair.sol\\\";\\n\\ncontract INTFactory is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant CREATOR_ROLE = keccak256(\\\"CREATOR_ROLE\\\");\\n\\n    mapping(address => mapping(address => address)) private _pair;\\n\\n    address[] public pairs;\\n\\n    address public router;\\n\\n    address public taxVault;\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n    uint256 public treasuryFeeRatio; // 1 => 1%\\n\\n    event TreasuryFeeRatioUpdated(uint256 oldRatio, uint256 newRatio);\\n\\n    event PairCreated(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        address pair,\\n        uint256 totalPairs\\n    );\\n\\n    error TreasuryFeeRatioTooHigh();\\n    error SameTreasuryFeeRatio();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address taxVault_,\\n        uint256 buyTax_,\\n        uint256 sellTax_,\\n        uint256 treasuryFeeRatio_\\n    ) external initializer {\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        if (treasuryFeeRatio_ > 100) revert TreasuryFeeRatioTooHigh();\\n\\n        taxVault = taxVault_;\\n        buyTax = buyTax_;\\n        sellTax = sellTax_;\\n        treasuryFeeRatio = treasuryFeeRatio_;\\n    }\\n\\n    function _createPair(\\n        address tokenA,\\n        address tokenB\\n    ) internal returns (address) {\\n        require(tokenA != address(0), \\\"Zero addresses are not allowed.\\\");\\n        require(tokenB != address(0), \\\"Zero addresses are not allowed.\\\");\\n\\n        INTPair pair_ = new INTPair(address(this), tokenA, tokenB);\\n\\n        _pair[tokenA][tokenB] = address(pair_);\\n        _pair[tokenB][tokenA] = address(pair_);\\n\\n        pairs.push(address(pair_));\\n\\n        uint256 totalPairs = pairs.length;\\n\\n        emit PairCreated(tokenA, tokenB, address(pair_), totalPairs);\\n\\n        return address(pair_);\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external onlyRole(CREATOR_ROLE) nonReentrant returns (address) {\\n        address pair = _createPair(tokenA, tokenB);\\n\\n        return pair;\\n    }\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) public view returns (address) {\\n        return _pair[tokenA][tokenB];\\n    }\\n\\n    function allPairsLength() public view returns (uint256) {\\n        return pairs.length;\\n    }\\n\\n    function setTaxParams(\\n        address newVault_,\\n        uint256 buyTax_,\\n        uint256 sellTax_\\n    ) public onlyRole(ADMIN_ROLE) {\\n        require(newVault_ != address(0), \\\"Zero addresses are not allowed.\\\");\\n\\n        taxVault = newVault_;\\n        buyTax = buyTax_;\\n        sellTax = sellTax_;\\n    }\\n\\n    function setRouter(address router_) public onlyRole(ADMIN_ROLE) {\\n        router = router_;\\n    }\\n\\n    /**\\n     * @notice Only accounts have the admin role can call this function\\n     * @dev Set the treasury fee ratio\\n     * @param newRatio The new treasury fee ratio\\n     */\\n    function setTreasuryFeeRatio(\\n        uint256 newRatio\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (newRatio > 100) revert TreasuryFeeRatioTooHigh();\\n\\n        uint256 oldRatio = treasuryFeeRatio;\\n        if (newRatio == oldRatio) revert SameTreasuryFeeRatio();\\n\\n        treasuryFeeRatio = newRatio;\\n\\n        emit TreasuryFeeRatioUpdated(oldRatio, newRatio);\\n    }\\n}\\n\",\"keccak256\":\"0x4eb34904b4dc6f86e8c3986999b6b9ee7c3501f07fd7e7c0d8b9294b4ce4b6ac\",\"license\":\"MIT\"},\"src/INTPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./IINTPair.sol\\\";\\nimport \\\"./INTFactory.sol\\\";\\n\\ncontract INTPair is IINTPair, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable factory;\\n    address public immutable tokenA; // meme token\\n    address public immutable tokenB;\\n\\n    struct Pool {\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 k;\\n        uint256 lastUpdated;\\n    }\\n\\n    Pool private _pool;\\n\\n    constructor(address factory_, address token0, address token1) {\\n        require(factory_ != address(0), \\\"Zero addresses are not allowed.\\\");\\n        require(token0 != address(0), \\\"Zero addresses are not allowed.\\\");\\n        require(token1 != address(0), \\\"Zero addresses are not allowed.\\\");\\n\\n        factory = factory_;\\n        tokenA = token0;\\n        tokenB = token1;\\n    }\\n\\n    modifier onlyRouter() {\\n        require(\\n            INTFactory(factory).router() == msg.sender,\\n            \\\"Only router can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    event Mint(uint256 reserve0, uint256 reserve1);\\n\\n    event Swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    );\\n\\n    function mint(\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) public onlyRouter returns (bool) {\\n        require(_pool.lastUpdated == 0, \\\"Already minted\\\");\\n\\n        _pool = Pool({\\n            reserve0: reserve0,\\n            reserve1: reserve1,\\n            k: reserve0 * reserve1,\\n            lastUpdated: block.timestamp\\n        });\\n\\n        emit Mint(reserve0, reserve1);\\n\\n        return true;\\n    }\\n\\n    function swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    ) public onlyRouter returns (bool) {\\n        uint256 _reserve0 = (_pool.reserve0 + amount0In) - amount0Out;\\n        uint256 _reserve1 = (_pool.reserve1 + amount1In) - amount1Out;\\n\\n        _pool = Pool({\\n            reserve0: _reserve0,\\n            reserve1: _reserve1,\\n            k: _pool.k,\\n            lastUpdated: block.timestamp\\n        });\\n\\n        emit Swap(amount0In, amount0Out, amount1In, amount1Out);\\n\\n        return true;\\n    }\\n\\n    function approval(\\n        address _user,\\n        address _token,\\n        uint256 amount\\n    ) public onlyRouter returns (bool) {\\n        require(_user != address(0), \\\"Zero addresses are not allowed.\\\");\\n        require(_token != address(0), \\\"Zero addresses are not allowed.\\\");\\n\\n        IERC20 token = IERC20(_token);\\n\\n        token.forceApprove(_user, amount);\\n\\n        return true;\\n    }\\n\\n    function transferAsset(\\n        address recipient,\\n        uint256 amount\\n    ) public onlyRouter {\\n        require(recipient != address(0), \\\"Zero addresses are not allowed.\\\");\\n\\n        IERC20(tokenB).safeTransfer(recipient, amount);\\n    }\\n\\n    function transferTo(address recipient, uint256 amount) public onlyRouter {\\n        require(recipient != address(0), \\\"Zero addresses are not allowed.\\\");\\n\\n        IERC20(tokenA).safeTransfer(recipient, amount);\\n    }\\n\\n    function getReserves() public view returns (uint256, uint256) {\\n        return (_pool.reserve0, _pool.reserve1);\\n    }\\n\\n    function kLast() public view returns (uint256) {\\n        return _pool.k;\\n    }\\n\\n    function priceALast() public view returns (uint256) {\\n        return _pool.reserve1 / _pool.reserve0;\\n    }\\n\\n    function priceBLast() public view returns (uint256) {\\n        return _pool.reserve0 / _pool.reserve1;\\n    }\\n\\n    function balance() public view returns (uint256) {\\n        return IERC20(tokenA).balanceOf(address(this));\\n    }\\n\\n    function assetBalance() public view returns (uint256) {\\n        return IERC20(tokenB).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xe8981579dd0538b8d8c73c52e8c73f63899b6bec8a53495996d51bc3eaedce5e\",\"license\":\"MIT\"},\"src/INTRouterLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./INTFactory.sol\\\";\\nimport \\\"./IINTPair.sol\\\";\\nimport \\\"./interface/IBonding.sol\\\";\\nimport \\\"./interface/ILock.sol\\\";\\n\\nlibrary INTRouterLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    error FactoryIsZeroAddress();\\n    error AssetTokenIsZeroAddress();\\n\\n    event Buy(\\n        address indexed account,\\n        address indexed token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 assetFee,\\n        uint256 tokenReserve,\\n        uint256 assetReserve,\\n        uint256 timestamp\\n    );\\n    event Sell(\\n        address indexed account,\\n        address indexed token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 assetFee,\\n        uint256 tokenReserve,\\n        uint256 assetReserve,\\n        uint256 timestamp\\n    );\\n\\n    function _getReserves(\\n        INTFactory factory,\\n        address assetToken,\\n        address token\\n    ) internal view returns (uint256 reserveA, uint256 reserveB, uint256 k) {\\n        address pairAddress = factory.getPair(token, assetToken);\\n        IINTPair pair = IINTPair(pairAddress);\\n        (reserveA, reserveB) = pair.getReserves();\\n        k = pair.kLast();\\n    }\\n\\n    function quoteBuy(\\n        INTFactory factory,\\n        address assetToken,\\n        address token,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut, uint256 txFee) {\\n        require(token != address(0), \\\"Zero addresses are not allowed.\\\");\\n\\n        (uint256 reserveA, uint256 reserveB, uint256 k) = _getReserves(\\n            factory,\\n            assetToken,\\n            token\\n        );\\n\\n        uint256 fee = factory.buyTax();\\n        txFee = (fee * amountIn) / 100;\\n        amountIn = amountIn - txFee;\\n\\n        uint256 newReserveB = reserveB + amountIn;\\n        uint256 newReserveA = k / newReserveB;\\n        amountOut = reserveA - newReserveA;\\n    }\\n\\n    function quoteSell(\\n        INTFactory factory,\\n        address assetToken,\\n        address token,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut, uint256 txFee) {\\n        require(token != address(0), \\\"Zero addresses are not allowed.\\\");\\n\\n        (uint256 reserveA, uint256 reserveB, uint256 k) = _getReserves(\\n            factory,\\n            assetToken,\\n            token\\n        );\\n\\n        uint256 newReserveA = reserveA + amountIn;\\n        uint256 newReserveB = k / newReserveA;\\n        amountOut = reserveB - newReserveB;\\n\\n        uint256 fee = factory.sellTax();\\n        txFee = (fee * amountOut) / 100;\\n        amountOut = amountOut - txFee;\\n    }\\n\\n    function addInitialLiquidity(\\n        INTFactory factory,\\n        address assetToken,\\n        address token_,\\n        uint256 amountToken_,\\n        uint256 amountAsset_\\n    ) public returns (uint256, uint256) {\\n        require(token_ != address(0), \\\"Zero addresses are not allowed.\\\");\\n\\n        address pairAddress = factory.getPair(token_, assetToken);\\n\\n        IINTPair pair = IINTPair(pairAddress);\\n\\n        IERC20 token = IERC20(token_);\\n\\n        token.safeTransfer(pairAddress, amountToken_);\\n\\n        pair.mint(amountToken_, amountAsset_);\\n\\n        return (amountToken_, amountAsset_);\\n    }\\n\\n    /**\\n     * @dev Distribute fee to treasury and lock contract based on the `treasuryFeeRatio`\\n     * @param from The address that buying the token, address(0) if selling\\n     * @param pair The pair contract When selling\\n     * @param fromToken The token that is being traded\\n     * @param amount The amount of token that is being traded\\n     */\\n    function collectFee(\\n        INTFactory factory,\\n        address assetToken,\\n        address from,\\n        address pair,\\n        address fromToken,\\n        uint256 amount\\n    ) internal {\\n        uint256 treasuryFeeRatio = factory.treasuryFeeRatio();\\n        uint256 treasuryFee = (amount * treasuryFeeRatio) / 100;\\n        // TODO: Treasury?\\n        address treasuryFeeTo = factory.taxVault();\\n\\n        uint256 lockFee = amount - treasuryFee;\\n        address lockFeeTo = IBonding(address(this)).getTokenLocker(fromToken);\\n\\n        if (from == address(0)) {\\n            // Selling\\n            // Transfer treasury fee to treasury directly\\n            IINTPair(pair).transferAsset(treasuryFeeTo, treasuryFee);\\n\\n            // Transfer lock fee to this contract\\n            IINTPair(pair).transferAsset(address(this), lockFee);\\n        } else {\\n            // Buying\\n            // Transfer treasury fee to treasury directly\\n            IERC20(assetToken).safeTransferFrom(\\n                from,\\n                treasuryFeeTo,\\n                treasuryFee\\n            );\\n\\n            // Transfer lock fee to this contract\\n            IERC20(assetToken).safeTransferFrom(from, address(this), lockFee);\\n        }\\n\\n        // Approve to lock contract to deposit lock fee\\n        IERC20(assetToken).forceApprove(lockFeeTo, lockFee);\\n        // Deposit lock fee to lock contract\\n        ILock(lockFeeTo).depositFee(lockFee);\\n    }\\n\\n    function sell(\\n        INTFactory factory,\\n        address assetToken,\\n        uint256 amountIn,\\n        address tokenAddress,\\n        address to\\n    ) public returns (uint256, uint256) {\\n        require(tokenAddress != address(0), \\\"Zero addresses are not allowed.\\\");\\n        require(to != address(0), \\\"Zero addresses are not allowed.\\\");\\n\\n        address pairAddress = factory.getPair(tokenAddress, assetToken);\\n\\n        IINTPair pair = IINTPair(pairAddress);\\n\\n        IERC20 token = IERC20(tokenAddress);\\n\\n        (uint256 amountOut, uint256 txFee) = quoteSell(\\n            factory,\\n            assetToken,\\n            tokenAddress,\\n            amountIn\\n        );\\n\\n        token.safeTransferFrom(to, pairAddress, amountIn);\\n\\n        pair.transferAsset(to, amountOut);\\n        collectFee(\\n            factory,\\n            assetToken,\\n            address(0),\\n            address(pair),\\n            tokenAddress,\\n            txFee\\n        );\\n\\n        pair.swap(amountIn, 0, 0, amountOut);\\n\\n        (uint256 reserveA, uint256 reserveB) = IINTPair(pair).getReserves();\\n\\n        emit Sell(\\n            to,\\n            tokenAddress,\\n            amountIn,\\n            amountOut,\\n            txFee,\\n            reserveA,\\n            reserveB,\\n            block.timestamp\\n        );\\n\\n        return (amountIn, amountOut);\\n    }\\n\\n    function buy(\\n        INTFactory factory,\\n        address assetToken,\\n        uint256 amountIn,\\n        address tokenAddress,\\n        address to\\n    ) public returns (uint256, uint256) {\\n        require(tokenAddress != address(0), \\\"Zero addresses are not allowed.\\\");\\n        require(to != address(0), \\\"Zero addresses are not allowed.\\\");\\n        require(amountIn > 0, \\\"amountIn must be greater than 0\\\");\\n\\n        address pair = factory.getPair(tokenAddress, assetToken);\\n\\n        (uint256 amountOut, uint256 txFee) = quoteBuy(\\n            factory,\\n            assetToken,\\n            tokenAddress,\\n            amountIn\\n        );\\n        uint256 amount = amountIn - txFee;\\n\\n        IERC20(assetToken).safeTransferFrom(to, pair, amount);\\n\\n        collectFee(factory, assetToken, to, address(0), tokenAddress, txFee);\\n\\n        IINTPair(pair).transferTo(to, amountOut);\\n\\n        IINTPair(pair).swap(0, amountOut, amount, 0);\\n\\n        (uint256 reserveA, uint256 reserveB) = IINTPair(pair).getReserves();\\n\\n        emit Buy(\\n            to,\\n            tokenAddress,\\n            amountOut,\\n            amount,\\n            txFee,\\n            reserveA,\\n            reserveB,\\n            block.timestamp\\n        );\\n\\n        return (amountIn, amountOut);\\n    }\\n\\n    function graduate(\\n        INTFactory factory,\\n        address assetToken,\\n        address tokenAddress\\n    ) public {\\n        require(tokenAddress != address(0), \\\"Zero addresses are not allowed.\\\");\\n        address pair = factory.getPair(tokenAddress, assetToken);\\n        uint256 assetBalance = IINTPair(pair).assetBalance();\\n        uint256 balance = IINTPair(pair).balance();\\n        INTPair(pair).transferAsset(address(this), assetBalance);\\n        INTPair(pair).transferTo(address(this), balance);\\n    }\\n}\\n\",\"keccak256\":\"0xf6290c5d2ac75d2d7d42d36b2fe48b6ab0ebc1c859d916c981efb0beebc4a620\",\"license\":\"MIT\"},\"src/Lock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IBonding } from \\\"./interface/IBonding.sol\\\";\\nimport { ILock } from \\\"./interface/ILock.sol\\\";\\n\\n/**\\n * @title Lock Contract\\n * @notice The contract is created by bonding contract when the meme token generated.\\n * @dev The contract is used for bonding contract to lock/delegate lp token,\\n *      and claim rewards for the token creator after the token graduates.\\n */\\ncontract Lock is ILock {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public immutable lockedTime;\\n\\n    // The meme token of this lock.\\n    address public immutable token;\\n\\n    address public immutable assetToken;\\n\\n    // The bonding contract.\\n    address public immutable bonding;\\n\\n    // The trading fee during the bonding period.\\n    uint256 public tradingFeeAtBonding;\\n\\n    // The address of the LP token to lock.\\n    address public lp;\\n\\n    struct LockedInfo {\\n        uint256 lockedAmount;\\n        uint256 releasedTime;\\n    }\\n\\n    mapping(address => LockedInfo) public lockedInfos;\\n\\n    event SetLP(address newLpAddr);\\n    event LockedLP(uint256 newLockedAmount);\\n    event DepositFee(uint256 newDepositedAmount);\\n    event ClaimForTokenCreator(address indexed tokenCreator, uint256 amount);\\n    event DelegateLPTo(\\n        address indexed lpAddr,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        address _token,\\n        address _assetToken,\\n        address _bonding,\\n        uint256 _lockedTime\\n    ) {\\n        token = _token;\\n        assetToken = _assetToken;\\n        bonding = _bonding;\\n        lockedTime = _lockedTime;\\n    }\\n\\n    modifier onlyBonding() {\\n        if (msg.sender != bonding) revert NotBonding();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Should be called only once.\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Set the LP token address.\\n     * @param _lp The address of the LP token to lock.\\n     */\\n    function setLP(address _lp) external onlyBonding {\\n        lp = _lp;\\n\\n        emit SetLP(_lp);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Locks the specified amount of lp tokens.\\n     * @param lockedAmount The amount of lp tokens to lock.\\n     */\\n    function lockLP(uint256 lockedAmount) external onlyBonding {\\n        address lpAddr = lp;\\n        LockedInfo storage lockedInfo = lockedInfos[lpAddr];\\n\\n        lockedInfo.lockedAmount = lockedInfo.lockedAmount + lockedAmount;\\n        lockedInfo.releasedTime = block.timestamp + lockedTime;\\n\\n        IERC20(lpAddr).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            lockedAmount\\n        );\\n\\n        emit LockedLP(lockedAmount);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @notice Only can be called after the released time.\\n     * @dev Delegates the LP token to the specified address.\\n     * @param delegatee The address to delegate the LP token to.\\n     */\\n    function delegateLPTo(address delegatee) external onlyBonding {\\n        address lpAddr = lp;\\n        LockedInfo storage lockedInfo = lockedInfos[lpAddr];\\n\\n        if (block.timestamp < lockedInfo.releasedTime) revert NotReleased();\\n\\n        IERC20(lpAddr).forceApprove(delegatee, lockedInfo.lockedAmount);\\n\\n        emit DelegateLPTo(lpAddr, delegatee, lockedInfo.lockedAmount);\\n    }\\n\\n    /**\\n     * @notice Before the token graduates, charge a portion of the trading fee when buying and selling.\\n     *         The entire fee can be distributed to the token creator after the token graduates.\\n     * @notice Ideally, the `Bonding` contract will use this function to store fee when trading.\\n     * @dev Deposit the trading fee to the lock contract.\\n     * @param amount The amount of trading fee to deposit.\\n     */\\n    function depositFee(uint256 amount) external {\\n        tradingFeeAtBonding = tradingFeeAtBonding + amount;\\n\\n        IERC20(assetToken).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit DepositFee(amount);\\n    }\\n\\n    /**\\n     * @notice Should be called only once.\\n     * @notice Should be called after the token graduates.\\n     * @dev Claim the rewards for the token creator\\n     */\\n    function claimForTokenCreator() external {\\n        if (!IBonding(bonding).hasGraduated(token))\\n            revert TokenDoesNotGraduate();\\n\\n        address tokenCreator = IBonding(bonding).getTokenCreator(token);\\n\\n        // Distribute rewards to the token creator.\\n        uint256 amount = tradingFeeAtBonding;\\n        tradingFeeAtBonding = 0;\\n        IERC20(assetToken).safeTransfer(tokenCreator, amount);\\n\\n        emit ClaimForTokenCreator(tokenCreator, amount);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Approves token spending for a specified address\\n     * @param spender The address allowed to spend the token\\n     * @param amount The amount of tokens to approve\\n     */\\n    function approveToken(\\n        address _token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyBonding {\\n        IERC20(_token).forceApprove(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x40c99d7fb4cdb1c53bc33f4042804a41cf34037d0aafa63b580500289034b023\",\"license\":\"MIT\"},\"src/LockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./Lock.sol\\\";\\n\\ncontract LockFactory {\\n    /**\\n     * @notice Creates a new Lock for token\\n     * @param _token Token address\\n     * @param _assetToken Asset token address\\n     * @param _bonding Bonding address\\n     * @param _lockedTime The time to lock the lp token\\n     */\\n    function createLock(\\n        address _token,\\n        address _assetToken,\\n        address _bonding,\\n        uint256 _lockedTime\\n    ) external returns (address lock) {\\n        lock = address(new Lock(_token, _assetToken, _bonding, _lockedTime));\\n    }\\n}\\n\",\"keccak256\":\"0x47c7263c9c9b2b337506a4b28d422c01ab01cc2d802aa1b318cad41e47a0b7a3\",\"license\":\"MIT\"},\"src/TokenDataReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./Bonding.sol\\\";\\n\\ncontract TokenDataReader {\\n    Bonding public immutable bonding;\\n\\n    struct Token {\\n        address creator;\\n        address token;\\n        address pair;\\n        address locker;\\n        string description;\\n        string image;\\n        string twitter;\\n        string telegram;\\n        string farcaster;\\n        string website;\\n        Bonding.TokenStatus status;\\n        string name;\\n        string ticker;\\n        uint256 supply;\\n    }\\n\\n    constructor(address _bonding) {\\n        bonding = Bonding(_bonding);\\n    }\\n\\n    /**\\n     * @notice Get token data for a range of tokens\\n     * @param start The starting index in tokenInfos array\\n     * @param size The number of tokens to return\\n     * @return infos Array of Token structs containing token info\\n     */\\n    function getTokenData(\\n        uint256 start,\\n        uint256 size\\n    ) external view returns (Token[] memory infos) {\\n        uint256 length = bonding.getTokenCount();\\n\\n        if (start >= length) {\\n            size = 0;\\n        } else if (start + size > length) {\\n            size = length - start;\\n        }\\n\\n        infos = new Token[](size);\\n\\n        for (uint256 i = 0; i < size; ) {\\n            address tokenAddr = bonding.tokenInfos(start + i);\\n            Token memory info = infos[i];\\n\\n            // Get token info from Bonding contract\\n            (\\n                info.creator,\\n                info.token,\\n                info.pair,\\n                info.locker,\\n                info.description,\\n                info.image,\\n                info.twitter,\\n                info.telegram,\\n                info.farcaster,\\n                info.website,\\n                info.status\\n            ) = bonding.tokenInfo(tokenAddr);\\n\\n            // Get ERC20 info\\n            ERC20 token = ERC20(tokenAddr);\\n            info.name = token.name();\\n            info.ticker = token.symbol();\\n            info.supply = token.totalSupply();\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ce7620929b8848c0a5cfbdf8425e0730395b480fe30a7c79c08ef8a9f47a106\",\"license\":\"MIT\"},\"src/interface/IBonding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IBonding {\\n    enum TokenStatus {\\n        None,\\n        BondingCurve,\\n        Graduated\\n    }\\n\\n    struct Token {\\n        address creator;\\n        address token;\\n        address pair;\\n        address locker;\\n        string description;\\n        uint8[] cores;\\n        string image;\\n        string twitter;\\n        string telegram;\\n        string farcaster;\\n        string website;\\n        bool trading;\\n        bool tradingOnUniswap;\\n    }\\n\\n    function tokenInfo(address token) external view returns (Token memory);\\n\\n    function getTokenLocker(\\n        address tokenAddress\\n    ) external view returns (address);\\n\\n    function getTokenCreator(\\n        address tokenAddress\\n    ) external view returns (address);\\n\\n    function hasGraduated(address tokenAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9fda31e18b8654ea8eff4c0f5aab0ea59ea2ef24d3354d3b2017c97913e3c185\",\"license\":\"MIT\"},\"src/interface/IExtRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IExtRouter {\\n    function quoteAddLiquidity(\\n        uint8,\\n        address[] memory,\\n        uint256[] memory _amountDesireds\\n    ) external view returns (uint256[] memory _amountIn, uint256 liquidity);\\n\\n    function addLiquidity(\\n        uint8 _pairType,\\n        address[] memory _tokens,\\n        uint256[] memory _amountDesireds,\\n        uint256[] memory _amountsMin,\\n        uint256 _minLiquidity,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256[] memory _amounts, uint256 _liquidity);\\n\\n    function getReserves(\\n        address[] calldata _tokens\\n    ) external view returns (uint256 _reserveA, uint256 _reserveB);\\n\\n    function pairFor(\\n        address[] memory tokens,\\n        uint8\\n    ) external view returns (address pair, bool hasPair);\\n}\\n\",\"keccak256\":\"0x76503422c96fdfee993c5537d17da4a2d9adc3497fb07db44161ee694ff3e2bd\",\"license\":\"MIT\"},\"src/interface/ILock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILock {\\n    error NotBonding();\\n    error LockerIsZeroAddress();\\n    error HasLocked();\\n    error TokenDoesNotGraduate();\\n    error NotReleased();\\n\\n    function setLP(address _lp) external;\\n\\n    function lockLP(uint256 lockedAmount) external;\\n\\n    function delegateLPTo(address to) external;\\n\\n    function depositFee(uint256 amount) external;\\n\\n    function claimForTokenCreator() external;\\n\\n    function approveToken(\\n        address _token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2610e0be78b29858b099eead62ce736fc0f49a1e95937aa48cf45c0c948b5750\",\"license\":\"MIT\"},\"src/interface/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IOracle {\\n    function getAssetPrice() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6bdf18baf8409825e8c5dda435970cfd755b2050741effc8f40d73bf9f39ae4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461008057601f61099938819003918201601f19168301916001600160401b038311848410176100845780849260209460405283398101031261008057516001600160a01b038116908190036100805760805260405161090090816100998239608051818181605c0152818161028a015281816102ff015261077f0152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c908163984575591461076d575063b3a89aaa14610032575f80fd5b3461046c57604036600319011261046c576040516378a8956760e01b8152602435906020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610478575f9161073b575b5060043581116106fb5750505f5b6100ab81610823565b906100b960405192836107f4565b808252601f196100c882610823565b015f5b8181106106625750505f5b818110610260578260405160208101916020825280518093526040820192602060408260051b8501019201935f5b8281106101115784840385f35b848403603f19018252855180516001600160a01b039081168652602080830151821690870152604080830151821690870152606080830151909116908601526080808201516101c0918701829052949593949293926101e7916101d3916101bf916101ad9161019a9161018791908901906107cf565b60a08088015190898303908a01526107cf565b60c08087015190888303908901526107cf565b60e085015186820360e08801526107cf565b6101008085015190868303908701526107cf565b6101208084015190858303908601526107cf565b610140918281015193600385101561024c5761023361021f6020959460019787968501526101608086015190858303908601526107cf565b6101808085015190848303908501526107cf565b6101a09283015191909201529701969493019101610104565b634e487b7160e01b5f52602160045260245ffd5b61026c81600435610816565b604051637c13774b60e01b81526004810191909152906020826024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215610478575f92610626575b50835181101561061257600581901b84016020015160405163f5dab71160e01b81526001600160a01b0384811660048301525f90829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa908115610478575f915f915f915f915f915f915f915f915f915f915f916104bf575b50600381101561024c576101408c01526101208b01526101008a015260e089015260c088015260a087015260808601526001600160a01b03908116606086015290811660408086019190915291811660208501529182168352516306fdde0360e01b8152905f908290600490829088165afa908115610478575f916104a5575b506101608201526040516395d89b4160e01b81525f816004816001600160a01b0388165afa938415610478576004946020925f91610483575b506101808401526040516318160ddd60e01b815294859182906001600160a01b03165afa928315610478575f9361043e575b50916101a06001930152016100d6565b92506020833d602011610470575b81610459602093836107f4565b8101031261046c579151916101a061042e565b5f80fd5b3d915061044c565b6040513d5f823e3d90fd5b61049f91503d805f833e61049781836107f4565b8101906108a4565b5f6103fc565b6104b991503d805f833e61049781836107f4565b5f6103c3565b9a50505050505050505050503d805f833e6104da81836107f4565b61016082828101031261046c576104f08261083b565b916104fd6020820161083b565b9261050a6040830161083b565b926105176060840161083b565b92608081015167ffffffffffffffff811161046c5761053b9083830190830161084f565b9260a082015167ffffffffffffffff811161046c5761055f9084840190840161084f565b9260c083015167ffffffffffffffff811161046c576105839082850190850161084f565b9260e081015167ffffffffffffffff811161046c576105a79083830190830161084f565b9261010082015167ffffffffffffffff811161046c576105cc9084840190840161084f565b926101208301519067ffffffffffffffff821161046c57610140916105f591850190850161084f565b92015190600382101561046c57999897969594939291905f610343565b634e487b7160e01b5f52603260045260245ffd5b9091506020813d60201161065a575b81610642602093836107f4565b8101031261046c576106539061083b565b905f6102c2565b3d9150610635565b604051906101c082019180831067ffffffffffffffff8411176106e7576020926040525f81525f838201525f604082015260605f818301528060808301528060a08301528060c08301528060e083015280610100830152806101208301525f610140830152806101608301526101808201525f6101a0820152828287010152016100cb565b634e487b7160e01b5f52604160045260245ffd5b8061070883600435610816565b11610714575b506100a2565b600435810391508111610727575f61070e565b634e487b7160e01b5f52601160045260245ffd5b90506020813d602011610765575b81610756602093836107f4565b8101031261046c57515f610094565b3d9150610749565b3461046c575f36600319011261046c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f5b8381106107bf5750505f910152565b81810151838201526020016107b0565b906020916107e8815180928185528580860191016107ae565b601f01601f1916010190565b90601f8019910116810190811067ffffffffffffffff8211176106e757604052565b9190820180921161072757565b67ffffffffffffffff81116106e75760051b60200190565b51906001600160a01b038216820361046c57565b81601f8201121561046c57805167ffffffffffffffff81116106e75760405192610883601f8301601f1916602001856107f4565b8184526020828401011161046c576108a191602080850191016107ae565b90565b9060208282031261046c57815167ffffffffffffffff811161046c576108a1920161084f56fea2646970667358221220c7d13c5f04b642b65d12eb6e9a2a5ad1f661defd9542b5cd8f972848f7aaf56764736f6c63430008140033",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163984575591461076d575063b3a89aaa14610032575f80fd5b3461046c57604036600319011261046c576040516378a8956760e01b8152602435906020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610478575f9161073b575b5060043581116106fb5750505f5b6100ab81610823565b906100b960405192836107f4565b808252601f196100c882610823565b015f5b8181106106625750505f5b818110610260578260405160208101916020825280518093526040820192602060408260051b8501019201935f5b8281106101115784840385f35b848403603f19018252855180516001600160a01b039081168652602080830151821690870152604080830151821690870152606080830151909116908601526080808201516101c0918701829052949593949293926101e7916101d3916101bf916101ad9161019a9161018791908901906107cf565b60a08088015190898303908a01526107cf565b60c08087015190888303908901526107cf565b60e085015186820360e08801526107cf565b6101008085015190868303908701526107cf565b6101208084015190858303908601526107cf565b610140918281015193600385101561024c5761023361021f6020959460019787968501526101608086015190858303908601526107cf565b6101808085015190848303908501526107cf565b6101a09283015191909201529701969493019101610104565b634e487b7160e01b5f52602160045260245ffd5b61026c81600435610816565b604051637c13774b60e01b81526004810191909152906020826024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215610478575f92610626575b50835181101561061257600581901b84016020015160405163f5dab71160e01b81526001600160a01b0384811660048301525f90829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa908115610478575f915f915f915f915f915f915f915f915f915f915f916104bf575b50600381101561024c576101408c01526101208b01526101008a015260e089015260c088015260a087015260808601526001600160a01b03908116606086015290811660408086019190915291811660208501529182168352516306fdde0360e01b8152905f908290600490829088165afa908115610478575f916104a5575b506101608201526040516395d89b4160e01b81525f816004816001600160a01b0388165afa938415610478576004946020925f91610483575b506101808401526040516318160ddd60e01b815294859182906001600160a01b03165afa928315610478575f9361043e575b50916101a06001930152016100d6565b92506020833d602011610470575b81610459602093836107f4565b8101031261046c579151916101a061042e565b5f80fd5b3d915061044c565b6040513d5f823e3d90fd5b61049f91503d805f833e61049781836107f4565b8101906108a4565b5f6103fc565b6104b991503d805f833e61049781836107f4565b5f6103c3565b9a50505050505050505050503d805f833e6104da81836107f4565b61016082828101031261046c576104f08261083b565b916104fd6020820161083b565b9261050a6040830161083b565b926105176060840161083b565b92608081015167ffffffffffffffff811161046c5761053b9083830190830161084f565b9260a082015167ffffffffffffffff811161046c5761055f9084840190840161084f565b9260c083015167ffffffffffffffff811161046c576105839082850190850161084f565b9260e081015167ffffffffffffffff811161046c576105a79083830190830161084f565b9261010082015167ffffffffffffffff811161046c576105cc9084840190840161084f565b926101208301519067ffffffffffffffff821161046c57610140916105f591850190850161084f565b92015190600382101561046c57999897969594939291905f610343565b634e487b7160e01b5f52603260045260245ffd5b9091506020813d60201161065a575b81610642602093836107f4565b8101031261046c576106539061083b565b905f6102c2565b3d9150610635565b604051906101c082019180831067ffffffffffffffff8411176106e7576020926040525f81525f838201525f604082015260605f818301528060808301528060a08301528060c08301528060e083015280610100830152806101208301525f610140830152806101608301526101808201525f6101a0820152828287010152016100cb565b634e487b7160e01b5f52604160045260245ffd5b8061070883600435610816565b11610714575b506100a2565b600435810391508111610727575f61070e565b634e487b7160e01b5f52601160045260245ffd5b90506020813d602011610765575b81610756602093836107f4565b8101031261046c57515f610094565b3d9150610749565b3461046c575f36600319011261046c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f5b8381106107bf5750505f910152565b81810151838201526020016107b0565b906020916107e8815180928185528580860191016107ae565b601f01601f1916010190565b90601f8019910116810190811067ffffffffffffffff8211176106e757604052565b9190820180921161072757565b67ffffffffffffffff81116106e75760051b60200190565b51906001600160a01b038216820361046c57565b81601f8201121561046c57805167ffffffffffffffff81116106e75760405192610883601f8301601f1916602001856107f4565b8184526020828401011161046c576108a191602080850191016107ae565b90565b9060208282031261046c57815167ffffffffffffffff811161046c576108a1920161084f56fea2646970667358221220c7d13c5f04b642b65d12eb6e9a2a5ad1f661defd9542b5cd8f972848f7aaf56764736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getTokenData(uint256,uint256)": {
        "params": {
          "size": "The number of tokens to return",
          "start": "The starting index in tokenInfos array"
        },
        "returns": {
          "infos": "Array of Token structs containing token info"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenData(uint256,uint256)": {
        "notice": "Get token data for a range of tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}