{
  "address": "0x04a1Cd6e86C3FF51424377B878ce1b24cfcB92Ec",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bonding",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lockedTime",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "lock",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x778df890e5717a7903c735ce3602ba3a8ea66227561bdf15fcc389f8305d6958",
  "receipt": {
    "to": null,
    "from": "0xAc090F282b5941A679e0EB6d07552d8e7578d51c",
    "contractAddress": "0x04a1Cd6e86C3FF51424377B878ce1b24cfcB92Ec",
    "transactionIndex": 58,
    "gasUsed": "821021",
    "logsBloom": "0x
    "blockHash": "0x2d1bcd3b90d3a2e60ff778af641807ce59da9dec9c590ee9cb10ecceac7f26f4",
    "transactionHash": "0x778df890e5717a7903c735ce3602ba3a8ea66227561bdf15fcc389f8305d6958",
    "logs": [],
    "blockNumber": 25330793,
    "cumulativeGasUsed": "17689567",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7bd6f3bf2fb06dddc402a5e51dab3df2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonding\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockedTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createLock(address,address,address,uint256)\":{\"params\":{\"_assetToken\":\"Asset token address\",\"_bonding\":\"Bonding address\",\"_lockedTime\":\"The time to lock the lp token\",\"_token\":\"Token address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createLock(address,address,address,uint256)\":{\"notice\":\"Creates a new Lock for token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/LockFactory.sol\":\"LockFactory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"src/Lock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IBonding } from \\\"./interfaces/IBonding.sol\\\";\\nimport { ILock } from \\\"./interfaces/ILock.sol\\\";\\n\\n/**\\n * @title Lock Contract\\n * @notice The contract is created by bonding contract when the meme token generated.\\n * @dev The contract is used for bonding contract to lock/delegate lp token,\\n *      and claim rewards for the token creator after the token graduates.\\n */\\ncontract Lock is ILock {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public immutable lockedTime;\\n\\n    // The meme token of this lock.\\n    address public immutable token;\\n\\n    address public immutable assetToken;\\n\\n    // The bonding contract.\\n    address public immutable bonding;\\n\\n    // The trading fee during the bonding period.\\n    uint256 public tradingFeeAtBonding;\\n\\n    // The address of the LP token to lock.\\n    address public lp;\\n\\n    struct LockedInfo {\\n        uint256 lockedAmount;\\n        uint256 releasedTime;\\n    }\\n\\n    mapping(address => LockedInfo) public lockedInfos;\\n\\n    event SetLP(address newLpAddr);\\n    event LockedLP(uint256 newLockedAmount);\\n    event DepositFee(uint256 newDepositedAmount);\\n    event ClaimForTokenCreator(address indexed tokenCreator, uint256 amount);\\n    event DelegateLPTo(\\n        address indexed lpAddr,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        address _token,\\n        address _assetToken,\\n        address _bonding,\\n        uint256 _lockedTime\\n    ) {\\n        token = _token;\\n        assetToken = _assetToken;\\n        bonding = _bonding;\\n        lockedTime = _lockedTime;\\n    }\\n\\n    modifier onlyBonding() {\\n        if (msg.sender != bonding) revert NotBonding();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Should be called only once.\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Set the LP token address.\\n     * @param _lp The address of the LP token to lock.\\n     */\\n    function setLP(address _lp) external onlyBonding {\\n        lp = _lp;\\n\\n        emit SetLP(_lp);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Locks the specified amount of lp tokens.\\n     * @param lockedAmount The amount of lp tokens to lock.\\n     */\\n    function lockLP(uint256 lockedAmount) external onlyBonding {\\n        address lpAddr = lp;\\n        LockedInfo storage lockedInfo = lockedInfos[lpAddr];\\n\\n        lockedInfo.lockedAmount = lockedInfo.lockedAmount + lockedAmount;\\n        lockedInfo.releasedTime = block.timestamp + lockedTime;\\n\\n        IERC20(lpAddr).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            lockedAmount\\n        );\\n\\n        emit LockedLP(lockedAmount);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @notice Only can be called after the released time.\\n     * @dev Delegates the LP token to the specified address.\\n     * @param delegatee The address to delegate the LP token to.\\n     */\\n    function delegateLPTo(address delegatee) external onlyBonding {\\n        address lpAddr = lp;\\n        LockedInfo storage lockedInfo = lockedInfos[lpAddr];\\n\\n        if (block.timestamp < lockedInfo.releasedTime) revert NotReleased();\\n\\n        IERC20(lpAddr).forceApprove(delegatee, lockedInfo.lockedAmount);\\n\\n        emit DelegateLPTo(lpAddr, delegatee, lockedInfo.lockedAmount);\\n    }\\n\\n    /**\\n     * @notice Before the token graduates, charge a portion of the trading fee when buying and selling.\\n     *         The entire fee can be distributed to the token creator after the token graduates.\\n     * @notice Ideally, the `Bonding` contract will use this function to store fee when trading.\\n     * @dev Deposit the trading fee to the lock contract.\\n     * @param amount The amount of trading fee to deposit.\\n     */\\n    function depositFee(uint256 amount) external {\\n        tradingFeeAtBonding = tradingFeeAtBonding + amount;\\n\\n        IERC20(assetToken).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit DepositFee(amount);\\n    }\\n\\n    /**\\n     * @notice Should be called only once.\\n     * @notice Should be called after the token graduates.\\n     * @dev Claim the rewards for the token creator\\n     */\\n    function claimForTokenCreator() external {\\n        if (!IBonding(bonding).hasGraduated(token))\\n            revert TokenDoesNotGraduate();\\n\\n        address tokenCreator = IBonding(bonding).getTokenCreator(token);\\n\\n        // Distribute rewards to the token creator.\\n        uint256 amount = tradingFeeAtBonding;\\n        tradingFeeAtBonding = 0;\\n        IERC20(assetToken).safeTransfer(tokenCreator, amount);\\n\\n        emit ClaimForTokenCreator(tokenCreator, amount);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Approves token spending for a specified address\\n     * @param spender The address allowed to spend the token\\n     * @param amount The amount of tokens to approve\\n     */\\n    function approveToken(\\n        address _token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyBonding {\\n        IERC20(_token).forceApprove(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x792e4b0727391a38fa00a040821021fe10d88df7a62b852dd3df9eaad3073c42\",\"license\":\"MIT\"},\"src/LockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./Lock.sol\\\";\\n\\ncontract LockFactory {\\n    /**\\n     * @notice Creates a new Lock for token\\n     * @param _token Token address\\n     * @param _assetToken Asset token address\\n     * @param _bonding Bonding address\\n     * @param _lockedTime The time to lock the lp token\\n     */\\n    function createLock(\\n        address _token,\\n        address _assetToken,\\n        address _bonding,\\n        uint256 _lockedTime\\n    ) external returns (address lock) {\\n        lock = address(new Lock(_token, _assetToken, _bonding, _lockedTime));\\n    }\\n}\\n\",\"keccak256\":\"0x47c7263c9c9b2b337506a4b28d422c01ab01cc2d802aa1b318cad41e47a0b7a3\",\"license\":\"MIT\"},\"src/interfaces/IBonding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IBonding {\\n    enum TokenStatus {\\n        None,\\n        BondingCurve,\\n        Graduated\\n    }\\n\\n    struct Token {\\n        address creator;\\n        address token;\\n        address pair;\\n        address locker;\\n        string description;\\n        uint8[] cores;\\n        string image;\\n        string twitter;\\n        string telegram;\\n        string farcaster;\\n        string website;\\n        bool trading;\\n        bool tradingOnUniswap;\\n    }\\n\\n    function tokenInfo(address token) external view returns (Token memory);\\n\\n    function getTokenLocker(\\n        address tokenAddress\\n    ) external view returns (address);\\n\\n    function getTokenCreator(\\n        address tokenAddress\\n    ) external view returns (address);\\n\\n    function hasGraduated(address tokenAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9fda31e18b8654ea8eff4c0f5aab0ea59ea2ef24d3354d3b2017c97913e3c185\",\"license\":\"MIT\"},\"src/interfaces/ILock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILock {\\n    error NotBonding();\\n    error LockerIsZeroAddress();\\n    error HasLocked();\\n    error TokenDoesNotGraduate();\\n    error NotReleased();\\n\\n    function setLP(address _lp) external;\\n\\n    function lockLP(uint256 lockedAmount) external;\\n\\n    function delegateLPTo(address to) external;\\n\\n    function depositFee(uint256 amount) external;\\n\\n    function claimForTokenCreator() external;\\n\\n    function approveToken(\\n        address _token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2610e0be78b29858b099eead62ce736fc0f49a1e95937aa48cf45c0c948b5750\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610df7908161001b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f90813560e01c6312729cc214610027575f80fd5b346100ea5760803660031901126100ea576001600160a01b0390600435828116908190036100e6576024358381168091036100e257604435908482168092036100de57610cd3928385019385851067ffffffffffffffff8611176100ca5791859391608095936100ef8639835260208301526040820152606435606082015203019083f09081156100bf576020925060405191168152f35b6040513d84823e3d90fd5b634e487b7160e01b88526041600452602488fd5b8580fd5b8480fd5b8380fd5b5080fdfe610100346100e457601f610cd338819003918201601f19168301916001600160401b038311848410176100e8578084926080946040528339810103126100e457610048816100fc565b90610055602082016100fc565b6060610063604084016100fc565b9201519260a05260c05260e052608052604051610bc2908161011182396080518181816101d20152610374015260a05181818160c40152610570015260c0518181816102a5015281816106660152610750015260e05181818161016d0152818161020a01528181610300015281816103d9015281816104c901526105990152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036100e45756fe6080604081815260049182361015610015575f80fd5b5f92833560e01c9182631083f7611461073c5750816321e84774146105485781632f34d282146104a3578163313c06a01461047a57816337e6122a146103b357816340519a53146102de578163423c485a146102565781636334a0671461023957816398457559146101f5578163a8b38205146101ba578163da3e33971461013857508063e6adb749146100f75763fc0c546a146100b1575f80fd5b346100f357816003193601126100f357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b50346100f35760203660031901126100f3579081906001600160a01b0361011c61077f565b1681526002602052206001815491015482519182526020820152f35b8383346100f35760603660031901126100f35761015361077f565b90602435906001600160a01b039081831683036101b657817f00000000000000000000000000000000000000000000000000000000000000001633036101a757506101a49394506044359216610a6b565b80f35b5163e1b90b8760e01b81528590fd5b8480fd5b5050346100f357816003193601126100f357602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346100f357816003193601126100f357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346100f357816003193601126100f357602091549051908152f35b9050346102da5760203660031901126102da577f12197207b0a54de931fdf21dc8066c293dc29b9dd4875c6b64a36c6a36ff904091602091359061029b828654610799565b85556102d28230337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107f0565b51908152a180f35b8280fd5b919050346102da5760203660031901126102da578135916001600160a01b03907f0000000000000000000000000000000000000000000000000000000000000000821633036103a55750916020916102d2827f2ba3ba3a9d6f7b2fc7c20e57ea65650f43fc6c3c29979a9e4413e80b5061c36795600154168088526002865283882061036b838254610799565b815560016103997f000000000000000000000000000000000000000000000000000000000000000042610799565b910155309033906107f0565b825163e1b90b8760e01b8152fd5b9050346102da5760203660031901126102da576103ce61077f565b6001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216330361046a578160015416928386526002602052848620906001820154421061045c575091602091836104507f92b7540d4b36a3c993d2a8d3ec8a1fcb927cd686e85f19db44911e4959d51c1195548388610a6b565b5495519586521693a380f35b85516309316dab60e41b8152fd5b835163e1b90b8760e01b81528390fd5b5050346100f357816003193601126100f35760015490516001600160a01b039091168152602090f35b9050346102da5760203660031901126102da576104be61077f565b6001600160a01b03917f00000000000000000000000000000000000000000000000000000000000000008316330361053a5750916020917f722f2571a13f56fad6fa923289bcb1dd6d7d57c8ccb2bdf278bb565771a2a747931690816bffffffffffffffffffffffff60a01b600154161760015551908152a180f35b835163e1b90b8760e01b8152fd5b9050346102da57826003193601126102da57815163fa1653bd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081168383018190527f00000000000000000000000000000000000000000000000000000000000000008216936020938481602481895afa908115610732578891610705575b50156106f75790602484928751968793849263c78418b960e01b84528301525afa80156106ed578590610695575b8554868055855163a9059cbb60e01b858201526001600160a01b03831660248201526044808201839052815290957fefb5cc9cd012f169d98024b62e929a9c2e25635b461ac3f684ff6158d2a1788795509061068b906106636064826107ba565b847f000000000000000000000000000000000000000000000000000000000000000016610863565b519485521692a280f35b50918181813d83116106e6575b6106ac81836107ba565b810103126101b657519180831683036101b6577fefb5cc9cd012f169d98024b62e929a9c2e25635b461ac3f684ff6158d2a1788792610602565b503d6106a2565b84513d87823e3d90fd5b85516321554f7360e11b8152fd5b6107259150853d871161072b575b61071d81836107ba565b81019061084b565b5f6105d4565b503d610713565b87513d8a823e3d90fd5b8490346100f357816003193601126100f3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600435906001600160a01b038216820361079557565b5f80fd5b919082018092116107a657565b634e487b7160e01b5f52601160045260245ffd5b90601f8019910116810190811067ffffffffffffffff8211176107dc57604052565b634e487b7160e01b5f52604160045260245ffd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff8411176107dc5761084992604052610863565b565b90816020910312610795575180151581036107955790565b60408051908101916001600160a01b031667ffffffffffffffff8311828410176107dc576108d2926040525f806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16108cc61095a565b91610999565b805190828215928315610942575b505050156108eb5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b610952935082018101910161084b565b5f82816108e0565b3d15610994573d9067ffffffffffffffff82116107dc5760405191610989601f8201601f1916602001846107ba565b82523d5f602084013e565b606090565b919290156109fb57508151156109ad575090565b3b156109b65790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015610a0e5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401525f935b828510610a52575050604492505f838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350610a30565b60405163095ea7b360e01b602082018181526001600160a01b038516602484015260448084019690965294825294939092610aa76064856107ba565b83515f926001600160a01b039291858416918591829182855af190610aca61095a565b82610b5a575b5081610b4f575b5015610ae7575b50505050509050565b60405196602088015216602486015280604486015260448552608085019085821067ffffffffffffffff831117610b3b5750610b309394610b2b9160405282610863565b610863565b805f80808080610ade565b634e487b7160e01b81526041600452602490fd5b90503b15155f610ad7565b80519192508115918215610b72575b5050905f610ad0565b610b85925060208091830101910161084b565b5f80610b6956fea2646970667358221220979e47d15fe5eda5d8aad180c3cee3226490ac935ec4c80ccd2b17013223815164736f6c63430008140033a264697066735822122037d0f307e730703fd9e893643f501775a642e721fefca989864fadd1d5902b1464736f6c63430008140033",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f90813560e01c6312729cc214610027575f80fd5b346100ea5760803660031901126100ea576001600160a01b0390600435828116908190036100e6576024358381168091036100e257604435908482168092036100de57610cd3928385019385851067ffffffffffffffff8611176100ca5791859391608095936100ef8639835260208301526040820152606435606082015203019083f09081156100bf576020925060405191168152f35b6040513d84823e3d90fd5b634e487b7160e01b88526041600452602488fd5b8580fd5b8480fd5b8380fd5b5080fdfe610100346100e457601f610cd338819003918201601f19168301916001600160401b038311848410176100e8578084926080946040528339810103126100e457610048816100fc565b90610055602082016100fc565b6060610063604084016100fc565b9201519260a05260c05260e052608052604051610bc2908161011182396080518181816101d20152610374015260a05181818160c40152610570015260c0518181816102a5015281816106660152610750015260e05181818161016d0152818161020a01528181610300015281816103d9015281816104c901526105990152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036100e45756fe6080604081815260049182361015610015575f80fd5b5f92833560e01c9182631083f7611461073c5750816321e84774146105485781632f34d282146104a3578163313c06a01461047a57816337e6122a146103b357816340519a53146102de578163423c485a146102565781636334a0671461023957816398457559146101f5578163a8b38205146101ba578163da3e33971461013857508063e6adb749146100f75763fc0c546a146100b1575f80fd5b346100f357816003193601126100f357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b50346100f35760203660031901126100f3579081906001600160a01b0361011c61077f565b1681526002602052206001815491015482519182526020820152f35b8383346100f35760603660031901126100f35761015361077f565b90602435906001600160a01b039081831683036101b657817f00000000000000000000000000000000000000000000000000000000000000001633036101a757506101a49394506044359216610a6b565b80f35b5163e1b90b8760e01b81528590fd5b8480fd5b5050346100f357816003193601126100f357602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346100f357816003193601126100f357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346100f357816003193601126100f357602091549051908152f35b9050346102da5760203660031901126102da577f12197207b0a54de931fdf21dc8066c293dc29b9dd4875c6b64a36c6a36ff904091602091359061029b828654610799565b85556102d28230337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107f0565b51908152a180f35b8280fd5b919050346102da5760203660031901126102da578135916001600160a01b03907f0000000000000000000000000000000000000000000000000000000000000000821633036103a55750916020916102d2827f2ba3ba3a9d6f7b2fc7c20e57ea65650f43fc6c3c29979a9e4413e80b5061c36795600154168088526002865283882061036b838254610799565b815560016103997f000000000000000000000000000000000000000000000000000000000000000042610799565b910155309033906107f0565b825163e1b90b8760e01b8152fd5b9050346102da5760203660031901126102da576103ce61077f565b6001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216330361046a578160015416928386526002602052848620906001820154421061045c575091602091836104507f92b7540d4b36a3c993d2a8d3ec8a1fcb927cd686e85f19db44911e4959d51c1195548388610a6b565b5495519586521693a380f35b85516309316dab60e41b8152fd5b835163e1b90b8760e01b81528390fd5b5050346100f357816003193601126100f35760015490516001600160a01b039091168152602090f35b9050346102da5760203660031901126102da576104be61077f565b6001600160a01b03917f00000000000000000000000000000000000000000000000000000000000000008316330361053a5750916020917f722f2571a13f56fad6fa923289bcb1dd6d7d57c8ccb2bdf278bb565771a2a747931690816bffffffffffffffffffffffff60a01b600154161760015551908152a180f35b835163e1b90b8760e01b8152fd5b9050346102da57826003193601126102da57815163fa1653bd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081168383018190527f00000000000000000000000000000000000000000000000000000000000000008216936020938481602481895afa908115610732578891610705575b50156106f75790602484928751968793849263c78418b960e01b84528301525afa80156106ed578590610695575b8554868055855163a9059cbb60e01b858201526001600160a01b03831660248201526044808201839052815290957fefb5cc9cd012f169d98024b62e929a9c2e25635b461ac3f684ff6158d2a1788795509061068b906106636064826107ba565b847f000000000000000000000000000000000000000000000000000000000000000016610863565b519485521692a280f35b50918181813d83116106e6575b6106ac81836107ba565b810103126101b657519180831683036101b6577fefb5cc9cd012f169d98024b62e929a9c2e25635b461ac3f684ff6158d2a1788792610602565b503d6106a2565b84513d87823e3d90fd5b85516321554f7360e11b8152fd5b6107259150853d871161072b575b61071d81836107ba565b81019061084b565b5f6105d4565b503d610713565b87513d8a823e3d90fd5b8490346100f357816003193601126100f3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600435906001600160a01b038216820361079557565b5f80fd5b919082018092116107a657565b634e487b7160e01b5f52601160045260245ffd5b90601f8019910116810190811067ffffffffffffffff8211176107dc57604052565b634e487b7160e01b5f52604160045260245ffd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff8411176107dc5761084992604052610863565b565b90816020910312610795575180151581036107955790565b60408051908101916001600160a01b031667ffffffffffffffff8311828410176107dc576108d2926040525f806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16108cc61095a565b91610999565b805190828215928315610942575b505050156108eb5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b610952935082018101910161084b565b5f82816108e0565b3d15610994573d9067ffffffffffffffff82116107dc5760405191610989601f8201601f1916602001846107ba565b82523d5f602084013e565b606090565b919290156109fb57508151156109ad575090565b3b156109b65790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015610a0e5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401525f935b828510610a52575050604492505f838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350610a30565b60405163095ea7b360e01b602082018181526001600160a01b038516602484015260448084019690965294825294939092610aa76064856107ba565b83515f926001600160a01b039291858416918591829182855af190610aca61095a565b82610b5a575b5081610b4f575b5015610ae7575b50505050509050565b60405196602088015216602486015280604486015260448552608085019085821067ffffffffffffffff831117610b3b5750610b309394610b2b9160405282610863565b610863565b805f80808080610ade565b634e487b7160e01b81526041600452602490fd5b90503b15155f610ad7565b80519192508115918215610b72575b5050905f610ad0565b610b85925060208091830101910161084b565b5f80610b6956fea2646970667358221220979e47d15fe5eda5d8aad180c3cee3226490ac935ec4c80ccd2b17013223815164736f6c63430008140033a264697066735822122037d0f307e730703fd9e893643f501775a642e721fefca989864fadd1d5902b1464736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createLock(address,address,address,uint256)": {
        "params": {
          "_assetToken": "Asset token address",
          "_bonding": "Bonding address",
          "_lockedTime": "The time to lock the lp token",
          "_token": "Token address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createLock(address,address,address,uint256)": {
        "notice": "Creates a new Lock for token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}