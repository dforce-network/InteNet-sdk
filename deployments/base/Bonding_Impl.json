{
  "address": "0x5Df7409F43e1E0211027836078dcf515DCA52615",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyTrading",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InputArrayMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAssetPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegatee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLocker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMarketCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOracle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReserves",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidityTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketCapTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTrading",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongBoostStage",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAssetToken",
          "type": "address"
        }
      ],
      "name": "AssetTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stage",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "BoostStageThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stage",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "name": "Boosted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "DelegateLPTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newExtRouter",
          "type": "address"
        }
      ],
      "name": "ExtRouterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        }
      ],
      "name": "FactorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "FeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMarketCap",
          "type": "uint256"
        }
      ],
      "name": "GradMarketCapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "Graduated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMarketCap",
          "type": "uint256"
        }
      ],
      "name": "InitialMarketCapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        }
      ],
      "name": "InitializeSupplySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Launched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLockFactory",
          "type": "address"
        }
      ],
      "name": "LockFactorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLockedTime",
          "type": "uint256"
        }
      ],
      "name": "LockedTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "RouterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTokenFactory",
          "type": "address"
        }
      ],
      "name": "TokenFactorySet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BOOSTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ticker",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "cores",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "img",
          "type": "string"
        },
        {
          "internalType": "string[4]",
          "name": "urls",
          "type": "string[4]"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "boost1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ticker",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "cores",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "img",
          "type": "string"
        },
        {
          "internalType": "string[4]",
          "name": "urls",
          "type": "string[4]"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "boost1For",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "boost2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "boost3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "boostInfo",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "stage",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boostInfos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "boostStageThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "calculateMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegateLPTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "delegatees",
          "type": "address[]"
        }
      ],
      "name": "delegateLPToBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extRouter",
      "outputs": [
        {
          "internalType": "contract IExtRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract INTFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBoostCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBoostInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "stage",
              "type": "uint8"
            }
          ],
          "internalType": "struct Bonding.BoostInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenLocker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gradMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "hasGraduated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeTo_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "extRouter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenFactory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lockFactory_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockedTime_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "oracle_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialMarketCap_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gradMarketCap_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isBoostToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ticker",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "cores",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "img",
          "type": "string"
        },
        {
          "internalType": "string[4]",
          "name": "urls",
          "type": "string[4]"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "launch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ticker",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "cores",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "img",
          "type": "string"
        },
        {
          "internalType": "string[4]",
          "name": "urls",
          "type": "string[4]"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        }
      ],
      "name": "launchFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockFactory",
      "outputs": [
        {
          "internalType": "contract LockFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAssetToken",
          "type": "address"
        }
      ],
      "name": "setAssetToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "stage",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setBoostStageThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "setBoostStageThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newExtRouter",
          "type": "address"
        }
      ],
      "name": "setExtRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMarketCap",
          "type": "uint256"
        }
      ],
      "name": "setGradMarketCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMarketCap",
          "type": "uint256"
        }
      ],
      "name": "setInitialMarketCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        }
      ],
      "name": "setInitialSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLockFactory",
          "type": "address"
        }
      ],
      "name": "setLockFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLockedTime",
          "type": "uint256"
        }
      ],
      "name": "setLockedTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTokenFactory",
          "type": "address"
        }
      ],
      "name": "setTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "internalType": "contract INTERC20Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "twitter",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "telegram",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "farcaster",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "internalType": "enum Bonding.TokenStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenInfos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeafce9e63c334467ff428b59a6e914a35de85716b60909efff4754376da1e613",
  "receipt": {
    "to": null,
    "from": "0xAc090F282b5941A679e0EB6d07552d8e7578d51c",
    "contractAddress": "0x5Df7409F43e1E0211027836078dcf515DCA52615",
    "transactionIndex": 53,
    "gasUsed": "4757453",
    "logsBloom": "0x
    "blockHash": "0x1c44be5351d2ea95eb30f18dbcc22e3cf7081ed22bdacf54ff85437a7fe683d1",
    "transactionHash": "0xeafce9e63c334467ff428b59a6e914a35de85716b60909efff4754376da1e613",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 25330981,
        "transactionHash": "0xeafce9e63c334467ff428b59a6e914a35de85716b60909efff4754376da1e613",
        "address": "0x5Df7409F43e1E0211027836078dcf515DCA52615",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 78,
        "blockHash": "0x1c44be5351d2ea95eb30f18dbcc22e3cf7081ed22bdacf54ff85437a7fe683d1"
      }
    ],
    "blockNumber": 25330981,
    "cumulativeGasUsed": "14099825",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7bd6f3bf2fb06dddc402a5e51dab3df2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyTrading\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputArrayMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAssetPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegatee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLocker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMarketCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReserves\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketCapTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTrading\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongBoostStage\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAssetToken\",\"type\":\"address\"}],\"name\":\"AssetTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"BoostStageThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"Boosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"DelegateLPTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newExtRouter\",\"type\":\"address\"}],\"name\":\"ExtRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"FactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketCap\",\"type\":\"uint256\"}],\"name\":\"GradMarketCapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"Graduated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketCap\",\"type\":\"uint256\"}],\"name\":\"InitialMarketCapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"InitializeSupplySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLockFactory\",\"type\":\"address\"}],\"name\":\"LockFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockedTime\",\"type\":\"uint256\"}],\"name\":\"LockedTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"RouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTokenFactory\",\"type\":\"address\"}],\"name\":\"TokenFactorySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOSTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"cores\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"img\",\"type\":\"string\"},{\"internalType\":\"string[4]\",\"name\":\"urls\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"boost1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"cores\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"img\",\"type\":\"string\"},{\"internalType\":\"string[4]\",\"name\":\"urls\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"boost1For\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"boost2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"boost3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boostInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"boostStageThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calculateMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegateLPTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"delegatees\",\"type\":\"address[]\"}],\"name\":\"delegateLPToBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extRouter\",\"outputs\":[{\"internalType\":\"contract IExtRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract INTFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoostCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBoostInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"}],\"internalType\":\"struct Bonding.BoostInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gradMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"hasGraduated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTo_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"extRouter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFactory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockFactory_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedTime_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMarketCap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gradMarketCap_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isBoostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ticker\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"cores\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"img\",\"type\":\"string\"},{\"internalType\":\"string[4]\",\"name\":\"urls\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ticker\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"cores\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"img\",\"type\":\"string\"},{\"internalType\":\"string[4]\",\"name\":\"urls\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"}],\"name\":\"launchFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFactory\",\"outputs\":[{\"internalType\":\"contract LockFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAssetToken\",\"type\":\"address\"}],\"name\":\"setAssetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setBoostStageThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setBoostStageThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newExtRouter\",\"type\":\"address\"}],\"name\":\"setExtRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketCap\",\"type\":\"uint256\"}],\"name\":\"setGradMarketCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketCap\",\"type\":\"uint256\"}],\"name\":\"setInitialMarketCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setInitialSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLockFactory\",\"type\":\"address\"}],\"name\":\"setLockFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockedTime\",\"type\":\"uint256\"}],\"name\":\"setLockedTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenFactory\",\"type\":\"address\"}],\"name\":\"setTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"contract INTERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"farcaster\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"enum Bonding.TokenStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"boost1(string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Only callable by owner. Adds liquidity via external router\",\"params\":{\"assetAmount\":\"Amount of asset tokens to add as liquidity\",\"assetAmountMin\":\"Minimum amount of asset tokens that must be added as liquidity\",\"cores\":\"Array of core values\",\"deadline\":\"Timestamp after which the transaction will revert\",\"desc\":\"Description of the token\",\"img\":\"Image URL for the token\",\"minLiquidity\":\"Minimum amount of liquidity tokens that must be minted\",\"name\":\"The name of the token\",\"ticker\":\"The ticker symbol of the token\",\"tokenAmount\":\"Amount of tokens to add as liquidity\",\"tokenAmountMin\":\"Minimum amount of tokens that must be added as liquidity\",\"urls\":\"Array of 4 URLs (twitter, telegram, farcaster, website)\"}},\"boost1For(address,string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Only callable by owner. Adds liquidity via external router\",\"params\":{\"assetAmount\":\"Amount of asset tokens to add as liquidity\",\"assetAmountMin\":\"Minimum amount of asset tokens that must be added as liquidity\",\"cores\":\"Array of core values\",\"creator\":\"The creator of the token\",\"deadline\":\"Timestamp after which the transaction will revert\",\"desc\":\"Description of the token\",\"img\":\"Image URL for the token\",\"minLiquidity\":\"Minimum amount of liquidity tokens that must be minted\",\"name\":\"The name of the token\",\"ticker\":\"The ticker symbol of the token\",\"tokenAmount\":\"Amount of tokens to add as liquidity\",\"tokenAmountMin\":\"Minimum amount of tokens that must be added as liquidity\",\"urls\":\"Array of 4 URLs (twitter, telegram, farcaster, website)\"}},\"boost2(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Only callable by booster. Adds liquidity via external router\",\"params\":{\"assetAmount\":\"Amount of asset tokens to add as liquidity\",\"assetAmountMin\":\"Minimum amount of asset tokens that must be added as liquidity\",\"deadline\":\"Timestamp after which the transaction will revert\",\"minLiquidity\":\"Minimum amount of liquidity tokens that must be minted\",\"token\":\"Address of token to boost\",\"tokenAmount\":\"Amount of tokens to add as liquidity\",\"tokenAmountMin\":\"Minimum amount of tokens that must be added as liquidity\"}},\"boost3(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Only callable by owner. Adds liquidity via external router\",\"params\":{\"assetAmount\":\"Amount of asset tokens to add as liquidity\",\"assetAmountMin\":\"Minimum amount of asset tokens that must be added as liquidity\",\"deadline\":\"Timestamp after which the transaction will revert\",\"minLiquidity\":\"Minimum amount of liquidity tokens that must be minted\",\"token\":\"Address of token to boost\",\"tokenAmount\":\"Amount of tokens to add as liquidity\",\"tokenAmountMin\":\"Minimum amount of tokens that must be added as liquidity\"}},\"calculateMarketCap(address)\":{\"params\":{\"token\":\"The token address to calculate market cap for\"},\"returns\":{\"_0\":\"marketCap The calculated market cap in asset token value in 18 decimals\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"delegateLPTo(address,address)\":{\"details\":\"Delegate LP token to the specified address.\",\"params\":{\"delegatee\":\"The address to delegate the LP token to.\",\"tokenAddr\":\"The address of the token to delegate its LP token.\"}},\"delegateLPToBatch(address[],address[])\":{\"details\":\"Delegate LP token to the specified address for multiple tokens.\",\"params\":{\"delegatees\":\"The addresses to delegate the LP tokens to.\",\"tokens\":\"The addresses of the tokens to delegate their LP tokens.\"}},\"getBoostCount()\":{\"returns\":{\"_0\":\"The length of boostInfos array\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenCount()\":{\"returns\":{\"_0\":\"The length of tokenInfos array\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAssetToken(address)\":{\"details\":\"Set the asset token address\",\"params\":{\"newAssetToken\":\"The new asset token address\"}},\"setBoostStageThreshold(uint8,uint256)\":{\"params\":{\"stage\":\"The boost stage number (1-3)\",\"threshold\":\"The threshold amount required for this stage\"}},\"setBoostStageThresholds(uint256[])\":{\"params\":{\"thresholds\":\"Array of threshold amounts for stages 1-3\"}},\"setExtRouter(address)\":{\"details\":\"Set the external router address\",\"params\":{\"newExtRouter\":\"The new external router address\"}},\"setFactory(address)\":{\"details\":\"Set the factory address\",\"params\":{\"newFactory\":\"The new factory address\"}},\"setFee(uint256,address)\":{\"details\":\"Set the fee and fee recipient\",\"params\":{\"newFee\":\"New fee amount\",\"newFeeTo\":\"New fee recipient\"}},\"setGradMarketCap(uint256)\":{\"details\":\"Set the graduation market cap threshold\",\"params\":{\"newMarketCap\":\"The new graduation market cap threshold\"}},\"setInitialMarketCap(uint256)\":{\"details\":\"Set the initial market cap threshold\",\"params\":{\"newMarketCap\":\"The new initial market cap threshold\"}},\"setInitialSupply(uint256)\":{\"details\":\"Set the initial supply for generating a new token\",\"params\":{\"newSupply\":\"New initial supply\"}},\"setLockFactory(address)\":{\"details\":\"Set the lock factory address\",\"params\":{\"newLockFactory\":\"The new lock factory address\"}},\"setLockedTime(uint256)\":{\"details\":\"Set the locked time for lp tokens that locked in the locker contract\",\"params\":{\"newLockedTime\":\"The new locked time\"}},\"setOracle(address)\":{\"details\":\"Set the oracle address\",\"params\":{\"newOracle\":\"The new oracle address\"}},\"setTokenFactory(address)\":{\"details\":\"Set the token factory address\",\"params\":{\"newTokenFactory\":\"The new token factory address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ProfileNotExist()\":[{\"notice\":\"============================================ =                  ERRORS                  = ============================================\"}]},\"events\":{\"Launched(address,address,uint256,uint8,uint256)\":{\"notice\":\"============================================ =                 EVENTS                   = ============================================\"}},\"kind\":\"user\",\"methods\":{\"boost1(string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Boost liquidity for a token by adding token and asset pairs\"},\"boost1For(address,string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Boost liquidity for a token by adding token and asset pairs\"},\"boost2(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Boost Stage 2 for a token by adding token and asset pairs\"},\"boost3(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Boost Stage 3 for a token by adding token and asset pairs\"},\"calculateMarketCap(address)\":{\"notice\":\"Calculate the market cap of a token using oracle price and liquidity reserves\"},\"delegateLPTo(address,address)\":{\"notice\":\"LP token should have been released in its locker contract.\"},\"delegateLPToBatch(address[],address[])\":{\"notice\":\"LP token should have been released in its locker contract.\"},\"getBoostCount()\":{\"notice\":\"Get the total number of boost created through bonding\"},\"getTokenCount()\":{\"notice\":\"Get the total number of tokens created through bonding\"},\"setAssetToken(address)\":{\"notice\":\"Owner should ensure the asset token address is correct\"},\"setBoostStageThreshold(uint8,uint256)\":{\"notice\":\"Set threshold for a boost stage\"},\"setBoostStageThresholds(uint256[])\":{\"notice\":\"Set thresholds for all boost stages in one transaction\"},\"setExtRouter(address)\":{\"notice\":\"Owner should ensure the external router address is correct\"},\"setFactory(address)\":{\"notice\":\"Owner should ensure the factory address is correct\"},\"setLockFactory(address)\":{\"notice\":\"Owner should ensure the lock factory address is correct\"},\"setTokenFactory(address)\":{\"notice\":\"Owner should ensure the token factory address is correct\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Bonding.sol\":\"Bonding\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"src/Bonding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified from https://github.com/sourlodine/Pump.fun-Smart-Contract/blob/main/contracts/PumpFun.sol\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./INTFactory.sol\\\";\\nimport \\\"./libraries/INTRouterLibrary.sol\\\";\\nimport \\\"./INTERC20.sol\\\";\\nimport \\\"./Lock.sol\\\";\\nimport \\\"./INTERC20Factory.sol\\\";\\nimport \\\"./LockFactory.sol\\\";\\n\\nimport \\\"./interfaces/IINTPair.sol\\\";\\nimport \\\"./interfaces/IExtRouter.sol\\\";\\nimport \\\"./interfaces/IExtPairFactory.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\ncontract Bonding is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    Ownable2StepUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    // Act as treasury\\n    address public feeTo;\\n\\n    INTFactory public factory;\\n    INTERC20Factory public tokenFactory;\\n    LockFactory public lockFactory;\\n    uint256 public initialSupply;\\n    uint256 public fee;\\n    IExtRouter public extRouter;\\n    address public assetToken;\\n\\n    enum TokenStatus {\\n        None,\\n        BondingCurve,\\n        Graduated\\n    }\\n\\n    struct Token {\\n        address creator;\\n        address token;\\n        address pair; // Bonding: internal pair, Graduated: external pair\\n        address locker;\\n        string description;\\n        uint8[] cores;\\n        string image;\\n        string twitter;\\n        string telegram;\\n        string farcaster;\\n        string website;\\n        TokenStatus status;\\n    }\\n\\n    mapping(address => Token) public tokenInfo;\\n    address[] public tokenInfos;\\n\\n    struct BoostInfo {\\n        uint8 stage;\\n    }\\n\\n    // Separate mapping for boost information\\n    mapping(address => BoostInfo) public boostInfo;\\n    address[] public boostInfos;\\n\\n    bytes32 public constant BOOSTER_ROLE = keccak256(\\\"BOOSTER_ROLE\\\");\\n\\n    // Mapping to store boost stage thresholds\\n    mapping(uint8 => uint256) public boostStageThresholds;\\n\\n    // The locked times for lp tokens that locked in the locker contract\\n    uint256 public lockedTime;\\n\\n    IOracle public oracle;\\n\\n    uint256 public initialMarketCap;\\n    uint256 public gradMarketCap;\\n\\n    /**\\n     * ============================================\\n     * =                 EVENTS                   =\\n     * ============================================\\n     */\\n    event Launched(\\n        address indexed token,\\n        address indexed pair,\\n        uint256 totalTokens,\\n        uint8 tokenType,\\n        uint256 timestamp\\n    );\\n    event Graduated(address indexed token, address indexed lp);\\n    event DelegateLPTo(address indexed token, address indexed delegatee);\\n    event Boosted(\\n        address indexed token,\\n        uint8 stage,\\n        uint256 amount,\\n        uint256 assetAmount\\n    );\\n\\n    event BoostStageThresholdUpdated(uint8 stage, uint256 threshold);\\n    event InitializeSupplySet(uint256 newSupply);\\n    event FeeSet(uint256 newFee, address newFeeTo);\\n    event OracleSet(address newOracle);\\n    event InitialMarketCapSet(uint256 newMarketCap);\\n    event GradMarketCapSet(uint256 newMarketCap);\\n    event LockedTimeSet(uint256 newLockedTime);\\n    event FactorySet(address newFactory);\\n    event RouterSet(address newRouter);\\n    event TokenFactorySet(address newTokenFactory);\\n    event LockFactorySet(address newLockFactory);\\n    event ExtRouterSet(address newExtRouter);\\n    event AssetTokenSet(address newAssetToken);\\n\\n    /**\\n     * ============================================\\n     * =                  ERRORS                  =\\n     * ============================================\\n     */\\n\\n    error ProfileNotExist();\\n    error InvalidToken();\\n    error NotTrading();\\n    error AlreadyTrading();\\n    error InsufficientAmount();\\n    error InvalidDelegatee();\\n    error InvalidLocker();\\n    error InputArrayMismatch();\\n    error InvalidLockTime();\\n    error InvalidRate();\\n    error InvalidStage();\\n    error InvalidThreshold();\\n    error InvalidReserves();\\n    error InvalidAssetPrice();\\n    error InvalidOracle();\\n    error InvalidMarketCap();\\n    error WrongBoostStage();\\n    error LiquidityTooLow();\\n    error MarketCapTooLow();\\n\\n    /**\\n     * ============================================\\n     * =                FUNCTIONS                 =\\n     * ============================================\\n     */\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address assetToken_,\\n        address factory_,\\n        address feeTo_,\\n        uint256 fee_,\\n        uint256 initialSupply_,\\n        address extRouter_,\\n        address tokenFactory_,\\n        address lockFactory_,\\n        uint256 lockedTime_,\\n        address oracle_,\\n        uint256 initialMarketCap_,\\n        uint256 gradMarketCap_\\n    ) external initializer {\\n        __Ownable2Step_init();\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n\\n        assetToken = assetToken_;\\n\\n        factory = INTFactory(factory_);\\n        tokenFactory = INTERC20Factory(tokenFactory_);\\n        lockFactory = LockFactory(lockFactory_);\\n\\n        feeTo = feeTo_;\\n        fee = fee_;\\n\\n        initialSupply = initialSupply_;\\n\\n        extRouter = IExtRouter(extRouter_);\\n\\n        lockedTime = lockedTime_;\\n        oracle = IOracle(oracle_);\\n\\n        initialMarketCap = initialMarketCap_;\\n        gradMarketCap = gradMarketCap_;\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer ownership along with the DEFAULT_ADMIN_ROLE\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        super._transferOwnership(newOwner);\\n        _grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n    }\\n\\n    /**\\n     * @dev Set the initial supply for generating a new token\\n     * @param newSupply New initial supply\\n     */\\n    function setInitialSupply(uint256 newSupply) public onlyOwner {\\n        initialSupply = newSupply;\\n\\n        emit InitializeSupplySet(newSupply);\\n    }\\n\\n    /**\\n     * @dev Set the fee and fee recipient\\n     * @param newFee New fee amount\\n     * @param newFeeTo New fee recipient\\n     */\\n    function setFee(uint256 newFee, address newFeeTo) public onlyOwner {\\n        fee = newFee;\\n        feeTo = newFeeTo;\\n\\n        emit FeeSet(newFee, newFeeTo);\\n    }\\n\\n    /**\\n     * @dev Set the oracle address\\n     * @param newOracle The new oracle address\\n     */\\n    function setOracle(address newOracle) public onlyOwner {\\n        if (IOracle(newOracle).getAssetPrice() == 0) revert InvalidOracle();\\n\\n        oracle = IOracle(newOracle);\\n\\n        emit OracleSet(newOracle);\\n    }\\n\\n    /**\\n     * @dev Set the initial market cap threshold\\n     * @param newMarketCap The new initial market cap threshold\\n     */\\n    function setInitialMarketCap(uint256 newMarketCap) public onlyOwner {\\n        if (newMarketCap == 0) revert InvalidMarketCap();\\n\\n        initialMarketCap = newMarketCap;\\n\\n        emit InitialMarketCapSet(newMarketCap);\\n    }\\n\\n    /**\\n     * @dev Set the graduation market cap threshold\\n     * @param newMarketCap The new graduation market cap threshold\\n     */\\n    function setGradMarketCap(uint256 newMarketCap) public onlyOwner {\\n        if (newMarketCap < initialMarketCap) revert InvalidMarketCap();\\n\\n        gradMarketCap = newMarketCap;\\n\\n        emit GradMarketCapSet(newMarketCap);\\n    }\\n\\n    /**\\n     * @dev Set the locked time for lp tokens that locked in the locker contract\\n     * @param newLockedTime The new locked time\\n     */\\n    function setLockedTime(uint256 newLockedTime) public onlyOwner {\\n        if (newLockedTime <= 365 days) revert InvalidLockTime();\\n        lockedTime = newLockedTime;\\n\\n        emit LockedTimeSet(newLockedTime);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the factory address is correct\\n     * @dev Set the factory address\\n     * @param newFactory The new factory address\\n     */\\n    function setFactory(address newFactory) public onlyOwner {\\n        factory = INTFactory(newFactory);\\n\\n        emit FactorySet(newFactory);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the token factory address is correct\\n     * @dev Set the token factory address\\n     * @param newTokenFactory The new token factory address\\n     */\\n    function setTokenFactory(address newTokenFactory) public onlyOwner {\\n        tokenFactory = INTERC20Factory(newTokenFactory);\\n\\n        emit TokenFactorySet(newTokenFactory);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the lock factory address is correct\\n     * @dev Set the lock factory address\\n     * @param newLockFactory The new lock factory address\\n     */\\n    function setLockFactory(address newLockFactory) public onlyOwner {\\n        lockFactory = LockFactory(newLockFactory);\\n\\n        emit LockFactorySet(newLockFactory);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the external router address is correct\\n     * @dev Set the external router address\\n     * @param newExtRouter The new external router address\\n     */\\n    function setExtRouter(address newExtRouter) public onlyOwner {\\n        extRouter = IExtRouter(newExtRouter);\\n\\n        emit ExtRouterSet(newExtRouter);\\n    }\\n\\n    /**\\n     * @notice Owner should ensure the asset token address is correct\\n     * @dev Set the asset token address\\n     * @param newAssetToken The new asset token address\\n     */\\n    function setAssetToken(address newAssetToken) public onlyOwner {\\n        assetToken = newAssetToken;\\n\\n        emit AssetTokenSet(newAssetToken);\\n    }\\n\\n    function _createToken(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls\\n    ) internal returns (address token) {\\n        token = tokenFactory.createToken(\\n            string.concat(_name, \\\" by InteNet\\\"),\\n            _ticker,\\n            initialSupply,\\n            address(this)\\n        );\\n\\n        // Create a lock contract for the token\\n        address lock = lockFactory.createLock(\\n            token,\\n            assetToken,\\n            address(this),\\n            lockedTime\\n        );\\n\\n        Token memory tmpToken = Token({\\n            creator: _creator,\\n            token: token,\\n            pair: address(0),\\n            locker: lock,\\n            description: desc,\\n            cores: cores,\\n            image: img,\\n            twitter: urls[0],\\n            telegram: urls[1],\\n            farcaster: urls[2],\\n            website: urls[3],\\n            status: TokenStatus.BondingCurve\\n        });\\n\\n        tokenInfo[address(token)] = tmpToken;\\n        tokenInfos.push(address(token));\\n    }\\n\\n    function _launchInternal(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 purchaseAmount\\n    ) internal returns (address, address, uint256) {\\n        if (IERC20(assetToken).balanceOf(msg.sender) < purchaseAmount)\\n            revert InsufficientAmount();\\n\\n        uint256 feeAmount = fee;\\n        if (feeAmount > 0)\\n            IERC20(assetToken).safeTransferFrom(msg.sender, feeTo, feeAmount);\\n\\n        address token = _createToken(\\n            _creator,\\n            _name,\\n            _ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls\\n        );\\n\\n        address _pair = factory.createPair(token, assetToken);\\n\\n        // create pair in external AMM to reserve the boost fee pair\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = assetToken;\\n        tokens[1] = token;\\n        IExtPairFactory(extRouter.factory()).createPair(\\n            tokens,\\n            1, // PairType.Volatile\\n            abi.encodePacked(uint256(1)) // FeeType.Boost\\n        );\\n\\n        // Enable pair contract to transfer tokens\\n        INTERC20(token).excludeAccount(_pair);\\n\\n        uint256 liquidity = (initialMarketCap * 1e18) / oracle.getAssetPrice();\\n        INTRouterLibrary.addInitialLiquidity(\\n            factory,\\n            assetToken,\\n            token,\\n            initialSupply,\\n            liquidity\\n        );\\n\\n        tokenInfo[token].pair = _pair;\\n        uint256 totalTokens = tokenInfos.length;\\n        emit Launched(token, _pair, totalTokens, 0, block.timestamp);\\n\\n        uint256 initialPurchase = (purchaseAmount - feeAmount);\\n        if (initialPurchase != 0) {\\n            INTRouterLibrary.buy(\\n                factory,\\n                assetToken,\\n                initialPurchase,\\n                token,\\n                msg.sender\\n            );\\n        }\\n\\n        return (token, _pair, totalTokens);\\n    }\\n\\n    function launchFor(\\n        address _creator,\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 purchaseAmount\\n    ) public nonReentrant returns (address, address, uint256) {\\n        return\\n            _launchInternal(\\n                _creator,\\n                _name,\\n                _ticker,\\n                cores,\\n                desc,\\n                img,\\n                urls,\\n                purchaseAmount\\n            );\\n    }\\n\\n    function launch(\\n        string memory _name,\\n        string memory _ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 purchaseAmount\\n    ) public nonReentrant returns (address, address, uint256) {\\n        return\\n            _launchInternal(\\n                msg.sender,\\n                _name,\\n                _ticker,\\n                cores,\\n                desc,\\n                img,\\n                urls,\\n                purchaseAmount\\n            );\\n    }\\n\\n    function sell(\\n        uint256 amountIn,\\n        address tokenAddress\\n    ) public returns (bool) {\\n        if (tokenInfo[tokenAddress].status != TokenStatus.BondingCurve)\\n            revert NotTrading();\\n\\n        INTRouterLibrary.sell(\\n            factory,\\n            assetToken,\\n            amountIn,\\n            tokenAddress,\\n            msg.sender\\n        );\\n\\n        return true;\\n    }\\n\\n    function buy(\\n        uint256 amountIn,\\n        address tokenAddress\\n    ) public returns (bool) {\\n        if (tokenInfo[tokenAddress].status != TokenStatus.BondingCurve)\\n            revert NotTrading();\\n\\n        INTRouterLibrary.buy(\\n            factory,\\n            assetToken,\\n            amountIn,\\n            tokenAddress,\\n            msg.sender\\n        );\\n\\n        if (calculateMarketCap(tokenAddress) >= gradMarketCap) {\\n            _graduate(tokenAddress);\\n        }\\n\\n        return true;\\n    }\\n\\n    function quoteBuy(\\n        address token_,\\n        uint256 amountIn_\\n    ) external view returns (uint256, uint256) {\\n        return\\n            INTRouterLibrary.quoteBuy(factory, assetToken, token_, amountIn_);\\n    }\\n\\n    function quoteSell(\\n        address token_,\\n        uint256 amountIn_\\n    ) public view returns (uint256, uint256) {\\n        return\\n            INTRouterLibrary.quoteSell(factory, assetToken, token_, amountIn_);\\n    }\\n\\n    function _graduate(address tokenAddress) internal {\\n        Token storage _token = tokenInfo[tokenAddress];\\n\\n        // Sanity check\\n        if (tokenInfo[tokenAddress].status == TokenStatus.Graduated)\\n            revert AlreadyTrading();\\n\\n        INTERC20 token_ = INTERC20(tokenAddress);\\n\\n        // Transfer asset tokens to bonding contract\\n        IINTPair pair = IINTPair(_token.pair);\\n\\n        uint256 assetBalance = pair.assetBalance();\\n        uint256 tokenBalance = pair.balance();\\n\\n        INTRouterLibrary.graduate(factory, assetToken, tokenAddress);\\n\\n        // Enable token transferring without limit\\n        token_.enableTransfer();\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = assetToken;\\n        tokens[1] = tokenAddress;\\n        (address lp, ) = extRouter.pairFor(tokens, 1);\\n\\n        // update LP address in locker contract\\n        address locker = _token.locker;\\n        ILock(locker).setLP(lp);\\n\\n        _extRouterAddLiquidity(\\n            lp,\\n            locker,\\n            tokenAddress,\\n            assetToken,\\n            tokenBalance,\\n            assetBalance,\\n            tokenBalance,\\n            assetBalance,\\n            0,\\n            block.timestamp\\n        );\\n\\n        _token.status = TokenStatus.Graduated;\\n        _token.pair = lp;\\n\\n        emit Graduated(tokenAddress, lp);\\n    }\\n\\n    // Delegate LP token to the specified address.\\n    function _delegateLPTo(address tokenAddr, address delegatee) internal {\\n        if (delegatee == address(0)) revert InvalidDelegatee();\\n\\n        Token storage _tokenInfo = tokenInfo[tokenAddr];\\n        if (_tokenInfo.locker == address(0)) revert InvalidLocker();\\n\\n        ILock lockContract = ILock(_tokenInfo.locker);\\n        lockContract.delegateLPTo(delegatee);\\n\\n        emit DelegateLPTo(tokenAddr, delegatee);\\n    }\\n\\n    /**\\n     * @notice LP token should have been released in its locker contract.\\n     * @dev Delegate LP token to the specified address.\\n     * @param tokenAddr The address of the token to delegate its LP token.\\n     * @param delegatee The address to delegate the LP token to.\\n     */\\n    function delegateLPTo(\\n        address tokenAddr,\\n        address delegatee\\n    ) external onlyOwner {\\n        _delegateLPTo(tokenAddr, delegatee);\\n    }\\n\\n    /**\\n     * @notice LP token should have been released in its locker contract.\\n     * @dev Delegate LP token to the specified address for multiple tokens.\\n     * @param tokens The addresses of the tokens to delegate their LP tokens.\\n     * @param delegatees The addresses to delegate the LP tokens to.\\n     */\\n    function delegateLPToBatch(\\n        address[] calldata tokens,\\n        address[] calldata delegatees\\n    ) external onlyOwner {\\n        if (tokens.length != delegatees.length) revert InputArrayMismatch();\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i; i < len; ) {\\n            _delegateLPTo(tokens[i], delegatees[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function hasGraduated(address tokenAddress) external view returns (bool) {\\n        return tokenInfo[tokenAddress].status == TokenStatus.Graduated;\\n    }\\n\\n    function getTokenLocker(\\n        address tokenAddress\\n    ) external view returns (address) {\\n        Token storage token = tokenInfo[tokenAddress];\\n\\n        return token.locker;\\n    }\\n\\n    function getTokenCreator(\\n        address tokenAddress\\n    ) external view returns (address) {\\n        Token storage token = tokenInfo[tokenAddress];\\n\\n        return token.creator;\\n    }\\n\\n    /**\\n     * @notice Get the total number of tokens created through bonding\\n     * @return The length of tokenInfos array\\n     */\\n    function getTokenCount() external view returns (uint256) {\\n        return tokenInfos.length;\\n    }\\n\\n    function _boost1(\\n        address creator,\\n        string memory name,\\n        string memory ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) internal {\\n        // boostStageThreshold and asset price are all 18 decimals\\n        if (\\n            assetAmount * oracle.getAssetPrice() * 2 <\\n            boostStageThresholds[1] * 1e18\\n        ) {\\n            revert LiquidityTooLow();\\n        }\\n\\n        address token = _createToken(\\n            creator,\\n            name,\\n            ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls\\n        );\\n\\n        Token storage _token = tokenInfo[token];\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = assetToken;\\n        tokens[1] = token;\\n\\n        // The boost pair creation is permissioned\\n        address pair = IExtPairFactory(extRouter.factory()).createPair(\\n            tokens,\\n            1, // PairType.Volatile\\n            abi.encodePacked(uint256(1)) // FeeType.Boost\\n        );\\n\\n        _token.status = TokenStatus.Graduated;\\n        _token.pair = pair;\\n\\n        // Update LP address in locker contract\\n        address locker = _token.locker;\\n        ILock(locker).setLP(pair);\\n\\n        // Record boost information\\n        boostInfo[token] = BoostInfo({ stage: 1 });\\n        boostInfos.push(token);\\n\\n        INTERC20(token).enableTransfer();\\n\\n        emit Launched(token, pair, tokenInfos.length, 1, block.timestamp);\\n\\n        // Provide Initial liquidity via external router\\n        IERC20(assetToken).safeTransferFrom(feeTo, address(this), assetAmount);\\n\\n        // Added amounts should match intended as it's the initial liquidity\\n        (, uint256 tokenAdded, uint256 assetAdded) = _extRouterAddLiquidity(\\n            pair,\\n            locker,\\n            token,\\n            assetToken,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n\\n        // Approve the remaining token for future boost\\n        ILock(locker).approveToken(\\n            token,\\n            address(this),\\n            initialSupply - tokenAdded\\n        );\\n\\n        emit Boosted(token, 1, tokenAdded, assetAdded);\\n    }\\n\\n    /**\\n     * @notice Boost liquidity for a token by adding token and asset pairs\\n     * @dev Only callable by owner. Adds liquidity via external router\\n     * @param creator The creator of the token\\n     * @param name The name of the token\\n     * @param ticker The ticker symbol of the token\\n     * @param cores Array of core values\\n     * @param desc Description of the token\\n     * @param img Image URL for the token\\n     * @param urls Array of 4 URLs (twitter, telegram, farcaster, website)\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost1For(\\n        address creator,\\n        string memory name,\\n        string memory ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost1(\\n            creator,\\n            name,\\n            ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Boost liquidity for a token by adding token and asset pairs\\n     * @dev Only callable by owner. Adds liquidity via external router\\n     * @param name The name of the token\\n     * @param ticker The ticker symbol of the token\\n     * @param cores Array of core values\\n     * @param desc Description of the token\\n     * @param img Image URL for the token\\n     * @param urls Array of 4 URLs (twitter, telegram, farcaster, website)\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost1(\\n        string memory name,\\n        string memory ticker,\\n        uint8[] memory cores,\\n        string memory desc,\\n        string memory img,\\n        string[4] memory urls,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost1(\\n            msg.sender,\\n            name,\\n            ticker,\\n            cores,\\n            desc,\\n            img,\\n            urls,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Boost Stage 2 for a token by adding token and asset pairs\\n     * @dev Only callable by booster. Adds liquidity via external router\\n     * @param token Address of token to boost\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost2(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost(\\n            2,\\n            token,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Boost Stage 3 for a token by adding token and asset pairs\\n     * @dev Only callable by owner. Adds liquidity via external router\\n     * @param token Address of token to boost\\n     * @param tokenAmount Amount of tokens to add as liquidity\\n     * @param assetAmount Amount of asset tokens to add as liquidity\\n     * @param tokenAmountMin Minimum amount of tokens that must be added as liquidity\\n     * @param assetAmountMin Minimum amount of asset tokens that must be added as liquidity\\n     * @param minLiquidity Minimum amount of liquidity tokens that must be minted\\n     * @param deadline Timestamp after which the transaction will revert\\n     */\\n    function boost3(\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) external onlyRole(BOOSTER_ROLE) {\\n        _boost(\\n            3,\\n            token,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n    }\\n\\n    function _boost(\\n        uint8 stage,\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    ) internal {\\n        BoostInfo storage _boostInfo = boostInfo[token];\\n        if (_boostInfo.stage + 1 != stage) revert WrongBoostStage();\\n\\n        if (calculateMarketCap(token) < boostStageThresholds[stage]) {\\n            revert MarketCapTooLow();\\n        }\\n\\n        Token storage _token = tokenInfo[token];\\n        address _locker = _token.locker;\\n\\n        IERC20(assetToken).safeTransferFrom(feeTo, address(this), assetAmount);\\n        IERC20(token).safeTransferFrom(_locker, address(this), tokenAmount);\\n\\n        // _extRouterAddLiquidity will return remaining token and asset\\n        (, uint256 tokenAdded, uint256 assetAdded) = _extRouterAddLiquidity(\\n            _token.pair,\\n            _locker,\\n            token,\\n            assetToken,\\n            tokenAmount,\\n            assetAmount,\\n            tokenAmountMin,\\n            assetAmountMin,\\n            minLiquidity,\\n            deadline\\n        );\\n\\n        _boostInfo.stage++;\\n\\n        emit Boosted(token, stage, tokenAdded, assetAdded);\\n    }\\n\\n    // Helper function to check if token is boosted\\n    function isBoostToken(address token) public view returns (bool) {\\n        return boostInfo[token].stage != 0;\\n    }\\n\\n    // Get boost information\\n    function getBoostInfo(\\n        address token\\n    ) public view returns (BoostInfo memory) {\\n        return boostInfo[token];\\n    }\\n\\n    /**\\n     * @notice Get the total number of boost created through bonding\\n     * @return The length of boostInfos array\\n     */\\n    function getBoostCount() external view returns (uint256) {\\n        return boostInfos.length;\\n    }\\n\\n    function _extRouterAddLiquidity(\\n        address lp,\\n        address locker,\\n        address token,\\n        address asset,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 tokenAmountMin,\\n        uint256 assetAmountMin,\\n        uint256 minLiquidity,\\n        uint256 deadline\\n    )\\n        internal\\n        returns (uint256 liquidity, uint256 tokenAdded, uint256 assetAdded)\\n    {\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = asset;\\n        tokens[1] = token;\\n\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[0] = assetAmount;\\n        amounts[1] = tokenAmount;\\n\\n        uint256[] memory mins = new uint256[](2);\\n        mins[0] = assetAmountMin;\\n        mins[1] = tokenAmountMin;\\n\\n        IERC20(token).forceApprove(address(extRouter), tokenAmount);\\n        IERC20(asset).forceApprove(address(extRouter), assetAmount);\\n\\n        uint256[] memory added;\\n        (added, liquidity) = extRouter.addLiquidity(\\n            1,\\n            tokens,\\n            amounts,\\n            mins,\\n            minLiquidity,\\n            address(this),\\n            deadline\\n        );\\n\\n        assetAdded = added[0];\\n        tokenAdded = added[1];\\n\\n        IERC20(lp).forceApprove(locker, liquidity);\\n        ILock(locker).lockLP(liquidity);\\n\\n        uint256 tokenBal = IERC20(token).balanceOf(address(this));\\n        uint256 assetBal = IERC20(asset).balanceOf(address(this));\\n\\n        if (tokenBal != 0) {\\n            IERC20(token).safeTransfer(locker, tokenBal);\\n        }\\n\\n        if (assetBal != 0) {\\n            IERC20(asset).safeTransfer(feeTo, assetBal);\\n        }\\n    }\\n\\n    function _setBoostStageThresholdInternal(\\n        uint8 stage,\\n        uint256 threshold\\n    ) internal {\\n        if (stage == 0) revert InvalidStage();\\n        if (threshold <= boostStageThresholds[stage - 1])\\n            revert InvalidThreshold();\\n        boostStageThresholds[stage] = threshold;\\n\\n        emit BoostStageThresholdUpdated(stage, threshold);\\n    }\\n\\n    /**\\n     * @notice Set threshold for a boost stage\\n     * @param stage The boost stage number (1-3)\\n     * @param threshold The threshold amount required for this stage\\n     */\\n    function setBoostStageThreshold(\\n        uint8 stage,\\n        uint256 threshold\\n    ) external onlyOwner {\\n        if (stage > 3) revert InvalidStage();\\n\\n        _setBoostStageThresholdInternal(stage, threshold);\\n    }\\n\\n    /**\\n     * @notice Set thresholds for all boost stages in one transaction\\n     * @param thresholds Array of threshold amounts for stages 1-3\\n     */\\n    function setBoostStageThresholds(\\n        uint256[] calldata thresholds\\n    ) external onlyOwner {\\n        if (thresholds.length != 3) revert InputArrayMismatch();\\n\\n        for (uint8 i = 0; i < 3; i++) {\\n            _setBoostStageThresholdInternal(i + 1, thresholds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the market cap of a token using oracle price and liquidity reserves\\n     * @param token The token address to calculate market cap for\\n     * @return marketCap The calculated market cap in asset token value in 18 decimals\\n     */\\n    function calculateMarketCap(address token) public returns (uint256) {\\n        Token storage _token = tokenInfo[token];\\n        TokenStatus status = _token.status;\\n        if (status == TokenStatus.None) revert InvalidToken();\\n\\n        uint256 assetPrice = IOracle(oracle).getAssetPrice();\\n        if (assetPrice == 0) revert InvalidAssetPrice();\\n\\n        uint256 tokenReserve;\\n        uint256 assetReserve;\\n        address pair = _token.pair;\\n\\n        if (status == TokenStatus.BondingCurve) {\\n            (tokenReserve, assetReserve) = IINTPair(pair).getReserves();\\n        } else {\\n            (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair)\\n                .getReserves();\\n            bool isToken0 = token < assetToken;\\n\\n            (tokenReserve, assetReserve) = isToken0\\n                ? (reserve0, reserve1)\\n                : (reserve1, reserve0);\\n        }\\n\\n        if (tokenReserve == 0 || assetReserve == 0) revert InvalidReserves();\\n\\n        // Get total supply\\n        uint256 totalSupply = IERC20(token).totalSupply();\\n\\n        // Calculate market cap: totalSupply * tokenPrice * assetPrice / 1e18\\n        uint256 marketCap = (assetPrice * totalSupply * assetReserve) /\\n            tokenReserve /\\n            1e18;\\n\\n        return marketCap;\\n    }\\n}\\n\",\"keccak256\":\"0xfbf169ac7d860f7d2241bed06a50b47b31e7fbec86ebc6a357ef8c5ea1c5441b\",\"license\":\"MIT\"},\"src/INTERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract INTERC20 is ERC20, Ownable {\\n    bool public transferDisabled;\\n\\n    // account => exclude\\n    mapping(address => bool) public isExcluded;\\n\\n    event ExcludeAccount(address account);\\n    event EnableTransfer();\\n\\n    error TransferDisabled();\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 supply_,\\n        address initialOwner_\\n    ) ERC20(name_, symbol_) {\\n        _transferOwnership(initialOwner_);\\n        _mint(initialOwner_, supply_);\\n\\n        transferDisabled = true;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal virtual override {\\n        if (transferDisabled) {\\n            if (!isExcluded[from] && !isExcluded[to]) revert TransferDisabled();\\n        }\\n    }\\n\\n    /**\\n     * @dev Exclude account from transfer limit\\n     * @param account The account to exclude\\n     */\\n    function excludeAccount(address account) external onlyOwner {\\n        isExcluded[account] = true;\\n\\n        emit ExcludeAccount(account);\\n    }\\n\\n    /**\\n     * @notice Only owner can call this function\\n     * @dev Enable transferring tokens without any limit\\n     */\\n    function enableTransfer() external onlyOwner {\\n        transferDisabled = false;\\n\\n        emit EnableTransfer();\\n    }\\n}\\n\",\"keccak256\":\"0x5a99592fb3ff6457f716a3feffa980421de96783f3097207bad8b69bc9b6b265\",\"license\":\"MIT\"},\"src/INTERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./INTERC20.sol\\\";\\n\\ncontract INTERC20Factory {\\n    /**\\n     * @notice Creates a new INTERC20 token\\n     * @param name Token name\\n     * @param symbol Token symbol\\n     * @param totalSupply Initial total supply\\n     * @param initialOwner Initial Owner\\n     * @return token The address of the new token\\n     */\\n    function createToken(\\n        string memory name,\\n        string memory symbol,\\n        uint256 totalSupply,\\n        address initialOwner\\n    ) external returns (address token) {\\n        token = address(new INTERC20(name, symbol, totalSupply, initialOwner));\\n    }\\n}\\n\",\"keccak256\":\"0xc0c08164dc96f2efe74c18273df0abeb8d6a93c8488f236612ba42395bf71d71\",\"license\":\"MIT\"},\"src/INTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./INTPair.sol\\\";\\n\\ncontract INTFactory is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant CREATOR_ROLE = keccak256(\\\"CREATOR_ROLE\\\");\\n\\n    mapping(address => mapping(address => address)) private _pair;\\n\\n    address[] public pairs;\\n\\n    address public router;\\n\\n    address public treasury;\\n    uint256 public buyFee;\\n    uint256 public sellFee;\\n    uint256 public treasuryFeeRatio; // 1 => 1%\\n\\n    event TreasuryUpdated(address oldTreasury, address newTreasury);\\n    event BuyFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event SellFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event TreasuryFeeRatioUpdated(uint256 oldRatio, uint256 newRatio);\\n\\n    event PairCreated(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        address pair,\\n        uint256 totalPairs\\n    );\\n\\n    error TokenIsZeroAddress();\\n    error BuyFeeTooHigh();\\n    error SellFeeTooHigh();\\n    error TreasuryIsZeroAddress();\\n    error TreasuryFeeRatioTooHigh();\\n    error SameTreasuryFeeRatio();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address treasury_,\\n        uint256 buyFee_,\\n        uint256 sellFee_,\\n        uint256 treasuryFeeRatio_\\n    ) external initializer {\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        if (buyFee_ > 100) revert BuyFeeTooHigh();\\n        if (sellFee_ > 100) revert SellFeeTooHigh();\\n        if (treasuryFeeRatio_ > 100) revert TreasuryFeeRatioTooHigh();\\n\\n        treasury = treasury_;\\n        buyFee = buyFee_;\\n        sellFee = sellFee_;\\n        treasuryFeeRatio = treasuryFeeRatio_;\\n    }\\n\\n    function _createPair(\\n        address tokenA,\\n        address tokenB\\n    ) internal returns (address) {\\n        if (tokenA == address(0)) revert TokenIsZeroAddress();\\n        if (tokenB == address(0)) revert TokenIsZeroAddress();\\n\\n        INTPair pair_ = new INTPair(address(this), tokenA, tokenB);\\n\\n        _pair[tokenA][tokenB] = address(pair_);\\n        _pair[tokenB][tokenA] = address(pair_);\\n\\n        pairs.push(address(pair_));\\n\\n        uint256 totalPairs = pairs.length;\\n\\n        emit PairCreated(tokenA, tokenB, address(pair_), totalPairs);\\n\\n        return address(pair_);\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external onlyRole(CREATOR_ROLE) nonReentrant returns (address) {\\n        address pair = _createPair(tokenA, tokenB);\\n\\n        return pair;\\n    }\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) public view returns (address) {\\n        return _pair[tokenA][tokenB];\\n    }\\n\\n    function allPairsLength() public view returns (uint256) {\\n        return pairs.length;\\n    }\\n\\n    function setFeeParams(\\n        address newTreasury,\\n        uint256 newBuyFee,\\n        uint256 newSellFee,\\n        uint256 newTreasuryFeeRatio\\n    ) public onlyRole(ADMIN_ROLE) {\\n        if (newTreasury == address(0)) revert TreasuryIsZeroAddress();\\n        if (newBuyFee > 100) revert BuyFeeTooHigh();\\n        if (newSellFee > 100) revert SellFeeTooHigh();\\n        if (newTreasuryFeeRatio > 100) revert TreasuryFeeRatioTooHigh();\\n\\n        emit TreasuryUpdated(treasury, newTreasury);\\n        emit BuyFeeUpdated(buyFee, newBuyFee);\\n        emit SellFeeUpdated(sellFee, newSellFee);\\n        emit TreasuryFeeRatioUpdated(treasuryFeeRatio, newTreasuryFeeRatio);\\n\\n        treasury = newTreasury;\\n        buyFee = newBuyFee;\\n        sellFee = newSellFee;\\n        treasuryFeeRatio = newTreasuryFeeRatio;\\n    }\\n\\n    function setRouter(address router_) public onlyRole(ADMIN_ROLE) {\\n        router = router_;\\n    }\\n}\\n\",\"keccak256\":\"0x34f363fa05ec332f0540287b161a79eb768ec4c5b607a59ba040b27237c7a99d\",\"license\":\"MIT\"},\"src/INTPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IINTPair.sol\\\";\\nimport \\\"./INTFactory.sol\\\";\\n\\ncontract INTPair is IINTPair, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable factory;\\n    address public immutable tokenA; // meme token\\n    address public immutable tokenB;\\n\\n    struct Pool {\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 k;\\n        uint256 lastUpdated;\\n    }\\n\\n    Pool private _pool;\\n\\n    modifier onlyRouter() {\\n        if (msg.sender != INTFactory(factory).router()) revert CallerIsNotRouter();\\n        _;\\n    }\\n\\n    event Mint(uint256 reserve0, uint256 reserve1);\\n\\n    event Swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    );\\n\\n    error FactoryIsZeroAddress();\\n    error TokenIsZeroAddress();\\n    error CallerIsNotRouter();\\n    error AlreadyMinted();\\n    error RecipientIsZeroAddress();\\n\\n    constructor(address factory_, address token0, address token1) {\\n        if (factory_ == address(0)) revert FactoryIsZeroAddress();\\n        if (token0 == address(0)) revert TokenIsZeroAddress();\\n        if (token1 == address(0)) revert TokenIsZeroAddress();\\n\\n        factory = factory_;\\n        tokenA = token0;\\n        tokenB = token1;\\n    }\\n\\n    function mint(\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) public onlyRouter returns (bool) {\\n        if (_pool.lastUpdated != 0) revert AlreadyMinted();\\n\\n        _pool = Pool({\\n            reserve0: reserve0,\\n            reserve1: reserve1,\\n            k: reserve0 * reserve1,\\n            lastUpdated: block.timestamp\\n        });\\n\\n        emit Mint(reserve0, reserve1);\\n\\n        return true;\\n    }\\n\\n    function swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    ) public onlyRouter returns (bool) {\\n        uint256 _reserve0 = (_pool.reserve0 + amount0In) - amount0Out;\\n        uint256 _reserve1 = (_pool.reserve1 + amount1In) - amount1Out;\\n\\n        _pool = Pool({\\n            reserve0: _reserve0,\\n            reserve1: _reserve1,\\n            k: _pool.k,\\n            lastUpdated: block.timestamp\\n        });\\n\\n        emit Swap(amount0In, amount0Out, amount1In, amount1Out);\\n\\n        return true;\\n    }\\n\\n    function approval(\\n        address _user,\\n        address _token,\\n        uint256 amount\\n    ) public onlyRouter returns (bool) {\\n        if (_user == address(0)) revert RecipientIsZeroAddress();\\n        if (_token == address(0)) revert TokenIsZeroAddress();\\n\\n        IERC20 token = IERC20(_token);\\n\\n        token.forceApprove(_user, amount);\\n\\n        return true;\\n    }\\n\\n    function transferAsset(\\n        address recipient,\\n        uint256 amount\\n    ) public onlyRouter {\\n        if (recipient == address(0)) revert RecipientIsZeroAddress();\\n\\n        IERC20(tokenB).safeTransfer(recipient, amount);\\n    }\\n\\n    function transferTo(address recipient, uint256 amount) public onlyRouter {\\n        if (recipient == address(0)) revert RecipientIsZeroAddress();\\n\\n        IERC20(tokenA).safeTransfer(recipient, amount);\\n    }\\n\\n    function getReserves() public view returns (uint256, uint256) {\\n        return (_pool.reserve0, _pool.reserve1);\\n    }\\n\\n    function kLast() public view returns (uint256) {\\n        return _pool.k;\\n    }\\n\\n    function priceALast() public view returns (uint256) {\\n        return _pool.reserve1 / _pool.reserve0;\\n    }\\n\\n    function priceBLast() public view returns (uint256) {\\n        return _pool.reserve0 / _pool.reserve1;\\n    }\\n\\n    function balance() public view returns (uint256) {\\n        return IERC20(tokenA).balanceOf(address(this));\\n    }\\n\\n    function assetBalance() public view returns (uint256) {\\n        return IERC20(tokenB).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4104abcd2d281f871ea132719faf95ee9fca487ffd19dd781ecd39ca336fa292\",\"license\":\"MIT\"},\"src/Lock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IBonding } from \\\"./interfaces/IBonding.sol\\\";\\nimport { ILock } from \\\"./interfaces/ILock.sol\\\";\\n\\n/**\\n * @title Lock Contract\\n * @notice The contract is created by bonding contract when the meme token generated.\\n * @dev The contract is used for bonding contract to lock/delegate lp token,\\n *      and claim rewards for the token creator after the token graduates.\\n */\\ncontract Lock is ILock {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public immutable lockedTime;\\n\\n    // The meme token of this lock.\\n    address public immutable token;\\n\\n    address public immutable assetToken;\\n\\n    // The bonding contract.\\n    address public immutable bonding;\\n\\n    // The trading fee during the bonding period.\\n    uint256 public tradingFeeAtBonding;\\n\\n    // The address of the LP token to lock.\\n    address public lp;\\n\\n    struct LockedInfo {\\n        uint256 lockedAmount;\\n        uint256 releasedTime;\\n    }\\n\\n    mapping(address => LockedInfo) public lockedInfos;\\n\\n    event SetLP(address newLpAddr);\\n    event LockedLP(uint256 newLockedAmount);\\n    event DepositFee(uint256 newDepositedAmount);\\n    event ClaimForTokenCreator(address indexed tokenCreator, uint256 amount);\\n    event DelegateLPTo(\\n        address indexed lpAddr,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        address _token,\\n        address _assetToken,\\n        address _bonding,\\n        uint256 _lockedTime\\n    ) {\\n        token = _token;\\n        assetToken = _assetToken;\\n        bonding = _bonding;\\n        lockedTime = _lockedTime;\\n    }\\n\\n    modifier onlyBonding() {\\n        if (msg.sender != bonding) revert NotBonding();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Should be called only once.\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Set the LP token address.\\n     * @param _lp The address of the LP token to lock.\\n     */\\n    function setLP(address _lp) external onlyBonding {\\n        lp = _lp;\\n\\n        emit SetLP(_lp);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Locks the specified amount of lp tokens.\\n     * @param lockedAmount The amount of lp tokens to lock.\\n     */\\n    function lockLP(uint256 lockedAmount) external onlyBonding {\\n        address lpAddr = lp;\\n        LockedInfo storage lockedInfo = lockedInfos[lpAddr];\\n\\n        lockedInfo.lockedAmount = lockedInfo.lockedAmount + lockedAmount;\\n        lockedInfo.releasedTime = block.timestamp + lockedTime;\\n\\n        IERC20(lpAddr).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            lockedAmount\\n        );\\n\\n        emit LockedLP(lockedAmount);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @notice Only can be called after the released time.\\n     * @dev Delegates the LP token to the specified address.\\n     * @param delegatee The address to delegate the LP token to.\\n     */\\n    function delegateLPTo(address delegatee) external onlyBonding {\\n        address lpAddr = lp;\\n        LockedInfo storage lockedInfo = lockedInfos[lpAddr];\\n\\n        if (block.timestamp < lockedInfo.releasedTime) revert NotReleased();\\n\\n        IERC20(lpAddr).forceApprove(delegatee, lockedInfo.lockedAmount);\\n\\n        emit DelegateLPTo(lpAddr, delegatee, lockedInfo.lockedAmount);\\n    }\\n\\n    /**\\n     * @notice Before the token graduates, charge a portion of the trading fee when buying and selling.\\n     *         The entire fee can be distributed to the token creator after the token graduates.\\n     * @notice Ideally, the `Bonding` contract will use this function to store fee when trading.\\n     * @dev Deposit the trading fee to the lock contract.\\n     * @param amount The amount of trading fee to deposit.\\n     */\\n    function depositFee(uint256 amount) external {\\n        tradingFeeAtBonding = tradingFeeAtBonding + amount;\\n\\n        IERC20(assetToken).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit DepositFee(amount);\\n    }\\n\\n    /**\\n     * @notice Should be called only once.\\n     * @notice Should be called after the token graduates.\\n     * @dev Claim the rewards for the token creator\\n     */\\n    function claimForTokenCreator() external {\\n        if (!IBonding(bonding).hasGraduated(token))\\n            revert TokenDoesNotGraduate();\\n\\n        address tokenCreator = IBonding(bonding).getTokenCreator(token);\\n\\n        // Distribute rewards to the token creator.\\n        uint256 amount = tradingFeeAtBonding;\\n        tradingFeeAtBonding = 0;\\n        IERC20(assetToken).safeTransfer(tokenCreator, amount);\\n\\n        emit ClaimForTokenCreator(tokenCreator, amount);\\n    }\\n\\n    /**\\n     * @notice Only Bonding contract can call this function.\\n     * @dev Approves token spending for a specified address\\n     * @param spender The address allowed to spend the token\\n     * @param amount The amount of tokens to approve\\n     */\\n    function approveToken(\\n        address _token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyBonding {\\n        IERC20(_token).forceApprove(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x792e4b0727391a38fa00a040821021fe10d88df7a62b852dd3df9eaad3073c42\",\"license\":\"MIT\"},\"src/LockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./Lock.sol\\\";\\n\\ncontract LockFactory {\\n    /**\\n     * @notice Creates a new Lock for token\\n     * @param _token Token address\\n     * @param _assetToken Asset token address\\n     * @param _bonding Bonding address\\n     * @param _lockedTime The time to lock the lp token\\n     */\\n    function createLock(\\n        address _token,\\n        address _assetToken,\\n        address _bonding,\\n        uint256 _lockedTime\\n    ) external returns (address lock) {\\n        lock = address(new Lock(_token, _assetToken, _bonding, _lockedTime));\\n    }\\n}\\n\",\"keccak256\":\"0x47c7263c9c9b2b337506a4b28d422c01ab01cc2d802aa1b318cad41e47a0b7a3\",\"license\":\"MIT\"},\"src/interfaces/IBonding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IBonding {\\n    enum TokenStatus {\\n        None,\\n        BondingCurve,\\n        Graduated\\n    }\\n\\n    struct Token {\\n        address creator;\\n        address token;\\n        address pair;\\n        address locker;\\n        string description;\\n        uint8[] cores;\\n        string image;\\n        string twitter;\\n        string telegram;\\n        string farcaster;\\n        string website;\\n        bool trading;\\n        bool tradingOnUniswap;\\n    }\\n\\n    function tokenInfo(address token) external view returns (Token memory);\\n\\n    function getTokenLocker(\\n        address tokenAddress\\n    ) external view returns (address);\\n\\n    function getTokenCreator(\\n        address tokenAddress\\n    ) external view returns (address);\\n\\n    function hasGraduated(address tokenAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9fda31e18b8654ea8eff4c0f5aab0ea59ea2ef24d3354d3b2017c97913e3c185\",\"license\":\"MIT\"},\"src/interfaces/IExtPairFactory.sol\":{\"content\":\"pragma solidity 0.8.20;\\n\\ninterface IExtPairFactory {\\n    function createPair(\\n        address[] memory _tokens,\\n        uint8 _pairType,\\n        bytes memory _data\\n    ) external returns (address pair);\\n}\\n\",\"keccak256\":\"0xb6608a14c5b91ba87878128c749a3a36f38d0e808bef7c54f7dd35fdc4dababc\"},\"src/interfaces/IExtRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IExtRouter {\\n    function quoteAddLiquidity(\\n        uint8,\\n        address[] memory,\\n        uint256[] memory _amountDesireds\\n    ) external view returns (uint256[] memory _amountIn, uint256 liquidity);\\n\\n    function addLiquidity(\\n        uint8 _pairType,\\n        address[] memory _tokens,\\n        uint256[] memory _amountDesireds,\\n        uint256[] memory _amountsMin,\\n        uint256 _minLiquidity,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256[] memory _amounts, uint256 _liquidity);\\n\\n    function getReserves(\\n        address[] calldata _tokens\\n    ) external view returns (uint256 _reserveA, uint256 _reserveB);\\n\\n    function pairFor(\\n        address[] memory tokens,\\n        uint8\\n    ) external view returns (address pair, bool hasPair);\\n\\n    function factory() external view returns (address);\\n}\\n\",\"keccak256\":\"0x291d50e9a3daa96fdc5f9d2533582ede11a86403fa53a5c25ddb3afe2e4359f1\",\"license\":\"MIT\"},\"src/interfaces/IINTPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IINTPair {\\n    function getReserves() external view returns (uint256, uint256);\\n\\n    function assetBalance() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n\\n    function mint(uint256 reserve0, uint256 reserve1) external returns (bool);\\n\\n    function transferAsset(address recipient, uint256 amount) external;\\n\\n    function transferTo(address recipient, uint256 amount) external;\\n\\n    function swap(\\n        uint256 amount0In,\\n        uint256 amount0Out,\\n        uint256 amount1In,\\n        uint256 amount1Out\\n    ) external returns (bool);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function approval(\\n        address _user,\\n        address _token,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3e1d49d8cf5e87366b9636e3d367e31de775ab416a8de279f72eafd93f897af5\",\"license\":\"MIT\"},\"src/interfaces/ILock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILock {\\n    error NotBonding();\\n    error LockerIsZeroAddress();\\n    error HasLocked();\\n    error TokenDoesNotGraduate();\\n    error NotReleased();\\n\\n    function setLP(address _lp) external;\\n\\n    function lockLP(uint256 lockedAmount) external;\\n\\n    function delegateLPTo(address to) external;\\n\\n    function depositFee(uint256 amount) external;\\n\\n    function claimForTokenCreator() external;\\n\\n    function approveToken(\\n        address _token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2610e0be78b29858b099eead62ce736fc0f49a1e95937aa48cf45c0c948b5750\",\"license\":\"MIT\"},\"src/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IOracle {\\n    function getAssetPrice() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6bdf18baf8409825e8c5dda435970cfd755b2050741effc8f40d73bf9f39ae4e\",\"license\":\"MIT\"},\"src/libraries/INTRouterLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../INTFactory.sol\\\";\\nimport \\\"../interfaces/IINTPair.sol\\\";\\nimport \\\"../interfaces/IBonding.sol\\\";\\nimport \\\"../interfaces/ILock.sol\\\";\\n\\nlibrary INTRouterLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    error TokenIsZeroAddress();\\n    error RecipientIsZeroAddress();\\n    error InputAmountIsZero();\\n    error FactoryIsZeroAddress();\\n    error AssetTokenIsZeroAddress();\\n\\n    event Buy(\\n        address indexed account,\\n        address indexed token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 assetFee,\\n        uint256 tokenReserve,\\n        uint256 assetReserve,\\n        uint256 timestamp\\n    );\\n    event Sell(\\n        address indexed account,\\n        address indexed token,\\n        uint256 tokenAmount,\\n        uint256 assetAmount,\\n        uint256 assetFee,\\n        uint256 tokenReserve,\\n        uint256 assetReserve,\\n        uint256 timestamp\\n    );\\n\\n    event InitialLiquidityAdded(\\n        address indexed token,\\n        uint256 tokenReserve,\\n        uint256 assetReserve\\n    );\\n\\n    function _getReserves(\\n        INTFactory factory,\\n        address assetToken,\\n        address token\\n    ) internal view returns (uint256 reserveA, uint256 reserveB, uint256 k) {\\n        address pairAddress = factory.getPair(token, assetToken);\\n        IINTPair pair = IINTPair(pairAddress);\\n        (reserveA, reserveB) = pair.getReserves();\\n        k = pair.kLast();\\n    }\\n\\n    function quoteBuy(\\n        INTFactory factory,\\n        address assetToken,\\n        address token,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut, uint256 txFee) {\\n        if (token == address(0)) revert TokenIsZeroAddress();\\n\\n        (uint256 reserveA, uint256 reserveB, uint256 k) = _getReserves(\\n            factory,\\n            assetToken,\\n            token\\n        );\\n\\n        uint256 fee = factory.buyFee();\\n        txFee = (fee * amountIn) / 100;\\n        amountIn = amountIn - txFee;\\n\\n        uint256 newReserveB = reserveB + amountIn;\\n        uint256 newReserveA = k / newReserveB;\\n        amountOut = reserveA - newReserveA;\\n    }\\n\\n    function quoteSell(\\n        INTFactory factory,\\n        address assetToken,\\n        address token,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut, uint256 txFee) {\\n        if (token == address(0)) revert TokenIsZeroAddress();\\n\\n        (uint256 reserveA, uint256 reserveB, uint256 k) = _getReserves(\\n            factory,\\n            assetToken,\\n            token\\n        );\\n\\n        uint256 newReserveA = reserveA + amountIn;\\n        uint256 newReserveB = k / newReserveA;\\n        amountOut = reserveB - newReserveB;\\n\\n        uint256 fee = factory.sellFee();\\n        txFee = (fee * amountOut) / 100;\\n        amountOut = amountOut - txFee;\\n    }\\n\\n    function addInitialLiquidity(\\n        INTFactory factory,\\n        address assetToken,\\n        address token_,\\n        uint256 amountToken_,\\n        uint256 amountAsset_\\n    ) public returns (uint256, uint256) {\\n        if (token_ == address(0)) revert TokenIsZeroAddress();\\n\\n        address pairAddress = factory.getPair(token_, assetToken);\\n\\n        IINTPair pair = IINTPair(pairAddress);\\n\\n        IERC20 token = IERC20(token_);\\n\\n        token.safeTransfer(pairAddress, amountToken_);\\n\\n        pair.mint(amountToken_, amountAsset_);\\n\\n        emit InitialLiquidityAdded(token_, amountToken_, amountAsset_);\\n\\n        return (amountToken_, amountAsset_);\\n    }\\n\\n    /**\\n     * @dev Distribute fee to treasury and lock contract based on the `treasuryFeeRatio`\\n     * @param from The address that buying the token, address(0) if selling\\n     * @param pair The pair contract When selling\\n     * @param fromToken The token that is being traded\\n     * @param amount The amount of token that is being traded\\n     */\\n    function collectFee(\\n        INTFactory factory,\\n        address assetToken,\\n        address from,\\n        address pair,\\n        address fromToken,\\n        uint256 amount\\n    ) internal {\\n        uint256 treasuryFeeRatio = factory.treasuryFeeRatio();\\n        uint256 treasuryFee = (amount * treasuryFeeRatio) / 100;\\n        address treasury = factory.treasury();\\n\\n        uint256 lockFee = amount - treasuryFee;\\n        address lockFeeTo = IBonding(address(this)).getTokenLocker(fromToken);\\n\\n        if (from == address(0)) {\\n            // Selling\\n            // Transfer treasury fee to treasury directly\\n            IINTPair(pair).transferAsset(treasury, treasuryFee);\\n\\n            // Transfer lock fee to this contract\\n            IINTPair(pair).transferAsset(address(this), lockFee);\\n        } else {\\n            // Buying\\n            // Transfer treasury fee to treasury directly\\n            IERC20(assetToken).safeTransferFrom(from, treasury, treasuryFee);\\n\\n            // Transfer lock fee to this contract\\n            IERC20(assetToken).safeTransferFrom(from, address(this), lockFee);\\n        }\\n\\n        // Approve to lock contract to deposit lock fee\\n        IERC20(assetToken).forceApprove(lockFeeTo, lockFee);\\n        // Deposit lock fee to lock contract\\n        ILock(lockFeeTo).depositFee(lockFee);\\n    }\\n\\n    function sell(\\n        INTFactory factory,\\n        address assetToken,\\n        uint256 amountIn,\\n        address tokenAddress,\\n        address to\\n    ) public returns (uint256, uint256) {\\n        if (tokenAddress == address(0)) revert TokenIsZeroAddress();\\n        if (to == address(0)) revert RecipientIsZeroAddress();\\n        if (amountIn == 0) revert InputAmountIsZero();\\n\\n        address pairAddress = factory.getPair(tokenAddress, assetToken);\\n\\n        IINTPair pair = IINTPair(pairAddress);\\n\\n        IERC20 token = IERC20(tokenAddress);\\n\\n        (uint256 amountOut, uint256 txFee) = quoteSell(\\n            factory,\\n            assetToken,\\n            tokenAddress,\\n            amountIn\\n        );\\n\\n        token.safeTransferFrom(msg.sender, pairAddress, amountIn);\\n\\n        pair.transferAsset(to, amountOut);\\n        collectFee(\\n            factory,\\n            assetToken,\\n            address(0),\\n            address(pair),\\n            tokenAddress,\\n            txFee\\n        );\\n\\n        pair.swap(amountIn, 0, 0, amountOut + txFee);\\n\\n        (uint256 reserveA, uint256 reserveB) = IINTPair(pair).getReserves();\\n\\n        emit Sell(\\n            to,\\n            tokenAddress,\\n            amountIn,\\n            amountOut,\\n            txFee,\\n            reserveA,\\n            reserveB,\\n            block.timestamp\\n        );\\n\\n        return (amountIn, amountOut);\\n    }\\n\\n    function buy(\\n        INTFactory factory,\\n        address assetToken,\\n        uint256 amountIn,\\n        address tokenAddress,\\n        address to\\n    ) public returns (uint256, uint256) {\\n        if (tokenAddress == address(0)) revert TokenIsZeroAddress();\\n        if (to == address(0)) revert RecipientIsZeroAddress();\\n        if (amountIn == 0) revert InputAmountIsZero();\\n\\n        address pair = factory.getPair(tokenAddress, assetToken);\\n\\n        (uint256 amountOut, uint256 txFee) = quoteBuy(\\n            factory,\\n            assetToken,\\n            tokenAddress,\\n            amountIn\\n        );\\n        uint256 amount = amountIn - txFee;\\n\\n        IERC20(assetToken).safeTransferFrom(msg.sender, pair, amount);\\n\\n        collectFee(\\n            factory,\\n            assetToken,\\n            msg.sender,\\n            address(0),\\n            tokenAddress,\\n            txFee\\n        );\\n\\n        IINTPair(pair).transferTo(to, amountOut);\\n\\n        IINTPair(pair).swap(0, amountOut, amount, 0);\\n\\n        (uint256 reserveA, uint256 reserveB) = IINTPair(pair).getReserves();\\n\\n        emit Buy(\\n            to,\\n            tokenAddress,\\n            amountOut,\\n            amount,\\n            txFee,\\n            reserveA,\\n            reserveB,\\n            block.timestamp\\n        );\\n\\n        return (amountIn, amountOut);\\n    }\\n\\n    function graduate(\\n        INTFactory factory,\\n        address assetToken,\\n        address tokenAddress\\n    ) public {\\n        if (tokenAddress == address(0)) revert TokenIsZeroAddress();\\n        address pair = factory.getPair(tokenAddress, assetToken);\\n        uint256 assetBalance = IINTPair(pair).assetBalance();\\n        uint256 balance = IINTPair(pair).balance();\\n        INTPair(pair).transferAsset(address(this), assetBalance);\\n        INTPair(pair).transferTo(address(this), balance);\\n    }\\n}\\n\",\"keccak256\":\"0x1c22fb1681f1bccdfc459626263a1afe4b52c94e77869968af78dae74ee61af0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234620000c4575f549060ff8260081c1662000072575060ff8082160362000037575b60405161547e9081620000c98239f35b60ff90811916175f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a15f62000027565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b5f80fdfe60a0806040526004361015610012575f80fd5b5f90813560e01c908163017e7e58146127145750806301b964d2146126a557806301ffc9a71461264e57806302b6b15a146125735780630d63237f146125175780630d7a94f6146124ae5780631083f761146124845780631db9be1b1461245a578063248a9ca31461242d57806326bde5aa146123be5780632f2ff15d1461230f5780632f73a9f8146122a057806336568abe1461220d5780633744cfdd14612188578063378dc3dc146121695780633b5f19351461214a5780633c0b93aa1461207f57806341344d5d146120535780634189a68e14611f86578063456f5e1514611e805780634d86030314611e3f5780635481860514611d445780635823892a14611c955780635bb4780814611c265780635edb9eb014611c075780636140259614611bb8578063715018a614611ae157806372641aa614611aae57806377796ace14611a3f57806378a8956714611a2057806379ba50971461199b5780637adbf973146118b75780637c13774b1461185b5780637dc0d1d0146118315780637deb602514610fa95780637f7ee43114610eb15780638da5cb5b14610e8857806391d1485414610e3e578063a217fddf14610e22578063a240de0314610df8578063a3e01ce314610ca8578063a8b3820514610c89578063ae29d56814610c56578063b4f2e8b814610bda578063b758ba8814610b9f578063c17ac35a14610b45578063c1ba290714610b26578063c45a015514610afc578063c75ed64414610aa2578063c78418b914610a65578063c8379f8114610826578063d547741f146107e8578063d723a3d2146107aa578063d98b2f5c146106d3578063ddca3f43146106b4578063df1dcaa914610646578063e30c39781461061d578063e77772fe146105f3578063e84ca7cb146105b3578063f2fde38b14610545578063f5dab711146103f9578063f943ce0714610391578063fa1653bd1461032f5763feab61eb146102de575f80fd5b3461032c57604036600319011261032c576102f7612892565b6102ff612f22565b600360ff82161161031a57610317906024359061510d565b80f35b60405163e82a532960e01b8152600490fd5b80fd5b503461032c57602036600319011261032c576001600160a01b0361035161273a565b16815261013560205260ff600b6040832001541690600382101561037d57602082600260405191148152f35b634e487b7160e01b81526021600452602490fd5b503461032c57602036600319011261032c576004356103ae612f22565b80156103e7576020817f51dfcc99f9c590c7a4bcf74fc4e9ae6b407ec6689eb354e3215563a0b5bcd00d9261013c55604051908152a180f35b6040516338c51d2560e21b8152600490fd5b503461032c57602036600319011261032c576001600160a01b038061041c61273a565b16825261013560205260408220908082541691816001820154169180600283015416906003830154166004830161045290612a1a565b61045e60068501612a1a565b61046a60078601612a1a565b9161047760088701612a1a565b9361048460098801612a1a565b95610491600a8901612a1a565b97600b015460ff16986040519a8b5260208b015260408a015260608901526101608060808a015288016104c391612adc565b87810360a08901526104d491612adc565b86810360c08801526104e591612adc565b85810360e08701526104f691612adc565b84810361010086015261050891612adc565b83810361012085015261051a91612adc565b906003811015610531578293506101408301520390f35b634e487b7160e01b84526021600452602484fd5b503461032c57602036600319011261032c5761055f61273a565b610567612f22565b609780546001600160a01b0319166001600160a01b039283169081179091556065549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b503461032c57602036600319011261032c5760209060ff906040906001600160a01b036105de61273a565b16815261013784522054161515604051908152f35b503461032c578060031936011261032c5761012f546040516001600160a01b039091168152602090f35b503461032c578060031936011261032c576097546040516001600160a01b039091168152602090f35b503461032c57602036600319011261032c57600435610663612f22565b6301e133808111156106a2576020817fbeaba78e9fea37c532e9c93af5e8e120a48902131aeb7d3146e3ca49dec45a239261013a55604051908152a180f35b60405163abf20e8f60e01b8152600490fd5b503461032c578060031936011261032c57602061013254604051908152f35b503461032c57604036600319011261032c576106ed61273a565b61012e54610134546040805163a6b8918760e01b81526001600160a01b0393841660048201529183166024808401919091529290931660448201529035606482015291908280608481015b0381736FAbAC8069BC09cAD727fe49157ad69729222e8B5af4801561079d57604092829161076e575b5082519182526020820152f35b90506107909150823d8411610796575b61078881836127f9565b8101906132fe565b5f610761565b503d61077e565b50604051903d90823e3d90fd5b503461032c57602036600319011261032c5760209060ff906040906001600160a01b036107d561273a565b1681526101378452205416604051908152f35b503461032c57604036600319011261032c57610317600435610808612750565b9080845260fb6020526108216001604086200154612d1a565b612ead565b503461032c5761018036600319011261032c5761084161273a565b610849612750565b6001600160a01b039160443583811690819003610a615760a435848116809103610a615760c43591858316809303610a615760e435868116809103610a61576101243593878516809503610a615788549660ff8860081c161597888099610a54575b8015610a3d575b156109e15760ff1981166001178b55886109d0575b506108e160ff8b5460081c166108dc816130c1565b6130c1565b6108ea33613121565b89549861091260ff8b60081c16610900816130c1565b610909816130c1565b600180556130c1565b6001600160601b0360a01b978161013491168982541617905561012e91168782541617905561012f9086825416179055610130908582541617905561012d9084825416179055606435610132556084356101315561013390838254161790556101043561013a5561013b918254161790556101443561013c556101643561013d5561099b575080f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b61ffff1916610101178a555f6108c7565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156108b25750600160ff8216146108b2565b50600160ff8216106108ab565b5f80fd5b503461032c57602036600319011261032c576020906001600160a01b039060409082610a8f61273a565b1681526101358452205416604051908152f35b503461032c57602036600319011261032c57600435610abf612f22565b61013c5481106103e7576020817fc598615f3cd2c393145f278de5a6921fd815849d1ee5aab7b66bdda0efb33ada9261013d55604051908152a180f35b503461032c578060031936011261032c5761012e546040516001600160a01b039091168152602090f35b503461032c578060031936011261032c57602061013d54604051908152f35b503461032c57602036600319011261032c576040602091610b6461273a565b818351610b708161278d565b526001600160a01b031681526101378352206040519060ff90610b928361278d565b5416809152604051908152f35b503461032c578060031936011261032c5760206040517f62229496573be0b0846a2fb48a94de962b501adb0b8eaf7f99924b10a81a19fe8152f35b503461032c57604036600319011261032c577fc8242dc5446855370b781abbfc5d882af1d1a3cc29143216aba3558feb0ce9256040600435610c1a612750565b610c22612f22565b61013282905561012d80546001600160a01b0319166001600160a01b0392909216918217905582519182526020820152a180f35b503461032c57602036600319011261032c57604060209160ff610c77612892565b16815261013983522054604051908152f35b503461032c578060031936011261032c57602061013a54604051908152f35b503461032c57610cb7366129a8565b90610cc59692949396612b01565b60018060a01b039485841697885f5261013760205260405f2095600260ff610cef818a5416614bb9565b1603610de657610cfe8661519e565b60025f526101396020527fb43cc3dce73ad2c82cb640e429b0bd3222005d4a0d6ac642dad7ae5128bf1dc65411610dd4577f4e8e1b96afa9116446f71ff323ac93786664fcbea87475ece33519357750f790988a610da39760609a825f5261013560205260405f20908060028160038501541693610d978861013498610d8f8c878c54168861012d541630916138a8565b8730916138a8565b01541693541692614c0f565b915091805460ff610db5818316614bcb565b169060ff1916179055604051916002835260208301526040820152a280f35b604051639dc93e9f60e01b8152600490fd5b604051636dfb3ae160e01b8152600490fd5b503461032c578060031936011261032c57610133546040516001600160a01b039091168152602090f35b503461032c578060031936011261032c57602090604051908152f35b503461032c57604036600319011261032c576040610e5a612750565b91600435815260fb602052209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b503461032c578060031936011261032c576065546040516001600160a01b039091168152602090f35b503461032c576101a036600319011261032c57610ecc61273a565b6001600160401b0390602435828111610fa557610eed903690600401612835565b604435838111610fa157610f05903690600401612835565b606435848111610f9d57610f1d9036906004016128a2565b90608435858111610f9957610f36903690600401612835565b9260a435868111610f9557610f4f903690600401612835565b9460c435968711610f9557610f6b61031797369060040161290a565b610f73612b01565b6101843596610164359661014435966101243596610104359660e43596614684565b8780fd5b8680fd5b8580fd5b8480fd5b8380fd5b503461032c57604036600319011261032c57610fc3612750565b6001600160a01b0381168252610135602081905260408320600b015491929160ff16600381101561181d5760010361180b5761012e546101345460408051630fa0d38960e21b8152929091839182916110349133918a9160048035926001600160a01b039081169216908701613321565b0381736FAbAC8069BC09cAD727fe49157ad69729222e8B5af48015611800576117e2575b506110628361519e565b61013d541115611078575b602060405160018152f35b6001600160a01b038316825260205260408120600b8101805460ff166003811015610531576002146117d05760028201805460405163c66f245560e01b815293919291906001600160a01b0316602085600481845afa94851561179057869561179b575b50906020600492604051938480926316d3df1560e31b82525afa91821561179057869261175c575b5061012e54610134546001600160a01b039182169116736FAbAC8069BC09cAD727fe49157ad69729222e8B3b15610f955760405163e743240d60e01b8152600481019290925260248201526001600160a01b03881660448201528681606481736FAbAC8069BC09cAD727fe49157ad69729222e8B5af4801561172a57611749575b506001600160a01b0387163b15610f9d5760405163f1b50c1d60e01b81528681600481836001600160a01b038d165af1801561172a57908791611735575b50509061123c939291604080516111d9816127a8565b6002815281366020830137610134546001600160a01b03166111fa82613258565b526001600160a01b038a1661120e82613265565b5260018060a01b0361013354168251808099819463237c65f960e01b83528660048401526044830190613275565b6001602483015203915afa94851561172a5787956116e1575b50600301546001600160a01b031694853b15610f995760405163179a694160e11b81526001600160a01b03861660048201528781602481838b5af180156116d6579088916116c2575b50506113cc6113ba9160018060a01b036101345416938a5f9485809461137f604051916112ca836127a8565b6002835260403660208501378a6112e084613258565b526001600160a01b0386166112f484613265565b5261136c60405197611305896127a8565b6002895260403660208b01378261131b8a613258565b52806113268a613265565b5260405197611334896127a8565b6002895260403660208b01378361134a8a613258565b52816113558a613265565b52610133546001600160a01b039081169116614fea565b610133546001600160a01b03168b614fea565b6113de60018060a01b0361013354169460405198899788968795623c7cd360e91b87526001600488015260e0602488015260e4870190613275565b85810360031901604487015290614bdc565b83810360031901606485015290614bdc565b8260848301523060a48301524260c483015203925af19081156115f1578290839261160f575b508061141261141892613258565b50613265565b5061142d81886001600160a01b038916614fea565b863b1561160b57604051906340519a5360e01b825260048201528181602481838b5af180156115f1576115fc575b506040516370a0823160e01b8152306004820152956020876024816001600160a01b038d165afa9687156115f15782976115bd575b506040516370a0823160e01b815230600482015296602088602481875afa9283156115b1579261155d575b7f381d54fa425631e6266af114239150fae1d5db67bb65b4fa9ecc65013107e07e975080611543575b505080611523575b5050805460ff1916600217905580546001600160a01b0319166001600160a01b0392831690811790915593169180a35f808061106d565b61012d5461153c926001600160a01b0390911690614fb1565b5f806114ec565b611556916001600160a01b038b16614fb1565b5f806114e4565b91506020873d6020116115a9575b81611578602093836127f9565b81010312610a61577f381d54fa425631e6266af114239150fae1d5db67bb65b4fa9ecc65013107e07e9651916114bb565b3d915061156b565b604051903d90823e3d90fd5b9096506020813d6020116115e9575b816115d9602093836127f9565b81010312610a615751955f611490565b3d91506115cc565b6040513d84823e3d90fd5b61160590612766565b5f61145b565b5080fd5b9150503d908183823e61162282826127f9565b60408183810103126116be578051916001600160401b038311610fa557808201601f848401011215610fa557828201519061165c8261287b565b9361166a60405195866127f9565b8285526020850191840160208460051b838701010111610f9d57602081850101915b60208460051b838701010183106116ae57505050506020015190611418611404565b825181526020928301920161168c565b8280fd5b6116cb90612766565b610f9957865f61129e565b6040513d8a823e3d90fd5b9094506040813d604011611722575b816116fd604093836127f9565b81010312610f995761171a602061171383613244565b92016138f9565b50935f611255565b3d91506116f0565b6040513d89823e3d90fd5b61173e90612766565b610f9d57855f6111c3565b61175590969196612766565b945f611185565b9091506020813d602011611788575b81611778602093836127f9565b81010312610f9d5751905f611104565b3d915061176b565b6040513d88823e3d90fd5b9094506020813d6020116117c8575b816117b7602093836127f9565b81010312610f9d57519360206110dc565b3d91506117aa565b604051633a2cc0e960e11b8152600490fd5b6117fa9060403d6040116107965761078881836127f9565b50611058565b6040513d85823e3d90fd5b6040516305e1dfe360e11b8152600490fd5b634e487b7160e01b83526021600452602483fd5b503461032c578060031936011261032c5761013b546040516001600160a01b039091168152602090f35b503461032c57602036600319011261032c5760043561013680548210156116be579091527f39da2db355130acf428d669fbf1c14faa9d51399a25b793fc254bbbde66f02e201546040516001600160a01b039091168152602090f35b503461032c5760208060031936011261160b576118d261273a565b6118da612f22565b6040516301ca9e1160e71b81526001600160a01b03919091169190818160048187875af1908115611990578491611963575b50156119515761013b80546001600160a01b031916831790556040519182527f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa91a180f35b604051639589a27d60e01b8152600490fd5b90508181813d8311611989575b61197a81836127f9565b81010312610fa557515f61190c565b503d611970565b6040513d86823e3d90fd5b503461032c578060031936011261032c57609754336001600160a01b03909116036119c95761031733613121565b60405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608490fd5b503461032c578060031936011261032c57602061013654604051908152f35b503461032c57602036600319011261032c577f0454b4498edcb0a2c7058cfd107bb0e6551b3820f891c725db307ed66e740f206020611a7c61273a565b611a84612f22565b61013380546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b503461032c57604036600319011261032c57610317611acb61273a565b611ad3612750565b90611adc612f22565b6145a4565b503461032c578060031936011261032c57611afa612f22565b60655481906001600160a01b0390611b13908216612e23565b6001600160601b0360a01b8060975416609755606554908116606555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380805260fb6020526040812060205260ff60408220541615611b735780f35b60fb6020526040812060205260408120600160ff198254161790553381807f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a480f35b503461032c57602036600319011261032c577fedbbbd0f3b9ac5d8f4d9142fe0b31c73d786619eab0d7f8df600fe84282a4d436020600435611bf8612f22565b8061013155604051908152a180f35b503461032c578060031936011261032c57602061013854604051908152f35b503461032c57602036600319011261032c577f1edf3afd4ac789736e00d216cd88be164ddcef26a6eedcc30cdb0cb62f3741b16020611c6361273a565b611c6b612f22565b61012e80546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b503461032c57604036600319011261032c576001600160401b036004358181116116be57611cc7903690600401612978565b9091602435908111610fa557611ce1903690600401612978565b9091611ceb612f22565b818103611d3257845b818110611cff578580f35b80611d2c611d18611d13600194868a614660565b614670565b611d26611d1384888a614660565b906145a4565b01611cf4565b6040516305e8333d60e11b8152600490fd5b503461032c57611d53366129a8565b90611d619692949396612b01565b60018060a01b039485841697888a5261013760205260408a2095600360ff611d8b818a5416614bb9565b1603610de657611d9a8661519e565b60038c5261013960205260408c205411610dd4577f4e8e1b96afa9116446f71ff323ac93786664fcbea87475ece33519357750f790988a611e0e9760609a60408f84815261013560205220908060028160038501541693610d978861013498610d8f8c878c54168861012d541630916138a8565b915091805460ff611e20818316614bcb565b169060ff1916179055604051916003835260208301526040820152a280f35b503461032c57602036600319011261032c576020906001600160a01b039060039060409083611e6c61273a565b168152610135855220015416604051908152f35b503461032c5761010036600319011261032c57611e9b61273a565b906001600160401b039060243582811161160b57611ebd903690600401612835565b916044358181116116be57611ed6903690600401612835565b606435828111610fa557611eee9036906004016128a2565b90608435838111610fa157611f07903690600401612835565b9260a435818111610f9d57611f20903690600401612835565b9460c43591821161032c57611f82611f56898989898989611f443660048c0161290a565b94611f4d6131ee565b60e43596613354565b60018055604080516001600160a01b039485168152939092166020840152908201529081906060820190565b0390f35b503461032c57604036600319011261032c57611fa0612750565b6001600160a01b03808216835261013560205260408320600b01549092919060ff16600381101561181d5760010361180b576040908361012e5416936101345416936120058351958693849363c682df7760e01b855233926004359160048701613321565b0381736FAbAC8069BC09cAD727fe49157ad69729222e8B5af49081156115b1575061203557602060405160018152f35b61204d9060403d6040116107965761078881836127f9565b5061106d565b503461032c57602036600319011261032c57602061207761207261273a565b61519e565b604051908152f35b503461032c5760e036600319011261032c576001600160401b036004358181116116be576120b1903690600401612835565b9160243582811161160b576120ca903690600401612835565b916044358181116116be576120e39036906004016128a2565b606435828111610fa5576120fb903690600401612835565b91608435818111610fa157612114903690600401612835565b9360a43591821161032c57611f82611f5688888888886121373660048b0161290a565b936121406131ee565b60c4359533613354565b503461032c578060031936011261032c57602061013c54604051908152f35b503461032c578060031936011261032c57602061013154604051908152f35b503461032c57602036600319011261032c576004356001600160401b03811161160b576121b9903690600401612978565b6121c4929192612f22565b600390818103611d3257825b60ff81168381101561220957906121ff612204926121f86121f084614bb9565b91868a614660565b359061510d565b614bcb565b6121d0565b8480f35b503461032c57604036600319011261032c57612227612750565b336001600160a01b038216036122435761031790600435612ead565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b503461032c57602036600319011261032c577fcf4be1c851767114c1f4b298dc84eab48d103473908393f6d408c82ba7cda0e860206122dd61273a565b6122e5612f22565b61012f80546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b503461032c57604036600319011261032c5760043561232c612750565b81835260fb6020526123446001604085200154612d1a565b81835260fb602052604083209060018060a01b03169081845260205260ff60408420541615612371578280f35b81835260fb6020526040832081845260205260408320600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8480a45f808280f35b503461032c57602036600319011261032c577fbdaa8f7ade01473981aef419539e6c190d409f50b144a7a796efd2777607920c60206123fb61273a565b612403612f22565b61013480546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b503461032c57602036600319011261032c5760016040602092600435815260fb8452200154604051908152f35b503461032c578060031936011261032c57610130546040516001600160a01b039091168152602090f35b503461032c578060031936011261032c57610134546040516001600160a01b039091168152602090f35b503461032c57604036600319011261032c576124c861273a565b61012e546101345460408051631d486c9760e21b81526001600160a01b039384166004820152918316602480840191909152929093166044820152903560648201529190828060848101610738565b503461032c57602036600319011261032c5760043561013880548210156116be579091527ff79a63dcec80ed75c82f36161f17b9c2f407860160383a7be0a0ee7962c527ae01546040516001600160a01b039091168152602090f35b503461032c5761018036600319011261032c576001600160401b036004358181116116be576125a6903690600401612835565b602435828111610fa5576125be903690600401612835565b604435838111610fa1576125d69036906004016128a2565b606435848111610f9d576125ee903690600401612835565b90608435858111610f9957612607903690600401612835565b9260a435958611610f995761262361031796369060040161290a565b9461262c612b01565b610164359561014435956101243595610104359560e4359560c4359533614684565b503461032c57602036600319011261032c5760043563ffffffff60e01b811680910361160b57602090637965db0b60e01b8114908115612694575b506040519015158152f35b6301ffc9a760e01b14905082612689565b503461032c57602036600319011261032c577f3587ea62a24fc6959886ef88a458920ef0762b7ecbae1e87892c731869362d6960206126e261273a565b6126ea612f22565b61013080546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b90503461160b578160031936011261160b5761012d546001600160a01b03168152602090f35b600435906001600160a01b0382168203610a6157565b602435906001600160a01b0382168203610a6157565b6001600160401b03811161277957604052565b634e487b7160e01b5f52604160045260245ffd5b602081019081106001600160401b0382111761277957604052565b606081019081106001600160401b0382111761277957604052565b604081019081106001600160401b0382111761277957604052565b608081019081106001600160401b0382111761277957604052565b90601f801991011681019081106001600160401b0382111761277957604052565b6001600160401b03811161277957601f01601f191660200190565b81601f82011215610a615780359061284c8261281a565b9261285a60405194856127f9565b82845260208383010111610a6157815f926020809301838601378301015290565b6001600160401b0381116127795760051b60200190565b6004359060ff82168203610a6157565b81601f82011215610a61578035916128b98361287b565b926128c760405194856127f9565b808452602092838086019260051b820101928311610a61578301905b8282106128f1575050505090565b813560ff81168103610a615781529083019083016128e3565b9080601f83011215610a6157604051916001600160401b03608084018181118582101761277957604052836080830192848411610a615780915b8483106129545750505050505090565b8235848111610a615760209161296d8884938601612835565b815201920191612944565b9181601f84011215610a61578235916001600160401b038311610a61576020808501948460051b010111610a6157565b60e0906003190112610a61576004356001600160a01b0381168103610a6157906024359060443590606435906084359060a4359060c43590565b90600182811c92168015612a10575b60208310146129fc57565b634e487b7160e01b5f52602260045260245ffd5b91607f16916129f1565b9060405191825f825492612a2d846129e2565b9081845260019485811690815f14612a985750600114612a58575b5050612a56925003836127f9565b565b909391505f52602090815f20935f915b818310612a80575050612a5693508201015f80612a48565b85548884018501529485019487945091830191612a68565b915050612a5694506020925060ff191682840152151560051b8201015f80612a48565b5f5b838110612acc5750505f910152565b8181015183820152602001612abd565b90602091612af581518092818552858086019101612abb565b601f01601f1916010190565b335f9081527f08f584bb5334faafa280854191c286de8f907d6af8dd5e653110c56d426e0054602090815260408083205490927f62229496573be0b0846a2fb48a94de962b501adb0b8eaf7f99924b10a81a19fe9160ff1615612b645750505050565b612b6d33612fc6565b91845190612b7a826127de565b60428252848201926060368537825115612d065760308453825190600191821015612d065790607860218501536041915b818311612c9957505050612c57576048612c53938693612c3793612c28985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612bff815180928c603789019101612abb565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190612abb565b010360288101875201856127f9565b5192839262461bcd60e51b845260048401526024830190612adc565b0390fd5b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612cf2576f181899199a1a9b1b9c1cb0b131b232b360811b901a612cc98587612fa1565b5360041c928015612cde575f19019190612bab565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b5f9080825260209060fb8252604092838120338252835260ff848220541615612d435750505050565b612d4c33612fc6565b91845190612d59826127de565b60428252848201926060368537825115612d065760308453825190600191821015612d065790607860218501536041915b818311612dde57505050612c57576048612c53938693612c3793612c28985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612bff815180928c603789019101612abb565b909192600f81166010811015612cf2576f181899199a1a9b1b9c1cb0b131b232b360811b901a612e0e8587612fa1565b5360041c928015612cde575f19019190612d8a565b6001600160a01b03165f8181527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205490919060ff16612e67575050565b81805260fb602052604082208183526020526040822060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8180a4565b905f9180835260fb602052604083209160018060a01b03169182845260205260ff604084205416612edd57505050565b80835260fb602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b6065546001600160a01b03163303612f3657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b81810292918115918404141715612f8d57565b634e487b7160e01b5f52601160045260245ffd5b908151811015612fb2570160200190565b634e487b7160e01b5f52603260045260245ffd5b60405190612fd3826127a8565b602a8252602082016040368237825115612fb257603090538151600190811015612fb257607860218401536029905b8082116130565750506130125790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156130ad576f181899199a1a9b1b9c1cb0b131b232b360811b901a6130858486612fa1565b5360041c918015613099575f190190613002565b60245f634e487b7160e01b81526011600452fd5b60245f634e487b7160e01b81526032600452fd5b156130c857565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6065546001600160a01b0390613138908216612e23565b6001600160601b0360a01b8060975416609755816065549316918280928516176065555f93167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a381805260fb6020526040822081835260205260ff604083205416156131a5575050565b81805260fb6020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4565b6002600154146131ff576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b51906001600160a01b0382168203610a6157565b805115612fb25760200190565b805160011015612fb25760400190565b9081518082526020808093019301915f5b828110613294575050505090565b83516001600160a01b031685529381019392810192600101613286565b90916132c86132dd93606084526060840190613275565b91600160208201526040818403910152612adc565b90565b81156132ea570490565b634e487b7160e01b5f52601260045260245ffd5b9190826040910312610a61576020825192015190565b91908203918211612f8d57565b6001600160a01b039182168152918116602083015260408201929092529181166060830152909116608082015260a00190565b610134546040516370a0823160e01b81523360048201525f9a9891979296919592949193906020816024816001600160a01b038d165afa801561389d578b918d91613864575b5010613852576133b7966101325498898061382f575b5050613ad0565b61012e54610134546040516364e329cb60e11b81526001600160a01b03808516600483015291821660248201529692939291602091889160449183918691165af195861561079d5781966137f3575b50604051613413816127a8565b600281526040366020830137610134546001600160a01b031661343582613258565b526001600160a01b03841661344982613265565b526101335460405163c45a015560e01b815290602090829060049082906001600160a01b03165afa9081156118005783916137b1575b506134ba916020916040519160018484015283835261349d836127c3565b85604051809681958294632a422c2b60e21b8452600484016132b1565b03926001600160a01b03165af180156115f157613778575b506001600160a01b0383163b1561032c57604051631e59818360e31b81526001600160a01b038781166004830152829082906024908290849089165af180156115f157613769575b509061013c54670de0b6b3a7640000908181029181830414901517156137555761013b546040516301ca9e1160e71b815291906020908390600490829088906001600160a01b03165af190811561199057849161371f575b61357c92506132e0565b61012e54610134546101315460408051630afbf7f360e01b81526001600160a01b03948516600482015292841660248401529287166044830152606482015260848101929092528160a481736FAbAC8069BC09cAD727fe49157ad69729222e8B5af48015611800579161366a91859493613701575b506001600160a01b038481168085526101356020908152604080872060020180546001600160a01b031916948d1694851790556101365481518181529283018890524291830191909152999291907f58d1495ede629d89cfe4c00a5ad620a9ba231de4b1a5040c7b355d43092ff86b90606090a3613314565b80613678575b505050929190565b61012e546101345460408051630fa0d38960e21b8152959093869384936136b5933393909290916001600160a01b03908116911660048701613321565b0381736FAbAC8069BC09cAD727fe49157ad69729222e8B5af49081156115b157506136e3575b808291613670565b6136fb9060403d6040116107965761078881836127f9565b506136db565b6137199060403d6040116107965761078881836127f9565b506135f1565b90506020823d60201161374d575b8161373a602093836127f9565b81010312610a615761357c915190613572565b3d915061372d565b634e487b7160e01b83526011600452602483fd5b61377290612766565b5f61351a565b6020813d6020116137a9575b81613791602093836127f9565b8101031261160b576137a290613244565b505f6134d2565b3d9150613784565b90506020813d6020116137eb575b816137cc602093836127f9565b810103126116be576134ba916137e3602092613244565b91509161347f565b3d91506137bf565b9095506020813d602011613827575b8161380f602093836127f9565b81010312610f9d5761382090613244565b945f613406565b3d9150613802565b61012d5461384b926001600160a01b03918216913391166138a8565b5f896133b0565b604051632ca2f52b60e11b8152600490fd5b9150506020813d602011613895575b81613880602093836127f9565b81010312613891578a90515f61339a565b8b80fd5b3d9150613873565b6040513d8e823e3d90fd5b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064820192909252612a56916138f482608481015b03601f1981018452836127f9565b613906565b51908115158203610a6157565b604051613963916001600160a01b031661391f826127c3565b5f806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161395d6139f2565b91613a21565b80518281159182156139d3575b505090501561397c5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b8380929350010312610a6157816139ea91016138f9565b80825f613970565b3d15613a1c573d90613a038261281a565b91613a1160405193846127f9565b82523d5f602084013e565b606090565b91929015613a835750815115613a35575090565b3b15613a3e5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015613a965750805190602001fd5b60405162461bcd60e51b815260206004820152908190612c53906024830190612adc565b818110613ac5575050565b5f8155600101613aba565b9390613b689593979692602091613b565f60018060a01b0361012f541692613b2d602b60405183613b0a82955180928c8086019101612abb565b81016a08189e48125b9d1953995d60aa1b8a82015203600b8101845201826127f9565b610131546040516334f359f960e01b8152608060048201529b8c96879586946084860190612adc565b84810360031901602486015290612adc565b90604483015230606483015203925af194851561455d575f95614568575b50610130546101345461013a546040516309394e6160e11b81526001600160a01b03808a16600483015292831660248201523060448201526064810191909152969889979590929091602091879160849183915f91165af194851561455d575f95614521575b50835191602085015193606060408701519601519660405198896101808101106001600160401b036101808c011117612779576101808a0160405260018060a01b0316895260018060a01b038a1660208a01525f60408a015260018060a01b03166060890152608088015260a087015260c086015260e0850152610100840152610120830152610140820152600161016082015260018060a01b0382165f5261013560205260405f2060018060a01b038251166001600160601b0360a01b8254161781556001810160018060a01b036020840151166001600160601b0360a01b8254161790556002810160018060a01b036040840151166001600160601b0360a01b8254161790556003810160018060a01b036060840151166001600160601b0360a01b82541617905560808201518051906001600160401b038211612779578190613d3b60048501546129e2565b601f81116144ee575b50602090601f8311600114614480575f92614475575b50508160011b915f199060031b1c19161760048201555b60a08201518051906001600160401b03821161277957600160401b8211612779576020906005840154836005860155808410614421575b500190600583015f5260205f20905f5b8160051c81106143e25750601f1981168103614394575b50505060c08201518051906001600160401b038211612779578190613df760068501546129e2565b601f8111614361575b50602090601f83116001146142f3575f926142e8575b50508160011b915f199060031b1c19161760068201555b60e08201518051906001600160401b038211612779578190613e5260078501546129e2565b601f81116142b5575b50602090601f8311600114614247575f9261423c575b50508160011b915f199060031b1c19161760078201555b6101008201518051906001600160401b038211612779578190613eae60088501546129e2565b601f8111614209575b50602090601f831160011461419b575f92614190575b50508160011b915f199060031b1c19161760088201555b6101208201518051906001600160401b038211612779578190613f0a60098501546129e2565b601f811161415d575b50602090601f83116001146140ef575f926140e4575b50508160011b915f199060031b1c19161760098201555b600a81016101408301518051906001600160401b03821161277957613f6583546129e2565b601f81116140a9575b50602090601f831160011461403e579180600b949261016096945f92614033575b50508160011b915f199060031b1c19161790555b01910151600381101561401f5760ff80198354169116179055610136805490600160401b8210156127795760018201808255821015612fb2575f527f39da2db355130acf428d669fbf1c14faa9d51399a25b793fc254bbbde66f02e20180546001600160a01b0319166001600160a01b03909216919091179055565b634e487b7160e01b5f52602160045260245ffd5b015190505f80613f8f565b90601f19831691845f5260205f20925f5b81811061409157509260019285926101609896600b989610614079575b505050811b019055613fa3565b01515f1960f88460031b161c191690555f808061406c565b9293602060018192878601518155019501930161404f565b6140d490845f5260205f20601f850160051c810191602086106140da575b601f0160051c0190613aba565b5f613f6e565b90915081906140c7565b015190505f80613f29565b9250600984015f5260205f20905f935b601f1984168510614142576001945083601f1981161061412a575b505050811b016009820155613f40565b01515f1960f88460031b161c191690555f808061411a565b818101518355602094850194600190930192909101906140ff565b61418a90600986015f5260205f20601f850160051c810191602086106140da57601f0160051c0190613aba565b5f613f13565b015190505f80613ecd565b9250600884015f5260205f20905f935b601f19841685106141ee576001945083601f198116106141d6575b505050811b016008820155613ee4565b01515f1960f88460031b161c191690555f80806141c6565b818101518355602094850194600190930192909101906141ab565b61423690600886015f5260205f20601f850160051c810191602086106140da57601f0160051c0190613aba565b5f613eb7565b015190505f80613e71565b9250600784015f5260205f20905f935b601f198416851061429a576001945083601f19811610614282575b505050811b016007820155613e88565b01515f1960f88460031b161c191690555f8080614272565b81810151835560209485019460019093019290910190614257565b6142e290600786015f5260205f20601f850160051c810191602086106140da57601f0160051c0190613aba565b5f613e5b565b015190505f80613e16565b9250600684015f5260205f20905f935b601f1984168510614346576001945083601f1981161061432e575b505050811b016006820155613e2d565b01515f1960f88460031b161c191690555f808061431e565b81810151835560209485019460019093019290910190614303565b61438e90600686015f5260205f20601f850160051c810191602086106140da57601f0160051c0190613aba565b5f613e00565b5f925f5b601f198316830381106143b457505060051c01555f8080613dcf565b909360206143d96001928460ff895116919060ff809160031b9316831b921b19161790565b95019101614398565b5f805b602081106143fa575083820155600101613db8565b855190959160019160209160ff60038a901b81811b199092169216901b17920195016143e5565b61444f90600586015f52601f845f209181871680614455575b500160051c810190601f860160051c01613aba565b5f613da8565b5f199081848a0160051c86010191825491890360031b1c1690555f61443a565b015190505f80613d5a565b9250600484015f5260205f20905f935b601f19841685106144d3576001945083601f198116106144bb575b505050811b016004820155613d71565b01515f1960f88460031b161c191690555f80806144ab565b81810151835560209485019460019093019290910190614490565b61451b90600486015f5260205f20601f850160051c810191602086106140da57601f0160051c0190613aba565b5f613d44565b9094506020813d602011614555575b8161453d602093836127f9565b81010312610a615761454e90613244565b935f613bec565b3d9150614530565b6040513d5f823e3d90fd5b9094506020813d60201161459c575b81614584602093836127f9565b81010312610a615761459590613244565b935f613b86565b3d9150614577565b6001600160a01b0391821691905f90831561464e57821691828252610135602052600360408320015416801561463c57803b1561160b57818091602460405180948193631bf3091560e11b83528960048401525af180156115f157907f7363600ac233591b10e402fcff7bdaf80647430d9e03638e669d483495043322929161462d575b5080a3565b61463690612766565b5f614628565b60405163ab54b81360e01b8152600490fd5b60405163e04bb5d960e01b8152600490fd5b9190811015612fb25760051b0190565b356001600160a01b0381168103610a615790565b9594939291906020999d9b979c9860805261013b545f9a8b916004604051809481936301ca9e1160e71b835260018060a01b03165af18015614bae578b90614b76575b6146d49150608051612f7a565b808060011b0460021481151715614b625760018b5261013960205260408b205490670de0b6b3a764000091828102928184041490151715614b4e5760011b10614b3c5761472096613ad0565b6001600160a01b03811684526101356020526040808520905198919591906147478a6127a8565b60028a5260403660208c0137610134546001600160a01b03166147698b613258565b526001600160a01b03871661477d8b613265565b526101335460405163c45a015560e01b815290602090829060049082906001600160a01b03165afa90811561172a578791614af6575b506147f098999a602091604051916001848401528383526147d3836127c3565b89604051809d81958294632a422c2b60e21b8452600484016132b1565b03926001600160a01b03165af1978815611790578698614aba575b50600b8101805460ff19166002908117909155810180546001600160a01b0319166001600160a01b038a8116919091179091556003909101541696873b15610f9d5760405163179a694160e11b81526001600160a01b03821660048201528681602481838d5af1801561172a57614aa7575b5060405161488a8161278d565b600181526001600160a01b0388168752610137602052604087209051815460ff191660ff9190911617905561013854600160401b81101561277957600181018061013855811015612fb2576101385f527ff79a63dcec80ed75c82f36161f17b9c2f407860160383a7be0a0ee7962c527ae0180546001600160a01b0319166001600160a01b0389169081179091553b15610f9d5760405163f1b50c1d60e01b81528681600481836001600160a01b038d165af1801561172a57614a93575b506149dd9596979899610136546040519081526001602082015242604082015260018060a01b038316907f58d1495ede629d89cfe4c00a5ad620a9ba231de4b1a5040c7b355d43092ff86b606060018060a01b038d1692a36101345461012d546080516149c592909130916001600160a01b0391821691166138a8565b60805191898b60018060a01b03610134541692614c0f565b929150936149ee8561013154613314565b813b156116be5760405163da3e339760e01b81526001600160a01b038616600482015230602482015260448101919091529082908290606490829084905af180156115f157614a7f575b5050604080516001815260208101949094528301526001600160a01b0316907f4e8e1b96afa9116446f71ff323ac93786664fcbea87475ece33519357750f79090606090a2565b614a898291612766565b61032c5780614a38565b614a9d8791612766565b610f9d575f614948565b614ab390969196612766565b945f61487d565b9097506020813d602011614aee575b81614ad6602093836127f9565b81010312610f9d57614ae790613244565b965f61480b565b3d9150614ac9565b90506020813d602011614b34575b81614b11602093836127f9565b81010312610f99576147f098999a614b2a602092613244565b91509a99986147b3565b3d9150614b04565b604051634088b74160e01b8152600490fd5b634e487b7160e01b8c52601160045260248cfd5b634e487b7160e01b8b52601160045260248bfd5b506020813d602011614ba6575b81614b90602093836127f9565b81010312614ba2576146d490516146c7565b8a80fd5b3d9150614b83565b6040513d8d823e3d90fd5b60ff60019116019060ff8211612f8d57565b60ff1660ff8114612f8d5760010190565b9081518082526020808093019301915f5b828110614bfb575050505090565b835185529381019392810192600101614bed565b9897909996919392955f8096819560405191614c2a836127a8565b600283526040366020850137614c3f83613258565b6001600160a01b038c169052614c5483613265565b6001600160a01b038a16905260405194614c6d866127a8565b60028652604036602088013781614c8387613258565b5282614c8e87613265565b5260405197614c9c896127a8565b6002895260403660208b0137614cb189613258565b52614cbb88613265565b5261013380549092614cda916001600160a01b03908116908c16614fea565b8154614cf491906001600160a01b03908116908d16614fea565b54604051623c7cd360e91b81526001600482015260e060248201529b8c966001600160a01b039092169587958694919391614d339060e4870190613275565b906003199182878203016044880152614d4b91614bdc565b90858203016064860152614d5e91614bdc565b9160848401523060a484015260c483015203925af19687156115f15782958398614f1a575b5087614dad8183614d9d614d968b613258565b519a613265565b519a6001600160a01b0316614fea565b6001600160a01b03821690813b15610fa15784916024839260405194859384926340519a5360e01b845260048401525af1801561199057614f07575b506040516370a0823160e01b8082523060048301529091906020836024816001600160a01b0388165afa928315614efc578593614ec8575b506040519081523060048201526020816024816001600160a01b038a165afa9485156115b15794614e94575b5081614e7a575b50505080614e60575050565b61012d54612a56926001600160a01b039182169116614fb1565b614e8c926001600160a01b0316614fb1565b5f8080614e54565b9093506020813d602011614ec0575b81614eb0602093836127f9565b81010312610a615751925f614e4d565b3d9150614ea3565b9092506020813d602011614ef4575b81614ee4602093836127f9565b81010312610a615751915f614e21565b3d9150614ed7565b6040513d87823e3d90fd5b614f1390939193612766565b915f614de9565b955096503d8083873e614f2d81876127f9565b8501946040818703126116be5780516001600160401b038111610fa55781019580601f88011215610fa5578651614f638161287b565b97614f71604051998a6127f9565b8189526020808a019260051b820101928311610f9d57602001905b828210614fa15750505060200151965f614d83565b8151815260209182019101614f8c565b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044820192909252612a56916138f482606481016138e6565b60405163095ea7b360e01b602082018181526001600160a01b0385166024840152604480840196909652948252949390926150266064856127f9565b83515f926001600160a01b039291858416918591829182855af1906150496139f2565b826150d3575b50816150c8575b5015615066575b50505050509050565b6040519660208801521660248601528060448601526044855260808501908582106001600160401b038311176150b457506150a993946138f49160405282613906565b805f8080808061505d565b634e487b7160e01b81526041600452602490fd5b90503b15155f615056565b805191925081159182156150eb575b5050905f61504f565b8192509060209181010312610fa157602061510691016138f9565b5f806150e2565b60ff16801561031a575f19810160ff8111612f8d5760ff165f52610139908160205260405f2054831115615178577f1d518eb390459a1912a9b14c91cc0e67b8449b23fe75f7766658bd86057cb1a392604092825f5260205280835f205582519182526020820152a1565b60405163aabd5a0960e01b8152600490fd5b51906001600160701b0382168203610a6157565b60018060a01b03809116905f9082825260209061013582526040918284209160ff600b8401541690600382101561543457811561542357908186939261013b54169483875180976301ca9e1160e71b82528160049b8c925af19586156154195785966153ea575b5085156153da576002015481169160010361532857509084869392815197888092630240bc6b60e21b82525afa801561531e57829683916152fb575b5095965b871580156152f3575b6152e35781908651948580926318160ddd60e01b82525afa9485156152d8575081946152a1575b50505061529d92615293670de0b6b3a7640000959361529893612f7a565b612f7a565b6132e0565b0490565b909180939450813d83116152d1575b6152ba81836127f9565b8101031261032c5750519082615293615298615275565b503d6152b0565b51913d9150823e3d90fd5b8551633dce448b60e11b81528490fd5b50861561524e565b9050615315919650853d87116107965761078881836127f9565b9590955f615241565b85513d84823e3d90fd5b95606081949392875192838092630240bc6b60e21b82525afa9081156153d0578390849261537b575b506001600160701b03809116911696610134541688105f1461537657955b9596615245565b61536f565b9150506060813d82116153c8575b81615396606093836127f9565b810103126116be576153a78161518a565b866153b384840161518a565b92015163ffffffff811603610fa5575f615351565b3d9150615389565b86513d85823e3d90fd5b8651631d59567b60e11b81528890fd5b9095508381813d8311615412575b61540281836127f9565b81010312610fa15751945f615205565b503d6153f8565b87513d87823e3d90fd5b845163c1ab6dc160e01b8152600490fd5b634e487b7160e01b86526021600452602486fdfea26469706673582212200b51befbf5d6b86387eeab4c2398208fdf5dd448a42f1d4774a858b9752ce16064736f6c63430008140033",
  "deployedBytecode": "0x60a0806040526004361015610012575f80fd5b5f90813560e01c908163017e7e58146127145750806301b964d2146126a557806301ffc9a71461264e57806302b6b15a146125735780630d63237f146125175780630d7a94f6146124ae5780631083f761146124845780631db9be1b1461245a578063248a9ca31461242d57806326bde5aa146123be5780632f2ff15d1461230f5780632f73a9f8146122a057806336568abe1461220d5780633744cfdd14612188578063378dc3dc146121695780633b5f19351461214a5780633c0b93aa1461207f57806341344d5d146120535780634189a68e14611f86578063456f5e1514611e805780634d86030314611e3f5780635481860514611d445780635823892a14611c955780635bb4780814611c265780635edb9eb014611c075780636140259614611bb8578063715018a614611ae157806372641aa614611aae57806377796ace14611a3f57806378a8956714611a2057806379ba50971461199b5780637adbf973146118b75780637c13774b1461185b5780637dc0d1d0146118315780637deb602514610fa95780637f7ee43114610eb15780638da5cb5b14610e8857806391d1485414610e3e578063a217fddf14610e22578063a240de0314610df8578063a3e01ce314610ca8578063a8b3820514610c89578063ae29d56814610c56578063b4f2e8b814610bda578063b758ba8814610b9f578063c17ac35a14610b45578063c1ba290714610b26578063c45a015514610afc578063c75ed64414610aa2578063c78418b914610a65578063c8379f8114610826578063d547741f146107e8578063d723a3d2146107aa578063d98b2f5c146106d3578063ddca3f43146106b4578063df1dcaa914610646578063e30c39781461061d578063e77772fe146105f3578063e84ca7cb146105b3578063f2fde38b14610545578063f5dab711146103f9578063f943ce0714610391578063fa1653bd1461032f5763feab61eb146102de575f80fd5b3461032c57604036600319011261032c576102f7612892565b6102ff612f22565b600360ff82161161031a57610317906024359061510d565b80f35b60405163e82a532960e01b8152600490fd5b80fd5b503461032c57602036600319011261032c576001600160a01b0361035161273a565b16815261013560205260ff600b6040832001541690600382101561037d57602082600260405191148152f35b634e487b7160e01b81526021600452602490fd5b503461032c57602036600319011261032c576004356103ae612f22565b80156103e7576020817f51dfcc99f9c590c7a4bcf74fc4e9ae6b407ec6689eb354e3215563a0b5bcd00d9261013c55604051908152a180f35b6040516338c51d2560e21b8152600490fd5b503461032c57602036600319011261032c576001600160a01b038061041c61273a565b16825261013560205260408220908082541691816001820154169180600283015416906003830154166004830161045290612a1a565b61045e60068501612a1a565b61046a60078601612a1a565b9161047760088701612a1a565b9361048460098801612a1a565b95610491600a8901612a1a565b97600b015460ff16986040519a8b5260208b015260408a015260608901526101608060808a015288016104c391612adc565b87810360a08901526104d491612adc565b86810360c08801526104e591612adc565b85810360e08701526104f691612adc565b84810361010086015261050891612adc565b83810361012085015261051a91612adc565b906003811015610531578293506101408301520390f35b634e487b7160e01b84526021600452602484fd5b503461032c57602036600319011261032c5761055f61273a565b610567612f22565b609780546001600160a01b0319166001600160a01b039283169081179091556065549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b503461032c57602036600319011261032c5760209060ff906040906001600160a01b036105de61273a565b16815261013784522054161515604051908152f35b503461032c578060031936011261032c5761012f546040516001600160a01b039091168152602090f35b503461032c578060031936011261032c576097546040516001600160a01b039091168152602090f35b503461032c57602036600319011261032c57600435610663612f22565b6301e133808111156106a2576020817fbeaba78e9fea37c532e9c93af5e8e120a48902131aeb7d3146e3ca49dec45a239261013a55604051908152a180f35b60405163abf20e8f60e01b8152600490fd5b503461032c578060031936011261032c57602061013254604051908152f35b503461032c57604036600319011261032c576106ed61273a565b61012e54610134546040805163a6b8918760e01b81526001600160a01b0393841660048201529183166024808401919091529290931660448201529035606482015291908280608481015b038173__$57bf2248a10612b83e4be7103a658af84f$__5af4801561079d57604092829161076e575b5082519182526020820152f35b90506107909150823d8411610796575b61078881836127f9565b8101906132fe565b5f610761565b503d61077e565b50604051903d90823e3d90fd5b503461032c57602036600319011261032c5760209060ff906040906001600160a01b036107d561273a565b1681526101378452205416604051908152f35b503461032c57604036600319011261032c57610317600435610808612750565b9080845260fb6020526108216001604086200154612d1a565b612ead565b503461032c5761018036600319011261032c5761084161273a565b610849612750565b6001600160a01b039160443583811690819003610a615760a435848116809103610a615760c43591858316809303610a615760e435868116809103610a61576101243593878516809503610a615788549660ff8860081c161597888099610a54575b8015610a3d575b156109e15760ff1981166001178b55886109d0575b506108e160ff8b5460081c166108dc816130c1565b6130c1565b6108ea33613121565b89549861091260ff8b60081c16610900816130c1565b610909816130c1565b600180556130c1565b6001600160601b0360a01b978161013491168982541617905561012e91168782541617905561012f9086825416179055610130908582541617905561012d9084825416179055606435610132556084356101315561013390838254161790556101043561013a5561013b918254161790556101443561013c556101643561013d5561099b575080f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b61ffff1916610101178a555f6108c7565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156108b25750600160ff8216146108b2565b50600160ff8216106108ab565b5f80fd5b503461032c57602036600319011261032c576020906001600160a01b039060409082610a8f61273a565b1681526101358452205416604051908152f35b503461032c57602036600319011261032c57600435610abf612f22565b61013c5481106103e7576020817fc598615f3cd2c393145f278de5a6921fd815849d1ee5aab7b66bdda0efb33ada9261013d55604051908152a180f35b503461032c578060031936011261032c5761012e546040516001600160a01b039091168152602090f35b503461032c578060031936011261032c57602061013d54604051908152f35b503461032c57602036600319011261032c576040602091610b6461273a565b818351610b708161278d565b526001600160a01b031681526101378352206040519060ff90610b928361278d565b5416809152604051908152f35b503461032c578060031936011261032c5760206040517f62229496573be0b0846a2fb48a94de962b501adb0b8eaf7f99924b10a81a19fe8152f35b503461032c57604036600319011261032c577fc8242dc5446855370b781abbfc5d882af1d1a3cc29143216aba3558feb0ce9256040600435610c1a612750565b610c22612f22565b61013282905561012d80546001600160a01b0319166001600160a01b0392909216918217905582519182526020820152a180f35b503461032c57602036600319011261032c57604060209160ff610c77612892565b16815261013983522054604051908152f35b503461032c578060031936011261032c57602061013a54604051908152f35b503461032c57610cb7366129a8565b90610cc59692949396612b01565b60018060a01b039485841697885f5261013760205260405f2095600260ff610cef818a5416614bb9565b1603610de657610cfe8661519e565b60025f526101396020527fb43cc3dce73ad2c82cb640e429b0bd3222005d4a0d6ac642dad7ae5128bf1dc65411610dd4577f4e8e1b96afa9116446f71ff323ac93786664fcbea87475ece33519357750f790988a610da39760609a825f5261013560205260405f20908060028160038501541693610d978861013498610d8f8c878c54168861012d541630916138a8565b8730916138a8565b01541693541692614c0f565b915091805460ff610db5818316614bcb565b169060ff1916179055604051916002835260208301526040820152a280f35b604051639dc93e9f60e01b8152600490fd5b604051636dfb3ae160e01b8152600490fd5b503461032c578060031936011261032c57610133546040516001600160a01b039091168152602090f35b503461032c578060031936011261032c57602090604051908152f35b503461032c57604036600319011261032c576040610e5a612750565b91600435815260fb602052209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b503461032c578060031936011261032c576065546040516001600160a01b039091168152602090f35b503461032c576101a036600319011261032c57610ecc61273a565b6001600160401b0390602435828111610fa557610eed903690600401612835565b604435838111610fa157610f05903690600401612835565b606435848111610f9d57610f1d9036906004016128a2565b90608435858111610f9957610f36903690600401612835565b9260a435868111610f9557610f4f903690600401612835565b9460c435968711610f9557610f6b61031797369060040161290a565b610f73612b01565b6101843596610164359661014435966101243596610104359660e43596614684565b8780fd5b8680fd5b8580fd5b8480fd5b8380fd5b503461032c57604036600319011261032c57610fc3612750565b6001600160a01b0381168252610135602081905260408320600b015491929160ff16600381101561181d5760010361180b5761012e546101345460408051630fa0d38960e21b8152929091839182916110349133918a9160048035926001600160a01b039081169216908701613321565b038173__$57bf2248a10612b83e4be7103a658af84f$__5af48015611800576117e2575b506110628361519e565b61013d541115611078575b602060405160018152f35b6001600160a01b038316825260205260408120600b8101805460ff166003811015610531576002146117d05760028201805460405163c66f245560e01b815293919291906001600160a01b0316602085600481845afa94851561179057869561179b575b50906020600492604051938480926316d3df1560e31b82525afa91821561179057869261175c575b5061012e54610134546001600160a01b03918216911673__$57bf2248a10612b83e4be7103a658af84f$__3b15610f955760405163e743240d60e01b8152600481019290925260248201526001600160a01b0388166044820152868160648173__$57bf2248a10612b83e4be7103a658af84f$__5af4801561172a57611749575b506001600160a01b0387163b15610f9d5760405163f1b50c1d60e01b81528681600481836001600160a01b038d165af1801561172a57908791611735575b50509061123c939291604080516111d9816127a8565b6002815281366020830137610134546001600160a01b03166111fa82613258565b526001600160a01b038a1661120e82613265565b5260018060a01b0361013354168251808099819463237c65f960e01b83528660048401526044830190613275565b6001602483015203915afa94851561172a5787956116e1575b50600301546001600160a01b031694853b15610f995760405163179a694160e11b81526001600160a01b03861660048201528781602481838b5af180156116d6579088916116c2575b50506113cc6113ba9160018060a01b036101345416938a5f9485809461137f604051916112ca836127a8565b6002835260403660208501378a6112e084613258565b526001600160a01b0386166112f484613265565b5261136c60405197611305896127a8565b6002895260403660208b01378261131b8a613258565b52806113268a613265565b5260405197611334896127a8565b6002895260403660208b01378361134a8a613258565b52816113558a613265565b52610133546001600160a01b039081169116614fea565b610133546001600160a01b03168b614fea565b6113de60018060a01b0361013354169460405198899788968795623c7cd360e91b87526001600488015260e0602488015260e4870190613275565b85810360031901604487015290614bdc565b83810360031901606485015290614bdc565b8260848301523060a48301524260c483015203925af19081156115f1578290839261160f575b508061141261141892613258565b50613265565b5061142d81886001600160a01b038916614fea565b863b1561160b57604051906340519a5360e01b825260048201528181602481838b5af180156115f1576115fc575b506040516370a0823160e01b8152306004820152956020876024816001600160a01b038d165afa9687156115f15782976115bd575b506040516370a0823160e01b815230600482015296602088602481875afa9283156115b1579261155d575b7f381d54fa425631e6266af114239150fae1d5db67bb65b4fa9ecc65013107e07e975080611543575b505080611523575b5050805460ff1916600217905580546001600160a01b0319166001600160a01b0392831690811790915593169180a35f808061106d565b61012d5461153c926001600160a01b0390911690614fb1565b5f806114ec565b611556916001600160a01b038b16614fb1565b5f806114e4565b91506020873d6020116115a9575b81611578602093836127f9565b81010312610a61577f381d54fa425631e6266af114239150fae1d5db67bb65b4fa9ecc65013107e07e9651916114bb565b3d915061156b565b604051903d90823e3d90fd5b9096506020813d6020116115e9575b816115d9602093836127f9565b81010312610a615751955f611490565b3d91506115cc565b6040513d84823e3d90fd5b61160590612766565b5f61145b565b5080fd5b9150503d908183823e61162282826127f9565b60408183810103126116be578051916001600160401b038311610fa557808201601f848401011215610fa557828201519061165c8261287b565b9361166a60405195866127f9565b8285526020850191840160208460051b838701010111610f9d57602081850101915b60208460051b838701010183106116ae57505050506020015190611418611404565b825181526020928301920161168c565b8280fd5b6116cb90612766565b610f9957865f61129e565b6040513d8a823e3d90fd5b9094506040813d604011611722575b816116fd604093836127f9565b81010312610f995761171a602061171383613244565b92016138f9565b50935f611255565b3d91506116f0565b6040513d89823e3d90fd5b61173e90612766565b610f9d57855f6111c3565b61175590969196612766565b945f611185565b9091506020813d602011611788575b81611778602093836127f9565b81010312610f9d5751905f611104565b3d915061176b565b6040513d88823e3d90fd5b9094506020813d6020116117c8575b816117b7602093836127f9565b81010312610f9d57519360206110dc565b3d91506117aa565b604051633a2cc0e960e11b8152600490fd5b6117fa9060403d6040116107965761078881836127f9565b50611058565b6040513d85823e3d90fd5b6040516305e1dfe360e11b8152600490fd5b634e487b7160e01b83526021600452602483fd5b503461032c578060031936011261032c5761013b546040516001600160a01b039091168152602090f35b503461032c57602036600319011261032c5760043561013680548210156116be579091527f39da2db355130acf428d669fbf1c14faa9d51399a25b793fc254bbbde66f02e201546040516001600160a01b039091168152602090f35b503461032c5760208060031936011261160b576118d261273a565b6118da612f22565b6040516301ca9e1160e71b81526001600160a01b03919091169190818160048187875af1908115611990578491611963575b50156119515761013b80546001600160a01b031916831790556040519182527f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa91a180f35b604051639589a27d60e01b8152600490fd5b90508181813d8311611989575b61197a81836127f9565b81010312610fa557515f61190c565b503d611970565b6040513d86823e3d90fd5b503461032c578060031936011261032c57609754336001600160a01b03909116036119c95761031733613121565b60405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608490fd5b503461032c578060031936011261032c57602061013654604051908152f35b503461032c57602036600319011261032c577f0454b4498edcb0a2c7058cfd107bb0e6551b3820f891c725db307ed66e740f206020611a7c61273a565b611a84612f22565b61013380546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b503461032c57604036600319011261032c57610317611acb61273a565b611ad3612750565b90611adc612f22565b6145a4565b503461032c578060031936011261032c57611afa612f22565b60655481906001600160a01b0390611b13908216612e23565b6001600160601b0360a01b8060975416609755606554908116606555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380805260fb6020526040812060205260ff60408220541615611b735780f35b60fb6020526040812060205260408120600160ff198254161790553381807f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a480f35b503461032c57602036600319011261032c577fedbbbd0f3b9ac5d8f4d9142fe0b31c73d786619eab0d7f8df600fe84282a4d436020600435611bf8612f22565b8061013155604051908152a180f35b503461032c578060031936011261032c57602061013854604051908152f35b503461032c57602036600319011261032c577f1edf3afd4ac789736e00d216cd88be164ddcef26a6eedcc30cdb0cb62f3741b16020611c6361273a565b611c6b612f22565b61012e80546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b503461032c57604036600319011261032c576001600160401b036004358181116116be57611cc7903690600401612978565b9091602435908111610fa557611ce1903690600401612978565b9091611ceb612f22565b818103611d3257845b818110611cff578580f35b80611d2c611d18611d13600194868a614660565b614670565b611d26611d1384888a614660565b906145a4565b01611cf4565b6040516305e8333d60e11b8152600490fd5b503461032c57611d53366129a8565b90611d619692949396612b01565b60018060a01b039485841697888a5261013760205260408a2095600360ff611d8b818a5416614bb9565b1603610de657611d9a8661519e565b60038c5261013960205260408c205411610dd4577f4e8e1b96afa9116446f71ff323ac93786664fcbea87475ece33519357750f790988a611e0e9760609a60408f84815261013560205220908060028160038501541693610d978861013498610d8f8c878c54168861012d541630916138a8565b915091805460ff611e20818316614bcb565b169060ff1916179055604051916003835260208301526040820152a280f35b503461032c57602036600319011261032c576020906001600160a01b039060039060409083611e6c61273a565b168152610135855220015416604051908152f35b503461032c5761010036600319011261032c57611e9b61273a565b906001600160401b039060243582811161160b57611ebd903690600401612835565b916044358181116116be57611ed6903690600401612835565b606435828111610fa557611eee9036906004016128a2565b90608435838111610fa157611f07903690600401612835565b9260a435818111610f9d57611f20903690600401612835565b9460c43591821161032c57611f82611f56898989898989611f443660048c0161290a565b94611f4d6131ee565b60e43596613354565b60018055604080516001600160a01b039485168152939092166020840152908201529081906060820190565b0390f35b503461032c57604036600319011261032c57611fa0612750565b6001600160a01b03808216835261013560205260408320600b01549092919060ff16600381101561181d5760010361180b576040908361012e5416936101345416936120058351958693849363c682df7760e01b855233926004359160048701613321565b038173__$57bf2248a10612b83e4be7103a658af84f$__5af49081156115b1575061203557602060405160018152f35b61204d9060403d6040116107965761078881836127f9565b5061106d565b503461032c57602036600319011261032c57602061207761207261273a565b61519e565b604051908152f35b503461032c5760e036600319011261032c576001600160401b036004358181116116be576120b1903690600401612835565b9160243582811161160b576120ca903690600401612835565b916044358181116116be576120e39036906004016128a2565b606435828111610fa5576120fb903690600401612835565b91608435818111610fa157612114903690600401612835565b9360a43591821161032c57611f82611f5688888888886121373660048b0161290a565b936121406131ee565b60c4359533613354565b503461032c578060031936011261032c57602061013c54604051908152f35b503461032c578060031936011261032c57602061013154604051908152f35b503461032c57602036600319011261032c576004356001600160401b03811161160b576121b9903690600401612978565b6121c4929192612f22565b600390818103611d3257825b60ff81168381101561220957906121ff612204926121f86121f084614bb9565b91868a614660565b359061510d565b614bcb565b6121d0565b8480f35b503461032c57604036600319011261032c57612227612750565b336001600160a01b038216036122435761031790600435612ead565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b503461032c57602036600319011261032c577fcf4be1c851767114c1f4b298dc84eab48d103473908393f6d408c82ba7cda0e860206122dd61273a565b6122e5612f22565b61012f80546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b503461032c57604036600319011261032c5760043561232c612750565b81835260fb6020526123446001604085200154612d1a565b81835260fb602052604083209060018060a01b03169081845260205260ff60408420541615612371578280f35b81835260fb6020526040832081845260205260408320600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8480a45f808280f35b503461032c57602036600319011261032c577fbdaa8f7ade01473981aef419539e6c190d409f50b144a7a796efd2777607920c60206123fb61273a565b612403612f22565b61013480546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b503461032c57602036600319011261032c5760016040602092600435815260fb8452200154604051908152f35b503461032c578060031936011261032c57610130546040516001600160a01b039091168152602090f35b503461032c578060031936011261032c57610134546040516001600160a01b039091168152602090f35b503461032c57604036600319011261032c576124c861273a565b61012e546101345460408051631d486c9760e21b81526001600160a01b039384166004820152918316602480840191909152929093166044820152903560648201529190828060848101610738565b503461032c57602036600319011261032c5760043561013880548210156116be579091527ff79a63dcec80ed75c82f36161f17b9c2f407860160383a7be0a0ee7962c527ae01546040516001600160a01b039091168152602090f35b503461032c5761018036600319011261032c576001600160401b036004358181116116be576125a6903690600401612835565b602435828111610fa5576125be903690600401612835565b604435838111610fa1576125d69036906004016128a2565b606435848111610f9d576125ee903690600401612835565b90608435858111610f9957612607903690600401612835565b9260a435958611610f995761262361031796369060040161290a565b9461262c612b01565b610164359561014435956101243595610104359560e4359560c4359533614684565b503461032c57602036600319011261032c5760043563ffffffff60e01b811680910361160b57602090637965db0b60e01b8114908115612694575b506040519015158152f35b6301ffc9a760e01b14905082612689565b503461032c57602036600319011261032c577f3587ea62a24fc6959886ef88a458920ef0762b7ecbae1e87892c731869362d6960206126e261273a565b6126ea612f22565b61013080546001600160a01b0319166001600160a01b03929092169182179055604051908152a180f35b90503461160b578160031936011261160b5761012d546001600160a01b03168152602090f35b600435906001600160a01b0382168203610a6157565b602435906001600160a01b0382168203610a6157565b6001600160401b03811161277957604052565b634e487b7160e01b5f52604160045260245ffd5b602081019081106001600160401b0382111761277957604052565b606081019081106001600160401b0382111761277957604052565b604081019081106001600160401b0382111761277957604052565b608081019081106001600160401b0382111761277957604052565b90601f801991011681019081106001600160401b0382111761277957604052565b6001600160401b03811161277957601f01601f191660200190565b81601f82011215610a615780359061284c8261281a565b9261285a60405194856127f9565b82845260208383010111610a6157815f926020809301838601378301015290565b6001600160401b0381116127795760051b60200190565b6004359060ff82168203610a6157565b81601f82011215610a61578035916128b98361287b565b926128c760405194856127f9565b808452602092838086019260051b820101928311610a61578301905b8282106128f1575050505090565b813560ff81168103610a615781529083019083016128e3565b9080601f83011215610a6157604051916001600160401b03608084018181118582101761277957604052836080830192848411610a615780915b8483106129545750505050505090565b8235848111610a615760209161296d8884938601612835565b815201920191612944565b9181601f84011215610a61578235916001600160401b038311610a61576020808501948460051b010111610a6157565b60e0906003190112610a61576004356001600160a01b0381168103610a6157906024359060443590606435906084359060a4359060c43590565b90600182811c92168015612a10575b60208310146129fc57565b634e487b7160e01b5f52602260045260245ffd5b91607f16916129f1565b9060405191825f825492612a2d846129e2565b9081845260019485811690815f14612a985750600114612a58575b5050612a56925003836127f9565b565b909391505f52602090815f20935f915b818310612a80575050612a5693508201015f80612a48565b85548884018501529485019487945091830191612a68565b915050612a5694506020925060ff191682840152151560051b8201015f80612a48565b5f5b838110612acc5750505f910152565b8181015183820152602001612abd565b90602091612af581518092818552858086019101612abb565b601f01601f1916010190565b335f9081527f08f584bb5334faafa280854191c286de8f907d6af8dd5e653110c56d426e0054602090815260408083205490927f62229496573be0b0846a2fb48a94de962b501adb0b8eaf7f99924b10a81a19fe9160ff1615612b645750505050565b612b6d33612fc6565b91845190612b7a826127de565b60428252848201926060368537825115612d065760308453825190600191821015612d065790607860218501536041915b818311612c9957505050612c57576048612c53938693612c3793612c28985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612bff815180928c603789019101612abb565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190612abb565b010360288101875201856127f9565b5192839262461bcd60e51b845260048401526024830190612adc565b0390fd5b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612cf2576f181899199a1a9b1b9c1cb0b131b232b360811b901a612cc98587612fa1565b5360041c928015612cde575f19019190612bab565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b5f9080825260209060fb8252604092838120338252835260ff848220541615612d435750505050565b612d4c33612fc6565b91845190612d59826127de565b60428252848201926060368537825115612d065760308453825190600191821015612d065790607860218501536041915b818311612dde57505050612c57576048612c53938693612c3793612c28985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612bff815180928c603789019101612abb565b909192600f81166010811015612cf2576f181899199a1a9b1b9c1cb0b131b232b360811b901a612e0e8587612fa1565b5360041c928015612cde575f19019190612d8a565b6001600160a01b03165f8181527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205490919060ff16612e67575050565b81805260fb602052604082208183526020526040822060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8180a4565b905f9180835260fb602052604083209160018060a01b03169182845260205260ff604084205416612edd57505050565b80835260fb602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b6065546001600160a01b03163303612f3657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b81810292918115918404141715612f8d57565b634e487b7160e01b5f52601160045260245ffd5b908151811015612fb2570160200190565b634e487b7160e01b5f52603260045260245ffd5b60405190612fd3826127a8565b602a8252602082016040368237825115612fb257603090538151600190811015612fb257607860218401536029905b8082116130565750506130125790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156130ad576f181899199a1a9b1b9c1cb0b131b232b360811b901a6130858486612fa1565b5360041c918015613099575f190190613002565b60245f634e487b7160e01b81526011600452fd5b60245f634e487b7160e01b81526032600452fd5b156130c857565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6065546001600160a01b0390613138908216612e23565b6001600160601b0360a01b8060975416609755816065549316918280928516176065555f93167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a381805260fb6020526040822081835260205260ff604083205416156131a5575050565b81805260fb6020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4565b6002600154146131ff576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b51906001600160a01b0382168203610a6157565b805115612fb25760200190565b805160011015612fb25760400190565b9081518082526020808093019301915f5b828110613294575050505090565b83516001600160a01b031685529381019392810192600101613286565b90916132c86132dd93606084526060840190613275565b91600160208201526040818403910152612adc565b90565b81156132ea570490565b634e487b7160e01b5f52601260045260245ffd5b9190826040910312610a61576020825192015190565b91908203918211612f8d57565b6001600160a01b039182168152918116602083015260408201929092529181166060830152909116608082015260a00190565b610134546040516370a0823160e01b81523360048201525f9a9891979296919592949193906020816024816001600160a01b038d165afa801561389d578b918d91613864575b5010613852576133b7966101325498898061382f575b5050613ad0565b61012e54610134546040516364e329cb60e11b81526001600160a01b03808516600483015291821660248201529692939291602091889160449183918691165af195861561079d5781966137f3575b50604051613413816127a8565b600281526040366020830137610134546001600160a01b031661343582613258565b526001600160a01b03841661344982613265565b526101335460405163c45a015560e01b815290602090829060049082906001600160a01b03165afa9081156118005783916137b1575b506134ba916020916040519160018484015283835261349d836127c3565b85604051809681958294632a422c2b60e21b8452600484016132b1565b03926001600160a01b03165af180156115f157613778575b506001600160a01b0383163b1561032c57604051631e59818360e31b81526001600160a01b038781166004830152829082906024908290849089165af180156115f157613769575b509061013c54670de0b6b3a7640000908181029181830414901517156137555761013b546040516301ca9e1160e71b815291906020908390600490829088906001600160a01b03165af190811561199057849161371f575b61357c92506132e0565b61012e54610134546101315460408051630afbf7f360e01b81526001600160a01b03948516600482015292841660248401529287166044830152606482015260848101929092528160a48173__$57bf2248a10612b83e4be7103a658af84f$__5af48015611800579161366a91859493613701575b506001600160a01b038481168085526101356020908152604080872060020180546001600160a01b031916948d1694851790556101365481518181529283018890524291830191909152999291907f58d1495ede629d89cfe4c00a5ad620a9ba231de4b1a5040c7b355d43092ff86b90606090a3613314565b80613678575b505050929190565b61012e546101345460408051630fa0d38960e21b8152959093869384936136b5933393909290916001600160a01b03908116911660048701613321565b038173__$57bf2248a10612b83e4be7103a658af84f$__5af49081156115b157506136e3575b808291613670565b6136fb9060403d6040116107965761078881836127f9565b506136db565b6137199060403d6040116107965761078881836127f9565b506135f1565b90506020823d60201161374d575b8161373a602093836127f9565b81010312610a615761357c915190613572565b3d915061372d565b634e487b7160e01b83526011600452602483fd5b61377290612766565b5f61351a565b6020813d6020116137a9575b81613791602093836127f9565b8101031261160b576137a290613244565b505f6134d2565b3d9150613784565b90506020813d6020116137eb575b816137cc602093836127f9565b810103126116be576134ba916137e3602092613244565b91509161347f565b3d91506137bf565b9095506020813d602011613827575b8161380f602093836127f9565b81010312610f9d5761382090613244565b945f613406565b3d9150613802565b61012d5461384b926001600160a01b03918216913391166138a8565b5f896133b0565b604051632ca2f52b60e11b8152600490fd5b9150506020813d602011613895575b81613880602093836127f9565b81010312613891578a90515f61339a565b8b80fd5b3d9150613873565b6040513d8e823e3d90fd5b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064820192909252612a56916138f482608481015b03601f1981018452836127f9565b613906565b51908115158203610a6157565b604051613963916001600160a01b031661391f826127c3565b5f806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161395d6139f2565b91613a21565b80518281159182156139d3575b505090501561397c5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b8380929350010312610a6157816139ea91016138f9565b80825f613970565b3d15613a1c573d90613a038261281a565b91613a1160405193846127f9565b82523d5f602084013e565b606090565b91929015613a835750815115613a35575090565b3b15613a3e5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015613a965750805190602001fd5b60405162461bcd60e51b815260206004820152908190612c53906024830190612adc565b818110613ac5575050565b5f8155600101613aba565b9390613b689593979692602091613b565f60018060a01b0361012f541692613b2d602b60405183613b0a82955180928c8086019101612abb565b81016a08189e48125b9d1953995d60aa1b8a82015203600b8101845201826127f9565b610131546040516334f359f960e01b8152608060048201529b8c96879586946084860190612adc565b84810360031901602486015290612adc565b90604483015230606483015203925af194851561455d575f95614568575b50610130546101345461013a546040516309394e6160e11b81526001600160a01b03808a16600483015292831660248201523060448201526064810191909152969889979590929091602091879160849183915f91165af194851561455d575f95614521575b50835191602085015193606060408701519601519660405198896101808101106001600160401b036101808c011117612779576101808a0160405260018060a01b0316895260018060a01b038a1660208a01525f60408a015260018060a01b03166060890152608088015260a087015260c086015260e0850152610100840152610120830152610140820152600161016082015260018060a01b0382165f5261013560205260405f2060018060a01b038251166001600160601b0360a01b8254161781556001810160018060a01b036020840151166001600160601b0360a01b8254161790556002810160018060a01b036040840151166001600160601b0360a01b8254161790556003810160018060a01b036060840151166001600160601b0360a01b82541617905560808201518051906001600160401b038211612779578190613d3b60048501546129e2565b601f81116144ee575b50602090601f8311600114614480575f92614475575b50508160011b915f199060031b1c19161760048201555b60a08201518051906001600160401b03821161277957600160401b8211612779576020906005840154836005860155808410614421575b500190600583015f5260205f20905f5b8160051c81106143e25750601f1981168103614394575b50505060c08201518051906001600160401b038211612779578190613df760068501546129e2565b601f8111614361575b50602090601f83116001146142f3575f926142e8575b50508160011b915f199060031b1c19161760068201555b60e08201518051906001600160401b038211612779578190613e5260078501546129e2565b601f81116142b5575b50602090601f8311600114614247575f9261423c575b50508160011b915f199060031b1c19161760078201555b6101008201518051906001600160401b038211612779578190613eae60088501546129e2565b601f8111614209575b50602090601f831160011461419b575f92614190575b50508160011b915f199060031b1c19161760088201555b6101208201518051906001600160401b038211612779578190613f0a60098501546129e2565b601f811161415d575b50602090601f83116001146140ef575f926140e4575b50508160011b915f199060031b1c19161760098201555b600a81016101408301518051906001600160401b03821161277957613f6583546129e2565b601f81116140a9575b50602090601f831160011461403e579180600b949261016096945f92614033575b50508160011b915f199060031b1c19161790555b01910151600381101561401f5760ff80198354169116179055610136805490600160401b8210156127795760018201808255821015612fb2575f527f39da2db355130acf428d669fbf1c14faa9d51399a25b793fc254bbbde66f02e20180546001600160a01b0319166001600160a01b03909216919091179055565b634e487b7160e01b5f52602160045260245ffd5b015190505f80613f8f565b90601f19831691845f5260205f20925f5b81811061409157509260019285926101609896600b989610614079575b505050811b019055613fa3565b01515f1960f88460031b161c191690555f808061406c565b9293602060018192878601518155019501930161404f565b6140d490845f5260205f20601f850160051c810191602086106140da575b601f0160051c0190613aba565b5f613f6e565b90915081906140c7565b015190505f80613f29565b9250600984015f5260205f20905f935b601f1984168510614142576001945083601f1981161061412a575b505050811b016009820155613f40565b01515f1960f88460031b161c191690555f808061411a565b818101518355602094850194600190930192909101906140ff565b61418a90600986015f5260205f20601f850160051c810191602086106140da57601f0160051c0190613aba565b5f613f13565b015190505f80613ecd565b9250600884015f5260205f20905f935b601f19841685106141ee576001945083601f198116106141d6575b505050811b016008820155613ee4565b01515f1960f88460031b161c191690555f80806141c6565b818101518355602094850194600190930192909101906141ab565b61423690600886015f5260205f20601f850160051c810191602086106140da57601f0160051c0190613aba565b5f613eb7565b015190505f80613e71565b9250600784015f5260205f20905f935b601f198416851061429a576001945083601f19811610614282575b505050811b016007820155613e88565b01515f1960f88460031b161c191690555f8080614272565b81810151835560209485019460019093019290910190614257565b6142e290600786015f5260205f20601f850160051c810191602086106140da57601f0160051c0190613aba565b5f613e5b565b015190505f80613e16565b9250600684015f5260205f20905f935b601f1984168510614346576001945083601f1981161061432e575b505050811b016006820155613e2d565b01515f1960f88460031b161c191690555f808061431e565b81810151835560209485019460019093019290910190614303565b61438e90600686015f5260205f20601f850160051c810191602086106140da57601f0160051c0190613aba565b5f613e00565b5f925f5b601f198316830381106143b457505060051c01555f8080613dcf565b909360206143d96001928460ff895116919060ff809160031b9316831b921b19161790565b95019101614398565b5f805b602081106143fa575083820155600101613db8565b855190959160019160209160ff60038a901b81811b199092169216901b17920195016143e5565b61444f90600586015f52601f845f209181871680614455575b500160051c810190601f860160051c01613aba565b5f613da8565b5f199081848a0160051c86010191825491890360031b1c1690555f61443a565b015190505f80613d5a565b9250600484015f5260205f20905f935b601f19841685106144d3576001945083601f198116106144bb575b505050811b016004820155613d71565b01515f1960f88460031b161c191690555f80806144ab565b81810151835560209485019460019093019290910190614490565b61451b90600486015f5260205f20601f850160051c810191602086106140da57601f0160051c0190613aba565b5f613d44565b9094506020813d602011614555575b8161453d602093836127f9565b81010312610a615761454e90613244565b935f613bec565b3d9150614530565b6040513d5f823e3d90fd5b9094506020813d60201161459c575b81614584602093836127f9565b81010312610a615761459590613244565b935f613b86565b3d9150614577565b6001600160a01b0391821691905f90831561464e57821691828252610135602052600360408320015416801561463c57803b1561160b57818091602460405180948193631bf3091560e11b83528960048401525af180156115f157907f7363600ac233591b10e402fcff7bdaf80647430d9e03638e669d483495043322929161462d575b5080a3565b61463690612766565b5f614628565b60405163ab54b81360e01b8152600490fd5b60405163e04bb5d960e01b8152600490fd5b9190811015612fb25760051b0190565b356001600160a01b0381168103610a615790565b9594939291906020999d9b979c9860805261013b545f9a8b916004604051809481936301ca9e1160e71b835260018060a01b03165af18015614bae578b90614b76575b6146d49150608051612f7a565b808060011b0460021481151715614b625760018b5261013960205260408b205490670de0b6b3a764000091828102928184041490151715614b4e5760011b10614b3c5761472096613ad0565b6001600160a01b03811684526101356020526040808520905198919591906147478a6127a8565b60028a5260403660208c0137610134546001600160a01b03166147698b613258565b526001600160a01b03871661477d8b613265565b526101335460405163c45a015560e01b815290602090829060049082906001600160a01b03165afa90811561172a578791614af6575b506147f098999a602091604051916001848401528383526147d3836127c3565b89604051809d81958294632a422c2b60e21b8452600484016132b1565b03926001600160a01b03165af1978815611790578698614aba575b50600b8101805460ff19166002908117909155810180546001600160a01b0319166001600160a01b038a8116919091179091556003909101541696873b15610f9d5760405163179a694160e11b81526001600160a01b03821660048201528681602481838d5af1801561172a57614aa7575b5060405161488a8161278d565b600181526001600160a01b0388168752610137602052604087209051815460ff191660ff9190911617905561013854600160401b81101561277957600181018061013855811015612fb2576101385f527ff79a63dcec80ed75c82f36161f17b9c2f407860160383a7be0a0ee7962c527ae0180546001600160a01b0319166001600160a01b0389169081179091553b15610f9d5760405163f1b50c1d60e01b81528681600481836001600160a01b038d165af1801561172a57614a93575b506149dd9596979899610136546040519081526001602082015242604082015260018060a01b038316907f58d1495ede629d89cfe4c00a5ad620a9ba231de4b1a5040c7b355d43092ff86b606060018060a01b038d1692a36101345461012d546080516149c592909130916001600160a01b0391821691166138a8565b60805191898b60018060a01b03610134541692614c0f565b929150936149ee8561013154613314565b813b156116be5760405163da3e339760e01b81526001600160a01b038616600482015230602482015260448101919091529082908290606490829084905af180156115f157614a7f575b5050604080516001815260208101949094528301526001600160a01b0316907f4e8e1b96afa9116446f71ff323ac93786664fcbea87475ece33519357750f79090606090a2565b614a898291612766565b61032c5780614a38565b614a9d8791612766565b610f9d575f614948565b614ab390969196612766565b945f61487d565b9097506020813d602011614aee575b81614ad6602093836127f9565b81010312610f9d57614ae790613244565b965f61480b565b3d9150614ac9565b90506020813d602011614b34575b81614b11602093836127f9565b81010312610f99576147f098999a614b2a602092613244565b91509a99986147b3565b3d9150614b04565b604051634088b74160e01b8152600490fd5b634e487b7160e01b8c52601160045260248cfd5b634e487b7160e01b8b52601160045260248bfd5b506020813d602011614ba6575b81614b90602093836127f9565b81010312614ba2576146d490516146c7565b8a80fd5b3d9150614b83565b6040513d8d823e3d90fd5b60ff60019116019060ff8211612f8d57565b60ff1660ff8114612f8d5760010190565b9081518082526020808093019301915f5b828110614bfb575050505090565b835185529381019392810192600101614bed565b9897909996919392955f8096819560405191614c2a836127a8565b600283526040366020850137614c3f83613258565b6001600160a01b038c169052614c5483613265565b6001600160a01b038a16905260405194614c6d866127a8565b60028652604036602088013781614c8387613258565b5282614c8e87613265565b5260405197614c9c896127a8565b6002895260403660208b0137614cb189613258565b52614cbb88613265565b5261013380549092614cda916001600160a01b03908116908c16614fea565b8154614cf491906001600160a01b03908116908d16614fea565b54604051623c7cd360e91b81526001600482015260e060248201529b8c966001600160a01b039092169587958694919391614d339060e4870190613275565b906003199182878203016044880152614d4b91614bdc565b90858203016064860152614d5e91614bdc565b9160848401523060a484015260c483015203925af19687156115f15782958398614f1a575b5087614dad8183614d9d614d968b613258565b519a613265565b519a6001600160a01b0316614fea565b6001600160a01b03821690813b15610fa15784916024839260405194859384926340519a5360e01b845260048401525af1801561199057614f07575b506040516370a0823160e01b8082523060048301529091906020836024816001600160a01b0388165afa928315614efc578593614ec8575b506040519081523060048201526020816024816001600160a01b038a165afa9485156115b15794614e94575b5081614e7a575b50505080614e60575050565b61012d54612a56926001600160a01b039182169116614fb1565b614e8c926001600160a01b0316614fb1565b5f8080614e54565b9093506020813d602011614ec0575b81614eb0602093836127f9565b81010312610a615751925f614e4d565b3d9150614ea3565b9092506020813d602011614ef4575b81614ee4602093836127f9565b81010312610a615751915f614e21565b3d9150614ed7565b6040513d87823e3d90fd5b614f1390939193612766565b915f614de9565b955096503d8083873e614f2d81876127f9565b8501946040818703126116be5780516001600160401b038111610fa55781019580601f88011215610fa5578651614f638161287b565b97614f71604051998a6127f9565b8189526020808a019260051b820101928311610f9d57602001905b828210614fa15750505060200151965f614d83565b8151815260209182019101614f8c565b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044820192909252612a56916138f482606481016138e6565b60405163095ea7b360e01b602082018181526001600160a01b0385166024840152604480840196909652948252949390926150266064856127f9565b83515f926001600160a01b039291858416918591829182855af1906150496139f2565b826150d3575b50816150c8575b5015615066575b50505050509050565b6040519660208801521660248601528060448601526044855260808501908582106001600160401b038311176150b457506150a993946138f49160405282613906565b805f8080808061505d565b634e487b7160e01b81526041600452602490fd5b90503b15155f615056565b805191925081159182156150eb575b5050905f61504f565b8192509060209181010312610fa157602061510691016138f9565b5f806150e2565b60ff16801561031a575f19810160ff8111612f8d5760ff165f52610139908160205260405f2054831115615178577f1d518eb390459a1912a9b14c91cc0e67b8449b23fe75f7766658bd86057cb1a392604092825f5260205280835f205582519182526020820152a1565b60405163aabd5a0960e01b8152600490fd5b51906001600160701b0382168203610a6157565b60018060a01b03809116905f9082825260209061013582526040918284209160ff600b8401541690600382101561543457811561542357908186939261013b54169483875180976301ca9e1160e71b82528160049b8c925af19586156154195785966153ea575b5085156153da576002015481169160010361532857509084869392815197888092630240bc6b60e21b82525afa801561531e57829683916152fb575b5095965b871580156152f3575b6152e35781908651948580926318160ddd60e01b82525afa9485156152d8575081946152a1575b50505061529d92615293670de0b6b3a7640000959361529893612f7a565b612f7a565b6132e0565b0490565b909180939450813d83116152d1575b6152ba81836127f9565b8101031261032c5750519082615293615298615275565b503d6152b0565b51913d9150823e3d90fd5b8551633dce448b60e11b81528490fd5b50861561524e565b9050615315919650853d87116107965761078881836127f9565b9590955f615241565b85513d84823e3d90fd5b95606081949392875192838092630240bc6b60e21b82525afa9081156153d0578390849261537b575b506001600160701b03809116911696610134541688105f1461537657955b9596615245565b61536f565b9150506060813d82116153c8575b81615396606093836127f9565b810103126116be576153a78161518a565b866153b384840161518a565b92015163ffffffff811603610fa5575f615351565b3d9150615389565b86513d85823e3d90fd5b8651631d59567b60e11b81528890fd5b9095508381813d8311615412575b61540281836127f9565b81010312610fa15751945f615205565b503d6153f8565b87513d87823e3d90fd5b845163c1ab6dc160e01b8152600490fd5b634e487b7160e01b86526021600452602486fdfea26469706673582212200b51befbf5d6b86387eeab4c2398208fdf5dd448a42f1d4774a858b9752ce16064736f6c63430008140033",
  "libraries": {
    "INTRouterLibrary": "0x6FAbAC8069BC09cAD727fe49157ad69729222e8B"
  },
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "boost1(string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Only callable by owner. Adds liquidity via external router",
        "params": {
          "assetAmount": "Amount of asset tokens to add as liquidity",
          "assetAmountMin": "Minimum amount of asset tokens that must be added as liquidity",
          "cores": "Array of core values",
          "deadline": "Timestamp after which the transaction will revert",
          "desc": "Description of the token",
          "img": "Image URL for the token",
          "minLiquidity": "Minimum amount of liquidity tokens that must be minted",
          "name": "The name of the token",
          "ticker": "The ticker symbol of the token",
          "tokenAmount": "Amount of tokens to add as liquidity",
          "tokenAmountMin": "Minimum amount of tokens that must be added as liquidity",
          "urls": "Array of 4 URLs (twitter, telegram, farcaster, website)"
        }
      },
      "boost1For(address,string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Only callable by owner. Adds liquidity via external router",
        "params": {
          "assetAmount": "Amount of asset tokens to add as liquidity",
          "assetAmountMin": "Minimum amount of asset tokens that must be added as liquidity",
          "cores": "Array of core values",
          "creator": "The creator of the token",
          "deadline": "Timestamp after which the transaction will revert",
          "desc": "Description of the token",
          "img": "Image URL for the token",
          "minLiquidity": "Minimum amount of liquidity tokens that must be minted",
          "name": "The name of the token",
          "ticker": "The ticker symbol of the token",
          "tokenAmount": "Amount of tokens to add as liquidity",
          "tokenAmountMin": "Minimum amount of tokens that must be added as liquidity",
          "urls": "Array of 4 URLs (twitter, telegram, farcaster, website)"
        }
      },
      "boost2(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Only callable by booster. Adds liquidity via external router",
        "params": {
          "assetAmount": "Amount of asset tokens to add as liquidity",
          "assetAmountMin": "Minimum amount of asset tokens that must be added as liquidity",
          "deadline": "Timestamp after which the transaction will revert",
          "minLiquidity": "Minimum amount of liquidity tokens that must be minted",
          "token": "Address of token to boost",
          "tokenAmount": "Amount of tokens to add as liquidity",
          "tokenAmountMin": "Minimum amount of tokens that must be added as liquidity"
        }
      },
      "boost3(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Only callable by owner. Adds liquidity via external router",
        "params": {
          "assetAmount": "Amount of asset tokens to add as liquidity",
          "assetAmountMin": "Minimum amount of asset tokens that must be added as liquidity",
          "deadline": "Timestamp after which the transaction will revert",
          "minLiquidity": "Minimum amount of liquidity tokens that must be minted",
          "token": "Address of token to boost",
          "tokenAmount": "Amount of tokens to add as liquidity",
          "tokenAmountMin": "Minimum amount of tokens that must be added as liquidity"
        }
      },
      "calculateMarketCap(address)": {
        "params": {
          "token": "The token address to calculate market cap for"
        },
        "returns": {
          "_0": "marketCap The calculated market cap in asset token value in 18 decimals"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "delegateLPTo(address,address)": {
        "details": "Delegate LP token to the specified address.",
        "params": {
          "delegatee": "The address to delegate the LP token to.",
          "tokenAddr": "The address of the token to delegate its LP token."
        }
      },
      "delegateLPToBatch(address[],address[])": {
        "details": "Delegate LP token to the specified address for multiple tokens.",
        "params": {
          "delegatees": "The addresses to delegate the LP tokens to.",
          "tokens": "The addresses of the tokens to delegate their LP tokens."
        }
      },
      "getBoostCount()": {
        "returns": {
          "_0": "The length of boostInfos array"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTokenCount()": {
        "returns": {
          "_0": "The length of tokenInfos array"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAssetToken(address)": {
        "details": "Set the asset token address",
        "params": {
          "newAssetToken": "The new asset token address"
        }
      },
      "setBoostStageThreshold(uint8,uint256)": {
        "params": {
          "stage": "The boost stage number (1-3)",
          "threshold": "The threshold amount required for this stage"
        }
      },
      "setBoostStageThresholds(uint256[])": {
        "params": {
          "thresholds": "Array of threshold amounts for stages 1-3"
        }
      },
      "setExtRouter(address)": {
        "details": "Set the external router address",
        "params": {
          "newExtRouter": "The new external router address"
        }
      },
      "setFactory(address)": {
        "details": "Set the factory address",
        "params": {
          "newFactory": "The new factory address"
        }
      },
      "setFee(uint256,address)": {
        "details": "Set the fee and fee recipient",
        "params": {
          "newFee": "New fee amount",
          "newFeeTo": "New fee recipient"
        }
      },
      "setGradMarketCap(uint256)": {
        "details": "Set the graduation market cap threshold",
        "params": {
          "newMarketCap": "The new graduation market cap threshold"
        }
      },
      "setInitialMarketCap(uint256)": {
        "details": "Set the initial market cap threshold",
        "params": {
          "newMarketCap": "The new initial market cap threshold"
        }
      },
      "setInitialSupply(uint256)": {
        "details": "Set the initial supply for generating a new token",
        "params": {
          "newSupply": "New initial supply"
        }
      },
      "setLockFactory(address)": {
        "details": "Set the lock factory address",
        "params": {
          "newLockFactory": "The new lock factory address"
        }
      },
      "setLockedTime(uint256)": {
        "details": "Set the locked time for lp tokens that locked in the locker contract",
        "params": {
          "newLockedTime": "The new locked time"
        }
      },
      "setOracle(address)": {
        "details": "Set the oracle address",
        "params": {
          "newOracle": "The new oracle address"
        }
      },
      "setTokenFactory(address)": {
        "details": "Set the token factory address",
        "params": {
          "newTokenFactory": "The new token factory address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ProfileNotExist()": [
        {
          "notice": "============================================ =                  ERRORS                  = ============================================"
        }
      ]
    },
    "events": {
      "Launched(address,address,uint256,uint8,uint256)": {
        "notice": "============================================ =                 EVENTS                   = ============================================"
      }
    },
    "kind": "user",
    "methods": {
      "boost1(string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Boost liquidity for a token by adding token and asset pairs"
      },
      "boost1For(address,string,string,uint8[],string,string,string[4],uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Boost liquidity for a token by adding token and asset pairs"
      },
      "boost2(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Boost Stage 2 for a token by adding token and asset pairs"
      },
      "boost3(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Boost Stage 3 for a token by adding token and asset pairs"
      },
      "calculateMarketCap(address)": {
        "notice": "Calculate the market cap of a token using oracle price and liquidity reserves"
      },
      "delegateLPTo(address,address)": {
        "notice": "LP token should have been released in its locker contract."
      },
      "delegateLPToBatch(address[],address[])": {
        "notice": "LP token should have been released in its locker contract."
      },
      "getBoostCount()": {
        "notice": "Get the total number of boost created through bonding"
      },
      "getTokenCount()": {
        "notice": "Get the total number of tokens created through bonding"
      },
      "setAssetToken(address)": {
        "notice": "Owner should ensure the asset token address is correct"
      },
      "setBoostStageThreshold(uint8,uint256)": {
        "notice": "Set threshold for a boost stage"
      },
      "setBoostStageThresholds(uint256[])": {
        "notice": "Set thresholds for all boost stages in one transaction"
      },
      "setExtRouter(address)": {
        "notice": "Owner should ensure the external router address is correct"
      },
      "setFactory(address)": {
        "notice": "Owner should ensure the factory address is correct"
      },
      "setLockFactory(address)": {
        "notice": "Owner should ensure the lock factory address is correct"
      },
      "setTokenFactory(address)": {
        "notice": "Owner should ensure the token factory address is correct"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4328,
        "contract": "src/Bonding.sol:Bonding",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 4331,
        "contract": "src/Bonding.sol:Bonding",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4504,
        "contract": "src/Bonding.sol:Bonding",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4573,
        "contract": "src/Bonding.sol:Bonding",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5660,
        "contract": "src/Bonding.sol:Bonding",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4200,
        "contract": "src/Bonding.sol:Bonding",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 4320,
        "contract": "src/Bonding.sol:Bonding",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4109,
        "contract": "src/Bonding.sol:Bonding",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 4188,
        "contract": "src/Bonding.sol:Bonding",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5933,
        "contract": "src/Bonding.sol:Bonding",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3714,
        "contract": "src/Bonding.sol:Bonding",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3709_storage)"
      },
      {
        "astId": 4009,
        "contract": "src/Bonding.sol:Bonding",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12015,
        "contract": "src/Bonding.sol:Bonding",
        "label": "feeTo",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 12018,
        "contract": "src/Bonding.sol:Bonding",
        "label": "factory",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(INTFactory)15135"
      },
      {
        "astId": 12021,
        "contract": "src/Bonding.sol:Bonding",
        "label": "tokenFactory",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(INTERC20Factory)14737"
      },
      {
        "astId": 12024,
        "contract": "src/Bonding.sol:Bonding",
        "label": "lockFactory",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(LockFactory)16059"
      },
      {
        "astId": 12026,
        "contract": "src/Bonding.sol:Bonding",
        "label": "initialSupply",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 12028,
        "contract": "src/Bonding.sol:Bonding",
        "label": "fee",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 12031,
        "contract": "src/Bonding.sol:Bonding",
        "label": "extRouter",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IExtRouter)16399"
      },
      {
        "astId": 12033,
        "contract": "src/Bonding.sol:Bonding",
        "label": "assetToken",
        "offset": 0,
        "slot": "308",
        "type": "t_address"
      },
      {
        "astId": 12069,
        "contract": "src/Bonding.sol:Bonding",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "309",
        "type": "t_mapping(t_address,t_struct(Token)12064_storage)"
      },
      {
        "astId": 12072,
        "contract": "src/Bonding.sol:Bonding",
        "label": "tokenInfos",
        "offset": 0,
        "slot": "310",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12080,
        "contract": "src/Bonding.sol:Bonding",
        "label": "boostInfo",
        "offset": 0,
        "slot": "311",
        "type": "t_mapping(t_address,t_struct(BoostInfo)12075_storage)"
      },
      {
        "astId": 12083,
        "contract": "src/Bonding.sol:Bonding",
        "label": "boostInfos",
        "offset": 0,
        "slot": "312",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12092,
        "contract": "src/Bonding.sol:Bonding",
        "label": "boostStageThresholds",
        "offset": 0,
        "slot": "313",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 12094,
        "contract": "src/Bonding.sol:Bonding",
        "label": "lockedTime",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 12097,
        "contract": "src/Bonding.sol:Bonding",
        "label": "oracle",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(IOracle)16541"
      },
      {
        "astId": 12099,
        "contract": "src/Bonding.sol:Bonding",
        "label": "initialMarketCap",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      },
      {
        "astId": 12101,
        "contract": "src/Bonding.sol:Bonding",
        "label": "gradMarketCap",
        "offset": 0,
        "slot": "317",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IExtRouter)16399": {
        "encoding": "inplace",
        "label": "contract IExtRouter",
        "numberOfBytes": "20"
      },
      "t_contract(INTERC20Factory)14737": {
        "encoding": "inplace",
        "label": "contract INTERC20Factory",
        "numberOfBytes": "20"
      },
      "t_contract(INTFactory)15135": {
        "encoding": "inplace",
        "label": "contract INTFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)16541": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_contract(LockFactory)16059": {
        "encoding": "inplace",
        "label": "contract LockFactory",
        "numberOfBytes": "20"
      },
      "t_enum(TokenStatus)12037": {
        "encoding": "inplace",
        "label": "enum Bonding.TokenStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(BoostInfo)12075_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Bonding.BoostInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BoostInfo)12075_storage"
      },
      "t_mapping(t_address,t_struct(Token)12064_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Bonding.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)12064_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3709_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3709_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BoostInfo)12075_storage": {
        "encoding": "inplace",
        "label": "struct Bonding.BoostInfo",
        "members": [
          {
            "astId": 12074,
            "contract": "src/Bonding.sol:Bonding",
            "label": "stage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)3709_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 3706,
            "contract": "src/Bonding.sol:Bonding",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3708,
            "contract": "src/Bonding.sol:Bonding",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Token)12064_storage": {
        "encoding": "inplace",
        "label": "struct Bonding.Token",
        "members": [
          {
            "astId": 12039,
            "contract": "src/Bonding.sol:Bonding",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12041,
            "contract": "src/Bonding.sol:Bonding",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12043,
            "contract": "src/Bonding.sol:Bonding",
            "label": "pair",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 12045,
            "contract": "src/Bonding.sol:Bonding",
            "label": "locker",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 12047,
            "contract": "src/Bonding.sol:Bonding",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 12050,
            "contract": "src/Bonding.sol:Bonding",
            "label": "cores",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 12052,
            "contract": "src/Bonding.sol:Bonding",
            "label": "image",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 12054,
            "contract": "src/Bonding.sol:Bonding",
            "label": "twitter",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 12056,
            "contract": "src/Bonding.sol:Bonding",
            "label": "telegram",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 12058,
            "contract": "src/Bonding.sol:Bonding",
            "label": "farcaster",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 12060,
            "contract": "src/Bonding.sol:Bonding",
            "label": "website",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 12063,
            "contract": "src/Bonding.sol:Bonding",
            "label": "status",
            "offset": 0,
            "slot": "11",
            "type": "t_enum(TokenStatus)12037"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}